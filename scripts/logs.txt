
===== Test run started: 2025-03-30 20:37:27.128967 =====

Test file not found, generating first: 1.1.1-Unsafe-Credit-Transfer-fixed.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-fixed.t.sol (attempt 1)
Passed: 1.1.1-Unsafe-Credit-Transfer-fixed.t.sol
Test file not found, generating first: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol (attempt 1)
Failed: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 357.75ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:34:1:
   |
34 | contract Attack {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:55:5:
   |
55 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 2 tests for test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletTest
[PASS] testAttackNotOwner() (gas: 16360)
[FAIL: revert: Transfer failed] testReentrancyExploit() (gas: 87994)
Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 562.69µs (205.28µs CPU time)

Ran 1 test suite in 4.67ms (562.69µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletTest
[FAIL: revert: Transfer failed] testReentrancyExploit() (gas: 87994)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol (attempt 2)
Failed: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 348.03ms
Compiler run successful!

Ran 2 tests for test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletTest
[PASS] testAttackNotOwner() (gas: 14947)
[FAIL: assertion failed: 1000000000000000000 < 3000000000000000000] testReentrancyExploit() (gas: 61861)
Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 2.94ms (602.77µs CPU time)

Ran 1 test suite in 7.05ms (2.94ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletTest
[FAIL: assertion failed: 1000000000000000000 < 3000000000000000000] testReentrancyExploit() (gas: 61861)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol (attempt 3)
Failed: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 349.66ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:37:1:
   |
37 | contract Attack {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:57:5:
   |
57 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 2 tests for test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletTest
[FAIL: call didn't revert at a lower depth than cheatcode call depth] testAttackNotOwner() (gas: 439510)
[PASS] testReentrancyExploit() (gas: 561945)
Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 595.20µs (250.93µs CPU time)

Ran 1 test suite in 5.07ms (595.20µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletTest
[FAIL: call didn't revert at a lower depth than cheatcode call depth] testAttackNotOwner() (gas: 439510)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol (attempt 4)
Failed: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 355.00ms
Compiler run successful!

Ran 2 tests for test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletTest
[PASS] testCollectEtherNotOwner() (gas: 41908)
[FAIL: Wallet balance should reflect double withdrawal: 2000000000000000000 != 1000000000000000000] testReentrancyExploit() (gas: 58784)
Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 552.76µs (230.08µs CPU time)

Ran 1 test suite in 6.34ms (552.76µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletTest
[FAIL: Wallet balance should reflect double withdrawal: 2000000000000000000 != 1000000000000000000] testReentrancyExploit() (gas: 58784)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol (attempt 5)
Failed: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 363.82ms
Compiler run successful!

Ran 2 tests for test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletTest
[FAIL: EvmError: Revert] testCollectEtherNotOwner() (gas: 11845)
[FAIL: EvmError: Revert] testReentrancyExploit() (gas: 15315)
Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 2.86ms (1.16ms CPU time)

Ran 1 test suite in 8.02ms (2.86ms CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletTest
[FAIL: EvmError: Revert] testCollectEtherNotOwner() (gas: 11845)
[FAIL: EvmError: Revert] testReentrancyExploit() (gas: 15315)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol
Failed after 5 attempts: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol

===== Test run finished: 2025-03-30 20:43:23.074448 =====


===== Test run started: 2025-03-30 23:19:50.309651 =====

Test file not found, generating first: 1.1.1-Unsafe-Credit-Transfer-fixed.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-fixed.t.sol (attempt 1)
Failed: 1.1.1-Unsafe-Credit-Transfer-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.1.1-Unsafe-Credit-Transfer-fixed.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-fixed.t.sol (attempt 2)
Passed: 1.1.1-Unsafe-Credit-Transfer-fixed.t.sol
Test file not found, generating first: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol (attempt 1)
Failed: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 355.90ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:33:1:
   |
33 | contract Attack {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:53:5:
   |
53 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 2 tests for test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletAttackTest
[FAIL: call didn't revert at a lower depth than cheatcode call depth] testAttackAccessControl() (gas: 12784)
[FAIL: Wallet's balance should be reduced correctly: 8000000000000000000 != 7000000000000000000] testReentrancyAttack() (gas: 114530)
Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 1.53ms (1.06ms CPU time)

Ran 1 test suite in 23.32ms (1.53ms CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletAttackTest
[FAIL: call didn't revert at a lower depth than cheatcode call depth] testAttackAccessControl() (gas: 12784)
[FAIL: Wallet's balance should be reduced correctly: 8000000000000000000 != 7000000000000000000] testReentrancyAttack() (gas: 114530)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol (attempt 2)
Failed: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 384.43ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:31:1:
   |
31 | contract Attack {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:51:5:
   |
51 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 2 tests for test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletAttackTest
[FAIL: call didn't revert at a lower depth than cheatcode call depth] testAttackAccessControl() (gas: 417981)
[FAIL: EvmError: Revert] testReentrancyAttack() (gas: 102671)
Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 1.13ms (1.29ms CPU time)

Ran 1 test suite in 8.50ms (1.13ms CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol:VulnerableWalletAttackTest
[FAIL: call didn't revert at a lower depth than cheatcode call depth] testAttackAccessControl() (gas: 417981)
[FAIL: EvmError: Revert] testReentrancyAttack() (gas: 102671)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol

Running forge test: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol (attempt 3)
Passed: 1.1.1-Unsafe-Credit-Transfer-vulnerability.t.sol
Test file not found, generating first: 1.1.2-Unsafe-System-State-Changes-fixed.t.sol

Running forge test: 1.1.2-Unsafe-System-State-Changes-fixed.t.sol (attempt 1)
Failed: 1.1.2-Unsafe-System-State-Changes-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.1.2-Unsafe-System-State-Changes-fixed.t.sol

Running forge test: 1.1.2-Unsafe-System-State-Changes-fixed.t.sol (attempt 2)
Failed: 1.1.2-Unsafe-System-State-Changes-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 375.15ms
Compiler run successful!

Ran 2 tests for test/1.1.2-Unsafe-System-State-Changes-fixed.t.sol:FixedContractTest
[FAIL: EvmError: Revert] testDirectBugCall() (gas: 27160)
[PASS] testNoUnexpectedReentrancyEffects() (gas: 85256)
Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 933.69µs (895.84µs CPU time)

Ran 1 test suite in 5.62ms (933.69µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/1.1.2-Unsafe-System-State-Changes-fixed.t.sol:FixedContractTest
[FAIL: EvmError: Revert] testDirectBugCall() (gas: 27160)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 1.1.2-Unsafe-System-State-Changes-fixed.t.sol

Running forge test: 1.1.2-Unsafe-System-State-Changes-fixed.t.sol (attempt 3)
Passed: 1.1.2-Unsafe-System-State-Changes-fixed.t.sol
Test file not found, generating first: 1.1.2-Unsafe-System-State-Changes-vulnerability.t.sol

Running forge test: 1.1.2-Unsafe-System-State-Changes-vulnerability.t.sol (attempt 1)
Passed: 1.1.2-Unsafe-System-State-Changes-vulnerability.t.sol
Test file not found, generating first: 1.2-Malicious-Fallback-Function-fixed.t.sol

Running forge test: 1.2-Malicious-Fallback-Function-fixed.t.sol (attempt 1)
Passed: 1.2-Malicious-Fallback-Function-fixed.t.sol
Test file not found, generating first: 1.2-Malicious-Fallback-Function-vulnerability.t.sol

Running forge test: 1.2-Malicious-Fallback-Function-vulnerability.t.sol (attempt 1)
Passed: 1.2-Malicious-Fallback-Function-vulnerability.t.sol
Test file not found, generating first: 1.3-Improper-Check-of-External-Call-Result-fixed.t.sol

Running forge test: 1.3-Improper-Check-of-External-Call-Result-fixed.t.sol (attempt 1)
Passed: 1.3-Improper-Check-of-External-Call-Result-fixed.t.sol
Test file not found, generating first: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol

Running forge test: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol (attempt 1)
Failed: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 368.58ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol:31:1:
   |
31 | contract AttackContract {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol:39:5:
   |
39 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2072): Unused local variable.
  --> test/1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol:22:10:
   |
22 |         (bool success, ) = msg.sender.call{value: amount}("");
   |          ^^^^^^^^^^^^


Ran 1 test for test/1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol:VulnerableContractTest
[FAIL: Attacker should not have received Ether: 1000000000000000000 != 0] testAttackWithdrawDoesNotTransferFunds() (gas: 78507)
Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 414.93µs (144.55µs CPU time)

Ran 1 test suite in 6.13ms (414.93µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol:VulnerableContractTest
[FAIL: Attacker should not have received Ether: 1000000000000000000 != 0] testAttackWithdrawDoesNotTransferFunds() (gas: 78507)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol

Running forge test: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol (attempt 2)
Failed: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 349.91ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol:33:1:
   |
33 | contract AttackContract {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol:41:5:
   |
41 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2072): Unused local variable.
  --> test/1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol:23:10:
   |
23 |         (bool success, ) = msg.sender.call{value: amount}("");
   |          ^^^^^^^^^^^^


Ran 1 test for test/1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol:VulnerableContractTest
[FAIL: Attacker should not have received Ether: 1000000000000000000 != 0] testAttackWithdrawDoesNotTransferFunds() (gas: 85113)
Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 499.86µs (144.36µs CPU time)

Ran 1 test suite in 8.54ms (499.86µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol:VulnerableContractTest
[FAIL: Attacker should not have received Ether: 1000000000000000000 != 0] testAttackWithdrawDoesNotTransferFunds() (gas: 85113)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol

Running forge test: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol (attempt 3)
Failed: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol

Running forge test: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol (attempt 4)
Passed: 1.3-Improper-Check-of-External-Call-Result-vulnerability.t.sol
Test file not found, generating first: 1.3.1-Improper-Check-of-External-Call-Return-Value-fixed.t.sol

Running forge test: 1.3.1-Improper-Check-of-External-Call-Return-Value-fixed.t.sol (attempt 1)
Passed: 1.3.1-Improper-Check-of-External-Call-Return-Value-fixed.t.sol
Test file not found, generating first: 1.3.1-Improper-Check-of-External-Call-Return-Value-vulnerability.t.sol

Running forge test: 1.3.1-Improper-Check-of-External-Call-Return-Value-vulnerability.t.sol (attempt 1)
Failed: 1.3.1-Improper-Check-of-External-Call-Return-Value-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.3.1-Improper-Check-of-External-Call-Return-Value-vulnerability.t.sol

Running forge test: 1.3.1-Improper-Check-of-External-Call-Return-Value-vulnerability.t.sol (attempt 2)
Passed: 1.3.1-Improper-Check-of-External-Call-Return-Value-vulnerability.t.sol
Test file not found, generating first: 1.3.2-Improper-Exception-Handling-of-External-Calls-fixed.t.sol

Running forge test: 1.3.2-Improper-Exception-Handling-of-External-Calls-fixed.t.sol (attempt 1)
Passed: 1.3.2-Improper-Exception-Handling-of-External-Calls-fixed.t.sol
Test file not found, generating first: 1.3.2-Improper-Exception-Handling-of-External-Calls-vulnerability.t.sol

Running forge test: 1.3.2-Improper-Exception-Handling-of-External-Calls-vulnerability.t.sol (attempt 1)
Passed: 1.3.2-Improper-Exception-Handling-of-External-Calls-vulnerability.t.sol
Test file not found, generating first: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-fixed.t.sol

Running forge test: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-fixed.t.sol (attempt 1)
Failed: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 339.07ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-fixed.t.sol:17:1:
   |
17 | contract MaliciousForFixed {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-fixed.t.sol:18:5:
   |
18 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 3 tests for test/1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-fixed.t.sol:ReturnValueFixedTest
[FAIL: next call did not revert as expected] testAttackFixedReverts() (gas: 10596)
[FAIL: next call did not revert as expected] testCallCheckedRevertsWithMalicious() (gas: 8060)
[PASS] testCallCheckedSucceedsWithGood() (gas: 6285)
Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 542.32µs (413.32µs CPU time)

Ran 1 test suite in 6.09ms (542.32µs CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-fixed.t.sol:ReturnValueFixedTest
[FAIL: next call did not revert as expected] testAttackFixedReverts() (gas: 10596)
[FAIL: next call did not revert as expected] testCallCheckedRevertsWithMalicious() (gas: 8060)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-fixed.t.sol

Running forge test: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-fixed.t.sol (attempt 2)
Passed: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-fixed.t.sol
Test file not found, generating first: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol

Running forge test: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol (attempt 1)
Failed: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 343.57ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol:16:1:
   |
16 | contract Malicious {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol:18:5:
   |
18 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2072): Unused local variable.
  --> test/1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol:10:10:
   |
10 |         (bool success, ) = callee.call(abi.encodeWithSignature("doSomething()"));
   |          ^^^^^^^^^^^^

Warning (2072): Unused local variable.
  --> test/1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol:86:24:
   |
86 |         (bool success, bytes memory data) = address(malicious).call(abi.encodeWithSignature("doSomething()"));
   |                        ^^^^^^^^^^^^^^^^^


Ran 3 tests for test/1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol:VulnerableTest
[PASS] testAttackExploitsVulnerability() (gas: 11187)
[PASS] testCallNotCheckedDoesNotRevert() (gas: 8610)
[FAIL: Direct call to malicious should fail] testDirectCallRevertsButNotWhenCalledViaVulnerable() (gas: 5559)
Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 1.42ms (839.92µs CPU time)

Ran 1 test suite in 10.51ms (1.42ms CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol:VulnerableTest
[FAIL: Direct call to malicious should fail] testDirectCallRevertsButNotWhenCalledViaVulnerable() (gas: 5559)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol

Running forge test: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol (attempt 2)
Passed: 1.3.3-Improper-Check-of-Low-Level-Call-Return-Value-vulnerability.t.sol
Test file not found, generating first: 1.4-Improper-locking-during-external-calls-fixed.t.sol

Running forge test: 1.4-Improper-locking-during-external-calls-fixed.t.sol (attempt 1)
Failed: 1.4-Improper-locking-during-external-calls-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.4-Improper-locking-during-external-calls-fixed.t.sol

Running forge test: 1.4-Improper-locking-during-external-calls-fixed.t.sol (attempt 2)
Failed: 1.4-Improper-locking-during-external-calls-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 344.12ms
Compiler run successful!

Ran 2 tests for test/1.4-Improper-locking-during-external-calls-fixed.t.sol:BidFixedTest
[FAIL: Error != expected error: No pending funds != Attack contract rejects funds] testAttackDoesNotLockContract() (gas: 40860)
[FAIL: revert: No pending funds] testNormalWithdraw() (gas: 29090)
Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 1.80ms (2.11ms CPU time)

Ran 1 test suite in 14.16ms (1.80ms CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/1.4-Improper-locking-during-external-calls-fixed.t.sol:BidFixedTest
[FAIL: Error != expected error: No pending funds != Attack contract rejects funds] testAttackDoesNotLockContract() (gas: 40860)
[FAIL: revert: No pending funds] testNormalWithdraw() (gas: 29090)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 1.4-Improper-locking-during-external-calls-fixed.t.sol

Running forge test: 1.4-Improper-locking-during-external-calls-fixed.t.sol (attempt 3)
Failed: 1.4-Improper-locking-during-external-calls-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.4-Improper-locking-during-external-calls-fixed.t.sol

Running forge test: 1.4-Improper-locking-during-external-calls-fixed.t.sol (attempt 4)
Failed: 1.4-Improper-locking-during-external-calls-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 352.77ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
  --> test/1.4-Improper-locking-during-external-calls-fixed.t.sol:96:9:
   |
96 |         uint256 initialUserBalance = user.balance;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^


Ran 2 tests for test/1.4-Improper-locking-during-external-calls-fixed.t.sol:BidFixedTest
[FAIL: Error != expected error: No pending funds != Attack contract rejects funds] testAttackWithdrawRevert() (gas: 36052)
[FAIL: revert: No pending funds] testSuccessfulWithdraw() (gas: 33069)
Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 534.64µs (216.26µs CPU time)

Ran 1 test suite in 6.28ms (534.64µs CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/1.4-Improper-locking-during-external-calls-fixed.t.sol:BidFixedTest
[FAIL: Error != expected error: No pending funds != Attack contract rejects funds] testAttackWithdrawRevert() (gas: 36052)
[FAIL: revert: No pending funds] testSuccessfulWithdraw() (gas: 33069)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 1.4-Improper-locking-during-external-calls-fixed.t.sol

Running forge test: 1.4-Improper-locking-during-external-calls-fixed.t.sol (attempt 5)
Failed: 1.4-Improper-locking-during-external-calls-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.4-Improper-locking-during-external-calls-fixed.t.sol
Failed after 5 attempts: 1.4-Improper-locking-during-external-calls-fixed.t.sol
Test file not found, generating first: 1.4-Improper-locking-during-external-calls-vulnerability.t.sol

Running forge test: 1.4-Improper-locking-during-external-calls-vulnerability.t.sol (attempt 1)
Failed: 1.4-Improper-locking-during-external-calls-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 376.33ms
Compiler run successful!

Ran 2 tests for test/1.4-Improper-locking-during-external-calls-vulnerability.t.sol:VulnerabilityTest
[FAIL: EvmError: Revert] testNormalWithdrawAfterSettingProperState() (gas: 42045)
[FAIL: call reverted as expected, but without data] testWithdrawRevertsDueToMaliciousFallback() (gas: 17595)
Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 1.29ms (851.00µs CPU time)

Ran 1 test suite in 11.26ms (1.29ms CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/1.4-Improper-locking-during-external-calls-vulnerability.t.sol:VulnerabilityTest
[FAIL: EvmError: Revert] testNormalWithdrawAfterSettingProperState() (gas: 42045)
[FAIL: call reverted as expected, but without data] testWithdrawRevertsDueToMaliciousFallback() (gas: 17595)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 1.4-Improper-locking-during-external-calls-vulnerability.t.sol

Running forge test: 1.4-Improper-locking-during-external-calls-vulnerability.t.sol (attempt 2)
Failed: 1.4-Improper-locking-during-external-calls-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.4-Improper-locking-during-external-calls-vulnerability.t.sol

Running forge test: 1.4-Improper-locking-during-external-calls-vulnerability.t.sol (attempt 3)
Passed: 1.4-Improper-locking-during-external-calls-vulnerability.t.sol
Test file not found, generating first: 1.5-Interoperability-issues-with-other-contracts-fixed.t.sol

Running forge test: 1.5-Interoperability-issues-with-other-contracts-fixed.t.sol (attempt 1)
Passed: 1.5-Interoperability-issues-with-other-contracts-fixed.t.sol
Test file not found, generating first: 1.5-Interoperability-issues-with-other-contracts-vulnerability.t.sol

Running forge test: 1.5-Interoperability-issues-with-other-contracts-vulnerability.t.sol (attempt 1)
Passed: 1.5-Interoperability-issues-with-other-contracts-vulnerability.t.sol
Test file not found, generating first: 1.6-Delegatecall-to-Untrusted-Callee-fixed.t.sol

Running forge test: 1.6-Delegatecall-to-Untrusted-Callee-fixed.t.sol (attempt 1)
Passed: 1.6-Delegatecall-to-Untrusted-Callee-fixed.t.sol
Test file not found, generating first: 1.6-Delegatecall-to-Untrusted-Callee-vulnerability.t.sol

Running forge test: 1.6-Delegatecall-to-Untrusted-Callee-vulnerability.t.sol (attempt 1)
Passed: 1.6-Delegatecall-to-Untrusted-Callee-vulnerability.t.sol
Test file not found, generating first: 1.7-Unsafe-Non-Blockchain-External-Call-fixed.t.sol

Running forge test: 1.7-Unsafe-Non-Blockchain-External-Call-fixed.t.sol (attempt 1)
Passed: 1.7-Unsafe-Non-Blockchain-External-Call-fixed.t.sol
Test file not found, generating first: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol

Running forge test: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol (attempt 1)
Failed: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 342.01ms
Compiler run successful with warnings:
Warning (2018): Function state mutability can be restricted to pure
  --> test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:30:5:
   |
30 |     function executeCommand(string calldata command) external returns (bytes memory) {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 4 tests for test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:VulnerableExternalCallTest
[FAIL: The attack did not execute as expected:  !Attack executed: maliciousCommand != Attack executed: maliciousCommand] testExecuteExternalCallAttack() (gas: 38826)
[FAIL: next call did not revert as expected] testRevertWhenExternalContractIsEOA() (gas: 32597)
[FAIL: next call did not revert as expected] testRevertWhenNoValidExternalContract() (gas: 8686)
[FAIL: The external call did not execute attacker logic:  Attack executed: unauthorized != Attack executed: unauthorized] testUnauthorizedChangeOfExternalContract() (gas: 207326)
Suite result: FAILED. 0 passed; 4 failed; 0 skipped; finished in 1.58ms (1.76ms CPU time)

Ran 1 test suite in 11.86ms (1.58ms CPU time): 0 tests passed, 4 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 4 failing tests in test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:VulnerableExternalCallTest
[FAIL: The attack did not execute as expected:  !Attack executed: maliciousCommand != Attack executed: maliciousCommand] testExecuteExternalCallAttack() (gas: 38826)
[FAIL: next call did not revert as expected] testRevertWhenExternalContractIsEOA() (gas: 32597)
[FAIL: next call did not revert as expected] testRevertWhenNoValidExternalContract() (gas: 8686)
[FAIL: The external call did not execute attacker logic:  Attack executed: unauthorized != Attack executed: unauthorized] testUnauthorizedChangeOfExternalContract() (gas: 207326)

Encountered a total of 4 failing tests, 0 tests succeeded
Regenerating: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol

Running forge test: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol (attempt 2)
Failed: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 377.95ms
Compiler run successful with warnings:
Warning (2018): Function state mutability can be restricted to pure
  --> test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:29:5:
   |
29 |     function executeCommand(string calldata command) external returns (bytes memory) {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 4 tests for test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:VulnerableExternalCallTest
[FAIL: The attack did not execute as expected:  !Attack executed: maliciousCommand != Attack executed: maliciousCommand] testExecuteExternalCallAttack() (gas: 37908)
[FAIL: next call did not revert as expected] testRevertWhenExternalContractIsEOA() (gas: 35586)
[FAIL: next call did not revert as expected] testRevertWhenNoValidExternalContract() (gas: 8708)
[FAIL: The external call did not execute attacker logic:  Attack executed: unauthorized != Attack executed: unauthorized] testUnauthorizedChangeOfExternalContract() (gas: 39243)
Suite result: FAILED. 0 passed; 4 failed; 0 skipped; finished in 2.75ms (2.56ms CPU time)

Ran 1 test suite in 7.79ms (2.75ms CPU time): 0 tests passed, 4 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 4 failing tests in test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:VulnerableExternalCallTest
[FAIL: The attack did not execute as expected:  !Attack executed: maliciousCommand != Attack executed: maliciousCommand] testExecuteExternalCallAttack() (gas: 37908)
[FAIL: next call did not revert as expected] testRevertWhenExternalContractIsEOA() (gas: 35586)
[FAIL: next call did not revert as expected] testRevertWhenNoValidExternalContract() (gas: 8708)
[FAIL: The external call did not execute attacker logic:  Attack executed: unauthorized != Attack executed: unauthorized] testUnauthorizedChangeOfExternalContract() (gas: 39243)

Encountered a total of 4 failing tests, 0 tests succeeded
Regenerating: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol

Running forge test: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol (attempt 3)
Failed: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 338.46ms
Compiler run successful with warnings:
Warning (2018): Function state mutability can be restricted to pure
  --> test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:31:5:
   |
31 |     function executeCommand(string calldata command) external returns (bytes memory) {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 4 tests for test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:VulnerableExternalCallTest
[FAIL: The attack did not execute as expected:  !Attack executed: maliciousCommand != Attack executed: maliciousCommand] testExecuteExternalCallAttack() (gas: 38815)
[FAIL: next call did not revert as expected] testRevertWhenExternalContractIsEOA() (gas: 32597)
[PASS] testRevertWhenNoValidExternalContract() (gas: 79554)
[FAIL: The external call did not execute attacker logic:  Attack executed: unauthorized != Attack executed: unauthorized] testUnauthorizedChangeOfExternalContract() (gas: 209088)
Suite result: FAILED. 1 passed; 3 failed; 0 skipped; finished in 543.30µs (327.98µs CPU time)

Ran 1 test suite in 4.80ms (543.30µs CPU time): 1 tests passed, 3 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 3 failing tests in test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:VulnerableExternalCallTest
[FAIL: The attack did not execute as expected:  !Attack executed: maliciousCommand != Attack executed: maliciousCommand] testExecuteExternalCallAttack() (gas: 38815)
[FAIL: next call did not revert as expected] testRevertWhenExternalContractIsEOA() (gas: 32597)
[FAIL: The external call did not execute attacker logic:  Attack executed: unauthorized != Attack executed: unauthorized] testUnauthorizedChangeOfExternalContract() (gas: 209088)

Encountered a total of 3 failing tests, 1 tests succeeded
Regenerating: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol

Running forge test: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol (attempt 4)
Failed: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 337.80ms
Compiler run successful with warnings:
Warning (2018): Function state mutability can be restricted to pure
  --> test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:25:5:
   |
25 |     function executeCommand(string calldata command) external returns (bytes memory) {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 3 tests for test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:VulnerableExternalCallTest
[FAIL: The attack did not execute as expected:  !Attack executed: maliciousCommand != Attack executed: maliciousCommand] testExecuteExternalCallAttack() (gas: 37908)
[FAIL: next call did not revert as expected] testRevertWhenExternalContractIsEOA() (gas: 32233)
[FAIL: The external call did not execute attacker logic:  Attack executed: unauthorized != Attack executed: unauthorized] testUnauthorizedChangeOfExternalContract() (gas: 39243)
Suite result: FAILED. 0 passed; 3 failed; 0 skipped; finished in 579.32µs (304.88µs CPU time)

Ran 1 test suite in 7.89ms (579.32µs CPU time): 0 tests passed, 3 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 3 failing tests in test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:VulnerableExternalCallTest
[FAIL: The attack did not execute as expected:  !Attack executed: maliciousCommand != Attack executed: maliciousCommand] testExecuteExternalCallAttack() (gas: 37908)
[FAIL: next call did not revert as expected] testRevertWhenExternalContractIsEOA() (gas: 32233)
[FAIL: The external call did not execute attacker logic:  Attack executed: unauthorized != Attack executed: unauthorized] testUnauthorizedChangeOfExternalContract() (gas: 39243)

Encountered a total of 3 failing tests, 0 tests succeeded
Regenerating: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol

Running forge test: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol (attempt 5)
Failed: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 344.61ms
Compiler run successful with warnings:
Warning (2018): Function state mutability can be restricted to pure
  --> test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:29:5:
   |
29 |     function executeCommand(string calldata command) external returns (bytes memory) {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 3 tests for test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:VulnerableExternalCallTest
[FAIL: The attack did not execute as expected:  !Attack executed: maliciousCommand != Attack executed: maliciousCommand] testExecuteExternalCallAttack() (gas: 37908)
[FAIL: next call did not revert as expected] testRevertWhenExternalContractIsEOA() (gas: 32244)
[FAIL: The external call did not execute attacker logic:  Attack executed: unauthorized != Attack executed: unauthorized] testUnauthorizedChangeOfExternalContract() (gas: 39243)
Suite result: FAILED. 0 passed; 3 failed; 0 skipped; finished in 509.84µs (250.49µs CPU time)

Ran 1 test suite in 7.37ms (509.84µs CPU time): 0 tests passed, 3 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 3 failing tests in test/1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol:VulnerableExternalCallTest
[FAIL: The attack did not execute as expected:  !Attack executed: maliciousCommand != Attack executed: maliciousCommand] testExecuteExternalCallAttack() (gas: 37908)
[FAIL: next call did not revert as expected] testRevertWhenExternalContractIsEOA() (gas: 32244)
[FAIL: The external call did not execute attacker logic:  Attack executed: unauthorized != Attack executed: unauthorized] testUnauthorizedChangeOfExternalContract() (gas: 39243)

Encountered a total of 3 failing tests, 0 tests succeeded
Regenerating: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol
Failed after 5 attempts: 1.7-Unsafe-Non-Blockchain-External-Call-vulnerability.t.sol
Test file not found, generating first: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol

Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol (attempt 1)
Failed: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol

Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol (attempt 2)
Passed: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol
Test file not found, generating first: 1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol

Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol (attempt 1)
Passed: 1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol
Test file not found, generating first: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol

Running forge test: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol (attempt 1)
Failed: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol

Running forge test: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol (attempt 2)
Failed: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol

Running forge test: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol (attempt 3)
Failed: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol

Running forge test: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol (attempt 4)
Passed: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol
Test file not found, generating first: 1.7.2-Unsafe-External-Library-Call-vulnerability.t.sol

Running forge test: 1.7.2-Unsafe-External-Library-Call-vulnerability.t.sol (attempt 1)
Passed: 1.7.2-Unsafe-External-Library-Call-vulnerability.t.sol
Test file not found, generating first: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol (attempt 1)
Passed: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol
Test file not found, generating first: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol (attempt 1)
Failed: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 365.46ms
Compiler run successful!

Ran 1 test for test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeCommandExecutorTest
[FAIL: `testFail*` has been removed. Consider changing to test_Revert[If|When]_Condition and expecting a revert] Found 1 instances: testFailedCommandExecution (gas: 0)
Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 197.64µs (0.00ns CPU time)

Ran 1 test suite in 7.37ms (197.64µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeCommandExecutorTest
[FAIL: `testFail*` has been removed. Consider changing to test_Revert[If|When]_Condition and expecting a revert] Found 1 instances: testFailedCommandExecution (gas: 0)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol (attempt 2)
Failed: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 344.62ms
Compiler run successful!

Ran 2 tests for test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeCommandExecutorTest
[FAIL: VulnerableTarget should have selfdestructed: 132 != 0] testAttackTriggersSelfDestruct() (gas: 45751)
[PASS] testRevertWhenCommandFails() (gas: 32762)
Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 2.37ms (2.05ms CPU time)

Ran 1 test suite in 12.74ms (2.37ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeCommandExecutorTest
[FAIL: VulnerableTarget should have selfdestructed: 132 != 0] testAttackTriggersSelfDestruct() (gas: 45751)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol (attempt 3)
Failed: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 476.89ms
Compiler run successful!

Ran 1 test for test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeCommandExecutorTest
[FAIL: revert: Funding target failed] setUp() (gas: 0)
Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 317.92µs (0.00ns CPU time)

Ran 1 test suite in 10.80ms (317.92µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeCommandExecutorTest
[FAIL: revert: Funding target failed] setUp() (gas: 0)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol (attempt 4)
Failed: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 353.02ms
Compiler run successful!

Ran 3 tests for test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeCommandExecutorTest
[PASS] testExecuteNonexistentCommandReverts() (gas: 32783)
[FAIL: Target contract should have selfdestructed: 132 != 0] testExploitSelfdestruct() (gas: 43114)
[PASS] testLastExecutedCommandUpdates() (gas: 22658)
Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 626.89µs (304.47µs CPU time)

Ran 1 test suite in 5.99ms (626.89µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeCommandExecutorTest
[FAIL: Target contract should have selfdestructed: 132 != 0] testExploitSelfdestruct() (gas: 43114)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol (attempt 5)
Failed: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 353.62ms
Compiler run successful!

Ran 3 tests for test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeCommandExecutorTest
[PASS] testExecuteNonexistentCommandReverts() (gas: 32783)
[PASS] testExploitSelfdestruct() (gas: 29105)
[FAIL: lastExecutedCommand was not updated:  != nonexistent] testLastExecutedCommandUpdates() (gas: 37101)
Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 721.52µs (352.67µs CPU time)

Ran 1 test suite in 7.10ms (721.52µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeCommandExecutorTest
[FAIL: lastExecutedCommand was not updated:  != nonexistent] testLastExecutedCommandUpdates() (gas: 37101)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Failed after 5 attempts: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Test file not found, generating first: 1.7.4-Unsafe-External-File-Access-fixed.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-fixed.t.sol (attempt 1)
Failed: 1.7.4-Unsafe-External-File-Access-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.4-Unsafe-External-File-Access-fixed.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-fixed.t.sol (attempt 2)
Failed: 1.7.4-Unsafe-External-File-Access-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.4-Unsafe-External-File-Access-fixed.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-fixed.t.sol (attempt 3)
Failed: 1.7.4-Unsafe-External-File-Access-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.4-Unsafe-External-File-Access-fixed.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-fixed.t.sol (attempt 4)
Failed: 1.7.4-Unsafe-External-File-Access-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.4-Unsafe-External-File-Access-fixed.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-fixed.t.sol (attempt 5)
Failed: 1.7.4-Unsafe-External-File-Access-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.4-Unsafe-External-File-Access-fixed.t.sol
Failed after 5 attempts: 1.7.4-Unsafe-External-File-Access-fixed.t.sol
Test file not found, generating first: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol (attempt 1)
Failed: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol (attempt 2)
Failed: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol (attempt 3)
Failed: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol (attempt 4)
Failed: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol (attempt 5)
Failed: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol
Failed after 5 attempts: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol
Test file not found, generating first: 1.8-Cross-Channel-Invocation-fixed.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-fixed.t.sol (attempt 1)
Failed: 1.8-Cross-Channel-Invocation-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.8-Cross-Channel-Invocation-fixed.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-fixed.t.sol (attempt 2)
Failed: 1.8-Cross-Channel-Invocation-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.8-Cross-Channel-Invocation-fixed.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-fixed.t.sol (attempt 3)
Failed: 1.8-Cross-Channel-Invocation-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.8-Cross-Channel-Invocation-fixed.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-fixed.t.sol (attempt 4)
Failed: 1.8-Cross-Channel-Invocation-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.8-Cross-Channel-Invocation-fixed.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-fixed.t.sol (attempt 5)
Failed: 1.8-Cross-Channel-Invocation-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.8-Cross-Channel-Invocation-fixed.t.sol
Failed after 5 attempts: 1.8-Cross-Channel-Invocation-fixed.t.sol
Test file not found, generating first: 1.8-Cross-Channel-Invocation-vulnerability.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-vulnerability.t.sol (attempt 1)
Failed: 1.8-Cross-Channel-Invocation-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.8-Cross-Channel-Invocation-vulnerability.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-vulnerability.t.sol (attempt 2)
Failed: 1.8-Cross-Channel-Invocation-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.8-Cross-Channel-Invocation-vulnerability.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-vulnerability.t.sol (attempt 3)
Failed: 1.8-Cross-Channel-Invocation-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.8-Cross-Channel-Invocation-vulnerability.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-vulnerability.t.sol (attempt 4)
Failed: 1.8-Cross-Channel-Invocation-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.8-Cross-Channel-Invocation-vulnerability.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-vulnerability.t.sol (attempt 5)
Failed: 1.8-Cross-Channel-Invocation-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 1.8-Cross-Channel-Invocation-vulnerability.t.sol
Failed after 5 attempts: 1.8-Cross-Channel-Invocation-vulnerability.t.sol
Test file not found, generating first: 2-Mishandled-Events-fixed.t.sol

Running forge test: 2-Mishandled-Events-fixed.t.sol (attempt 1)
Failed: 2-Mishandled-Events-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 2-Mishandled-Events-fixed.t.sol

Running forge test: 2-Mishandled-Events-fixed.t.sol (attempt 2)
Failed: 2-Mishandled-Events-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 2-Mishandled-Events-fixed.t.sol

Running forge test: 2-Mishandled-Events-fixed.t.sol (attempt 3)
Failed: 2-Mishandled-Events-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 2-Mishandled-Events-fixed.t.sol

Running forge test: 2-Mishandled-Events-fixed.t.sol (attempt 4)
Failed: 2-Mishandled-Events-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 2-Mishandled-Events-fixed.t.sol

Running forge test: 2-Mishandled-Events-fixed.t.sol (attempt 5)
Failed: 2-Mishandled-Events-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 2-Mishandled-Events-fixed.t.sol
Failed after 5 attempts: 2-Mishandled-Events-fixed.t.sol
Test file not found, generating first: 2-Mishandled-Events-vulnerability.t.sol

Running forge test: 2-Mishandled-Events-vulnerability.t.sol (attempt 1)
Failed: 2-Mishandled-Events-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 2-Mishandled-Events-vulnerability.t.sol

Running forge test: 2-Mishandled-Events-vulnerability.t.sol (attempt 2)
Failed: 2-Mishandled-Events-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 2-Mishandled-Events-vulnerability.t.sol

Running forge test: 2-Mishandled-Events-vulnerability.t.sol (attempt 3)
Failed: 2-Mishandled-Events-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 2-Mishandled-Events-vulnerability.t.sol

Running forge test: 2-Mishandled-Events-vulnerability.t.sol (attempt 4)
Failed: 2-Mishandled-Events-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 2-Mishandled-Events-vulnerability.t.sol

Running forge test: 2-Mishandled-Events-vulnerability.t.sol (attempt 5)
Failed: 2-Mishandled-Events-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 2-Mishandled-Events-vulnerability.t.sol
Failed after 5 attempts: 2-Mishandled-Events-vulnerability.t.sol
Test file not found, generating first: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 1)
Failed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 2)
Failed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 3)
Failed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 4)
Failed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 5)
Failed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Failed after 5 attempts: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Test file not found, generating first: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol (attempt 1)
Failed: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol (attempt 2)
Failed: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol
Error:
Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol

===== Test run started: 2025-03-31 00:10:16.551695 =====


Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol (attempt 1)
Failed: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol

Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol (attempt 2)
Failed: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol
Error:
Error: Compilation failed
Regenerating: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol

===== Test run started: 2025-03-31 00:12:02.778243 =====


Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol (attempt 1)
Failed: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol

===== Test run started: 2025-03-31 00:14:35.960637 =====


Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol (attempt 1)
Failed: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "1.7.3-Unsafe-External-Command-Execution-vulnerability.sol" not found: File not found.
 --> test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:4:1:
  |
4 | import "../1.7.3-Unsafe-External-Command-Execution-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "1.7.4-Unsafe-External-File-Access-fixed.sol" not found: File not found.
 --> test/1.7.4-Unsafe-External-File-Access-fixed.t.sol:4:1:
  |
4 | import "../1.7.4-Unsafe-External-File-Access-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (2314): Expected identifier but got 'fixed'
  --> test/2.1-Improper-Exceptional-Events-Handling-fixed.t.sol:49:19:
   |
49 |     FixedContract fixed;
   |                   ^^^^^

Error: Compilation failed
Regenerating: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol

Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol (attempt 2)
Failed: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol:7:26:
  |
7 |     FixedContract public fixed;
  |                          ^^^^^

Error (6275): Source "1.7.3-Unsafe-External-Command-Execution-vulnerability.sol" not found: File not found.
 --> test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:4:1:
  |
4 | import "../1.7.3-Unsafe-External-Command-Execution-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "1.7.4-Unsafe-External-File-Access-fixed.sol" not found: File not found.
 --> test/1.7.4-Unsafe-External-File-Access-fixed.t.sol:4:1:
  |
4 | import "../1.7.4-Unsafe-External-File-Access-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (2314): Expected identifier but got 'fixed'
  --> test/2.1-Improper-Exceptional-Events-Handling-fixed.t.sol:49:19:
   |
49 |     FixedContract fixed;
   |                   ^^^^^

Error: Compilation failed
Regenerating: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol

===== Test run started: 2025-03-31 00:16:47.459870 =====

Test file not found, generating first: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 1)
Failed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol:7:26:
  |
7 |     FixedContract public fixed;
  |                          ^^^^^

Error (6275): Source "1.7.3-Unsafe-External-Command-Execution-vulnerability.sol" not found: File not found.
 --> test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:4:1:
  |
4 | import "../1.7.3-Unsafe-External-Command-Execution-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "1.7.4-Unsafe-External-File-Access-fixed.sol" not found: File not found.
 --> test/1.7.4-Unsafe-External-File-Access-fixed.t.sol:4:1:
  |
4 | import "../1.7.4-Unsafe-External-File-Access-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 2)
Failed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol:7:26:
  |
7 |     FixedContract public fixed;
  |                          ^^^^^

Error (6275): Source "1.7.3-Unsafe-External-Command-Execution-vulnerability.sol" not found: File not found.
 --> test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:4:1:
  |
4 | import "../1.7.3-Unsafe-External-Command-Execution-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "1.7.4-Unsafe-External-File-Access-fixed.sol" not found: File not found.
 --> test/1.7.4-Unsafe-External-File-Access-fixed.t.sol:4:1:
  |
4 | import "../1.7.4-Unsafe-External-File-Access-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "2.1-Improper-Exceptional-Events-Handling-fixed.sol" not found: File not found.
 --> test/2.1-Improper-Exceptional-Events-Handling-fixed.t.sol:5:1:
  |
5 | import "../2.1-Improper-Exceptional-Events-Handling-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 3)
Failed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol:7:26:
  |
7 |     FixedContract public fixed;
  |                          ^^^^^

Error (6275): Source "1.7.3-Unsafe-External-Command-Execution-vulnerability.sol" not found: File not found.
 --> test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:4:1:
  |
4 | import "../1.7.3-Unsafe-External-Command-Execution-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "1.7.4-Unsafe-External-File-Access-fixed.sol" not found: File not found.
 --> test/1.7.4-Unsafe-External-File-Access-fixed.t.sol:4:1:
  |
4 | import "../1.7.4-Unsafe-External-File-Access-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 4)
Failed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol:7:26:
  |
7 |     FixedContract public fixed;
  |                          ^^^^^

Error (6275): Source "1.7.3-Unsafe-External-Command-Execution-vulnerability.sol" not found: File not found.
 --> test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:4:1:
  |
4 | import "../1.7.3-Unsafe-External-Command-Execution-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "1.7.4-Unsafe-External-File-Access-fixed.sol" not found: File not found.
 --> test/1.7.4-Unsafe-External-File-Access-fixed.t.sol:4:1:
  |
4 | import "../1.7.4-Unsafe-External-File-Access-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "2.1-Improper-Exceptional-Events-Handling-fixed.sol" not found: File not found.
 --> test/2.1-Improper-Exceptional-Events-Handling-fixed.t.sol:4:1:
  |
4 | import "../2.1-Improper-Exceptional-Events-Handling-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 5)
Failed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol:7:26:
  |
7 |     FixedContract public fixed;
  |                          ^^^^^

Error (6275): Source "1.7.3-Unsafe-External-Command-Execution-vulnerability.sol" not found: File not found.
 --> test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:4:1:
  |
4 | import "../1.7.3-Unsafe-External-Command-Execution-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "1.7.4-Unsafe-External-File-Access-fixed.sol" not found: File not found.
 --> test/1.7.4-Unsafe-External-File-Access-fixed.t.sol:4:1:
  |
4 | import "../1.7.4-Unsafe-External-File-Access-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Failed after 5 attempts: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Test file not found, generating first: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol

===== Test run started: 2025-03-31 00:19:58.404789 =====

Test file not found, generating first: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol

Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol (attempt 1)
Failed: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
  --> test/1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol:11:19:
   |
11 |     FixedContract fixed;
   |                   ^^^^^

Error: Compilation failed
Regenerating: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol

Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol (attempt 2)
Passed: 1.7.1-Unsafe-External-Web-Service-Call-fixed.t.sol
Test file not found, generating first: 1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol

Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol (attempt 1)
Failed: 1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 340.57ms
Compiler run successful!

Ran 3 tests for test/1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol:VulnerableContractTest
[PASS] testChangingManipulatedValue() (gas: 72926)
Traces:
  [72926] VulnerableContractTest::testChangingManipulatedValue()
    ├─ [20442] MaliciousWebService::setManipulatedValue(1111)
    │   └─ ← [Stop] 
    ├─ [23824] VulnerableContract::updateValue()
    │   ├─ [1115] MaliciousWebService::getValue()
    │   │   └─ ← [Return] 1111
    │   └─ ← [Stop] 
    ├─ [1107] VulnerableContract::value() [staticcall]
    │   └─ ← [Return] 1111
    ├─ [0] VM::assertEq(1111, 1111, "vulnerable.value should be 1111 initially") [staticcall]
    │   └─ ← [Return] 
    ├─ [1242] MaliciousWebService::setManipulatedValue(2222)
    │   └─ ← [Stop] 
    ├─ [4624] VulnerableContract::updateValue()
    │   ├─ [1115] MaliciousWebService::getValue()
    │   │   └─ ← [Return] 2222
    │   └─ ← [Stop] 
    ├─ [1107] VulnerableContract::value() [staticcall]
    │   └─ ← [Return] 2222
    ├─ [0] VM::assertEq(2222, 2222, "vulnerable.value should be updated to 2222 after changing manipulated value") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testExploitManipulatedValue() (gas: 55719)
Traces:
  [55719] VulnerableContractTest::testExploitManipulatedValue()
    ├─ [20442] MaliciousWebService::setManipulatedValue(9999)
    │   └─ ← [Stop] 
    ├─ [23824] VulnerableContract::updateValue()
    │   ├─ [1115] MaliciousWebService::getValue()
    │   │   └─ ← [Return] 9999
    │   └─ ← [Stop] 
    ├─ [1107] VulnerableContract::value() [staticcall]
    │   └─ ← [Return] 9999
    ├─ [0] VM::assertEq(9999, 9999, "vulnerable.value should be 9999 after exploitation") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: call reverted as expected, but without data] testUpdateValueRevertWhenCallFails() (gas: 278011)
Traces:
  [410711] VulnerableContractTest::setUp()
    ├─ [74923] → new MaliciousWebService@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 374 bytes of code
    ├─ [1242] MaliciousWebService::setManipulatedValue(0)
    │   └─ ← [Stop] 
    ├─ [239486] → new VulnerableContract@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1090 bytes of code
    └─ ← [Stop] 

  [278011] VulnerableContractTest::testUpdateValueRevertWhenCallFails()
    ├─ [239486] → new VulnerableContract@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1090 bytes of code
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Call failed)
    │   └─ ← [Return] 
    ├─ [2433] VulnerableContract::updateValue()
    │   ├─ [0] 0x000000000000000000000000000000000000dEaD::getValue()
    │   │   └─ ← [Stop] 
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] call reverted as expected, but without data

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 2.64ms (2.42ms CPU time)

Ran 1 test suite in 577.06ms (2.64ms CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol:VulnerableContractTest
[FAIL: call reverted as expected, but without data] testUpdateValueRevertWhenCallFails() (gas: 278011)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol

Running forge test: 1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol (attempt 2)
Passed: 1.7.1-Unsafe-External-Web-Service-Call-vulnerability.t.sol
Test file not found, generating first: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol

Running forge test: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol (attempt 1)
Failed: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 338.80ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
  --> test/1.7.2-Unsafe-External-Library-Call-fixed.t.sol:53:9:
   |
53 |         MaliciousLibrary malicious = new MaliciousLibrary();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^


Ran 4 tests for test/1.7.2-Unsafe-External-Library-Call-fixed.t.sol:FixedContractTest
[PASS] testExecuteDoublesValue() (gas: 29950)
Traces:
  [29950] FixedContractTest::testExecuteDoublesValue()
    ├─ [20695] FixedContract::execute(7)
    │   └─ ← [Stop] 
    ├─ [1107] FixedContract::someValue() [staticcall]
    │   └─ ← [Return] 14
    ├─ [0] VM::assertEq(14, 14, "Expected value to be doubled by SafeLibrary.") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testMaliciousLibraryCannotExploit() (gas: 150785)
Traces:
  [150785] FixedContractTest::testMaliciousLibraryCannotExploit()
    ├─ [88735] → new MaliciousLibrary@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 443 bytes of code
    ├─ [20695] FixedContract::execute(3)
    │   └─ ← [Stop] 
    ├─ [1107] FixedContract::someValue() [staticcall]
    │   └─ ← [Return] 6
    ├─ [0] VM::assertEq(6, 6, "FixedContract should use the internal SafeLibrary, not the malicious one.") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testOwnerRemainsUnchanged() (gas: 30844)
Traces:
  [30844] FixedContractTest::testOwnerRemainsUnchanged()
    ├─ [20695] FixedContract::execute(5)
    │   └─ ← [Stop] 
    ├─ [1211] FixedContract::owner() [staticcall]
    │   └─ ← [Return] FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]
    ├─ [0] VM::assertEq(FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], "Owner should remain the deployer.") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: revert: Ether transfer failed] testReceiveEther() (gas: 11007)
Traces:
  [219654] FixedContractTest::setUp()
    ├─ [160449] → new FixedContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 697 bytes of code
    └─ ← [Stop] 

  [11007] FixedContractTest::testReceiveEther()
    ├─ [0] VM::deal(FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [62] FixedContract::fallback{value: 1000000000000000000}(0x20)
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] revert: Ether transfer failed

Suite result: FAILED. 3 passed; 1 failed; 0 skipped; finished in 1.22ms (1.09ms CPU time)

Ran 1 test suite in 552.47ms (1.22ms CPU time): 3 tests passed, 1 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.2-Unsafe-External-Library-Call-fixed.t.sol:FixedContractTest
[FAIL: revert: Ether transfer failed] testReceiveEther() (gas: 11007)

Encountered a total of 1 failing tests, 3 tests succeeded
Regenerating: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol

Running forge test: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol (attempt 2)
Passed: 1.7.2-Unsafe-External-Library-Call-fixed.t.sol
Test file not found, generating first: 1.7.2-Unsafe-External-Library-Call-vulnerability.t.sol

Running forge test: 1.7.2-Unsafe-External-Library-Call-vulnerability.t.sol (attempt 1)
Passed: 1.7.2-Unsafe-External-Library-Call-vulnerability.t.sol
Test file not found, generating first: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol (attempt 1)
Failed: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol
Error:
Compiler run failed:
Error (5172): Name has to refer to a struct, enum or contract.
   --> test/1.7.3-Unsafe-External-Command-Execution-fixed.t.sol:125:75:
    |
125 |     function CommandAllowedEvent(string memory command) internal returns (CommandAllowed memory) {
    |                                                                           ^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol (attempt 2)
Failed: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol
Error:
Compiler run failed:
Error (7858): Expected pragma, import directive or contract/interface/library/struct/enum/constant/function definition.
  --> test/1.7.3-Unsafe-External-Command-Execution-fixed.t.sol:11:1:
   |
11 | event CommandAllowed(string command);
   | ^^^^^

Error: Compilation failed
Regenerating: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol (attempt 3)
Passed: 1.7.3-Unsafe-External-Command-Execution-fixed.t.sol
Test file not found, generating first: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol (attempt 1)
Failed: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 352.05ms
Compiler run successful!

Ran 2 tests for test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeExternalCommandExecutionTest
[PASS] testInvalidCommandExecution() (gas: 32451)
Traces:
  [32451] UnsafeExternalCommandExecutionTest::testInvalidCommandExecution()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Command execution failed)
    │   └─ ← [Return] 
    ├─ [24501] UnsafeCommandExecutor::executeCommand(VulnerableTarget: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], "nonexistent")
    │   ├─ [104] VulnerableTarget::nonexistent()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Command execution failed
    └─ ← [Stop] 

[FAIL: Target contract was not selfdestructed: 132 != 0] testVulnerabilityExploit() (gas: 56266)
Traces:
  [840640] UnsafeExternalCommandExecutionTest::setUp()
    ├─ [26481] → new VulnerableTarget@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [386224] → new UnsafeCommandExecutor@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1929 bytes of code
    ├─ [281196] → new Attack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1193 bytes of code
    └─ ← [Stop] 

  [56266] UnsafeExternalCommandExecutionTest::testVulnerabilityExploit()
    ├─ [0] VM::assertGt(132, 0, "Target contract should exist before attack") [staticcall]
    │   └─ ← [Return] 
    ├─ [34143] Attack::attack()
    │   ├─ [29741] UnsafeCommandExecutor::executeCommand(VulnerableTarget: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], "pwn")
    │   │   ├─ [5121] VulnerableTarget::pwn()
    │   │   │   └─ ← [SelfDestruct] 
    │   │   └─ ← [Return] 0x
    │   └─ ← [Stop] 
    ├─ [3533] UnsafeCommandExecutor::lastExecutedCommand() [staticcall]
    │   └─ ← [Return] "pwn"
    ├─ [0] VM::assertEq("pwn", "pwn", "Executor did not record the correct command") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(132, 0, "Target contract was not selfdestructed") [staticcall]
    │   └─ ← [Revert] Target contract was not selfdestructed: 132 != 0
    └─ ← [Revert] Target contract was not selfdestructed: 132 != 0

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 714.57µs (316.06µs CPU time)

Ran 1 test suite in 720.00ms (714.57µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeExternalCommandExecutionTest
[FAIL: Target contract was not selfdestructed: 132 != 0] testVulnerabilityExploit() (gas: 56266)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol (attempt 2)
Failed: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 344.31ms
Compiler run successful!

Ran 1 test for test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeExternalCommandExecutionTest
[FAIL: EvmError: Revert] setUp() (gas: 0)
Traces:
  [849079] UnsafeExternalCommandExecutionTest::setUp()
    ├─ [26481] → new VulnerableTarget@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [386224] → new UnsafeCommandExecutor@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1929 bytes of code
    ├─ [281196] → new Attack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1193 bytes of code
    ├─ [45] VulnerableTarget::fallback{value: 1000000000000000000}()
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 297.23µs (0.00ns CPU time)

Ran 1 test suite in 531.90ms (297.23µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeExternalCommandExecutionTest
[FAIL: EvmError: Revert] setUp() (gas: 0)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol (attempt 3)
Failed: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 346.77ms
Compiler run successful!

Ran 1 test for test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeExternalCommandExecutionTest
[FAIL: assertion failed: 132 != 0] testExploit() (gas: 48556)
Traces:
  [880433] UnsafeExternalCommandExecutionTest::setUp()
    ├─ [26481] → new VulnerableTarget@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [387424] → new UnsafeCommandExecutor@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1935 bytes of code
    ├─ [281196] → new Attack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1193 bytes of code
    ├─ [5375] → new <unknown>@0x5991A2dF15A8F6A256D3Ec51E99254Cd3fb576A9
    │   └─ ← [Return] 0 bytes of code
    └─ ← [Stop] 

  [48556] UnsafeExternalCommandExecutionTest::testExploit()
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertGt(132, 0) [staticcall]
    │   └─ ← [Return] 
    ├─ [34156] Attack::attack()
    │   ├─ [29754] UnsafeCommandExecutor::executeCommand(VulnerableTarget: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], "pwn")
    │   │   ├─ [5121] VulnerableTarget::pwn()
    │   │   │   └─ ← [SelfDestruct] 
    │   │   └─ ← [Return] 0x
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(132, 0) [staticcall]
    │   └─ ← [Revert] assertion failed: 132 != 0
    └─ ← [Revert] assertion failed: 132 != 0

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 1.99ms (1.72ms CPU time)

Ran 1 test suite in 556.15ms (1.99ms CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeExternalCommandExecutionTest
[FAIL: assertion failed: 132 != 0] testExploit() (gas: 48556)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol (attempt 4)
Failed: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 342.69ms
Compiler run successful!

Ran 1 test for test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeExternalCommandExecutionTest
[FAIL: VulnerableTarget should not be callable after selfdestruct] testExploit() (gas: 56123)
Traces:
  [843409] UnsafeExternalCommandExecutionTest::setUp()
    ├─ [26481] → new VulnerableTarget@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [0] VM::deal(VulnerableTarget: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [386224] → new UnsafeCommandExecutor@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1929 bytes of code
    ├─ [281196] → new Attack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1193 bytes of code
    └─ ← [Stop] 

  [56123] UnsafeExternalCommandExecutionTest::testExploit()
    ├─ [34143] Attack::attack()
    │   ├─ [29741] UnsafeCommandExecutor::executeCommand(VulnerableTarget: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], "pwn")
    │   │   ├─ [5121] VulnerableTarget::pwn()
    │   │   │   └─ ← [SelfDestruct] 
    │   │   └─ ← [Return] 0x
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(0, 0, "Target's balance should be drained") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Executor should receive the funds from selfdestruct") [staticcall]
    │   └─ ← [Return] 
    ├─ [5121] VulnerableTarget::pwn()
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::assertFalse(true, "VulnerableTarget should not be callable after selfdestruct") [staticcall]
    │   └─ ← [Revert] VulnerableTarget should not be callable after selfdestruct
    └─ ← [Revert] VulnerableTarget should not be callable after selfdestruct

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 2.45ms (2.16ms CPU time)

Ran 1 test suite in 550.47ms (2.45ms CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeExternalCommandExecutionTest
[FAIL: VulnerableTarget should not be callable after selfdestruct] testExploit() (gas: 56123)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol

Running forge test: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol (attempt 5)
Failed: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 339.27ms
Compiler run successful!

Ran 1 test for test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeExternalCommandExecutionTest
[FAIL: VulnerableTarget should not be callable after selfdestruct: 132 != 0] testExploit() (gas: 51279)
Traces:
  [843409] UnsafeExternalCommandExecutionTest::setUp()
    ├─ [26481] → new VulnerableTarget@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [0] VM::deal(VulnerableTarget: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [386224] → new UnsafeCommandExecutor@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1929 bytes of code
    ├─ [281196] → new Attack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1193 bytes of code
    └─ ← [Stop] 

  [51279] UnsafeExternalCommandExecutionTest::testExploit()
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "VulnerableTarget should have 1 ether before attack") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::startPrank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [34143] Attack::attack()
    │   ├─ [29741] UnsafeCommandExecutor::executeCommand(VulnerableTarget: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], "pwn")
    │   │   ├─ [5121] VulnerableTarget::pwn()
    │   │   │   └─ ← [SelfDestruct] 
    │   │   └─ ← [Return] 0x
    │   └─ ← [Stop] 
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(132, 0, "VulnerableTarget should not be callable after selfdestruct") [staticcall]
    │   └─ ← [Revert] VulnerableTarget should not be callable after selfdestruct: 132 != 0
    └─ ← [Revert] VulnerableTarget should not be callable after selfdestruct: 132 != 0

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 2.63ms (2.31ms CPU time)

Ran 1 test suite in 503.72ms (2.63ms CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol:UnsafeExternalCommandExecutionTest
[FAIL: VulnerableTarget should not be callable after selfdestruct: 132 != 0] testExploit() (gas: 51279)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Failed after 5 attempts: 1.7.3-Unsafe-External-Command-Execution-vulnerability.t.sol
Test file not found, generating first: 1.7.4-Unsafe-External-File-Access-fixed.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-fixed.t.sol (attempt 1)
Passed: 1.7.4-Unsafe-External-File-Access-fixed.t.sol
Test file not found, generating first: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol

Running forge test: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol (attempt 1)
Passed: 1.7.4-Unsafe-External-File-Access-vulnerability.t.sol
Test file not found, generating first: 1.8-Cross-Channel-Invocation-fixed.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-fixed.t.sol (attempt 1)
Passed: 1.8-Cross-Channel-Invocation-fixed.t.sol
Test file not found, generating first: 1.8-Cross-Channel-Invocation-vulnerability.t.sol

Running forge test: 1.8-Cross-Channel-Invocation-vulnerability.t.sol (attempt 1)
Passed: 1.8-Cross-Channel-Invocation-vulnerability.t.sol
Test file not found, generating first: 2-Mishandled-Events-fixed.t.sol

Running forge test: 2-Mishandled-Events-fixed.t.sol (attempt 1)
Failed: 2-Mishandled-Events-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
  --> test/2-Mishandled-Events-fixed.t.sol:15:26:
   |
15 |     FixedContract public fixed;
   |                          ^^^^^

Error: Compilation failed
Regenerating: 2-Mishandled-Events-fixed.t.sol

Running forge test: 2-Mishandled-Events-fixed.t.sol (attempt 2)
Failed: 2-Mishandled-Events-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "2-Mishandled-Events-fixed.sol" not found: File not found.
 --> test/2-Mishandled-Events-fixed.t.sol:7:1:
  |
7 | import "../2-Mishandled-Events-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2-Mishandled-Events-fixed.t.sol

Running forge test: 2-Mishandled-Events-fixed.t.sol (attempt 3)
Failed: 2-Mishandled-Events-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "2-Mishandled-Events-fixed.sol" not found: File not found.
 --> test/2-Mishandled-Events-fixed.t.sol:4:1:
  |
4 | import "../2-Mishandled-Events-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2-Mishandled-Events-fixed.t.sol

Running forge test: 2-Mishandled-Events-fixed.t.sol (attempt 4)
Failed: 2-Mishandled-Events-fixed.t.sol
Error:
Compiler run failed:
Error (9582): Member "Deposit" not found or not visible after argument-dependent lookup in type(contract FixedContract).
  --> test/2-Mishandled-Events-fixed.t.sol:85:14:
   |
85 |         emit FixedContract.Deposit(attacker, 2 ether);
   |              ^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2-Mishandled-Events-fixed.t.sol

Running forge test: 2-Mishandled-Events-fixed.t.sol (attempt 5)
Failed: 2-Mishandled-Events-fixed.t.sol
Error:
Compiler run failed:
Error (7858): Expected pragma, import directive or contract/interface/library/struct/enum/constant/function definition.
 --> test/2-Mishandled-Events-fixed.t.sol:8:1:
  |
8 | event Deposit(address indexed sender, uint256 amount);
  | ^^^^^

Error: Compilation failed
Regenerating: 2-Mishandled-Events-fixed.t.sol
Failed after 5 attempts: 2-Mishandled-Events-fixed.t.sol
Test file not found, generating first: 2-Mishandled-Events-vulnerability.t.sol

Running forge test: 2-Mishandled-Events-vulnerability.t.sol (attempt 1)
Failed: 2-Mishandled-Events-vulnerability.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/2-Mishandled-Events-fixed.t.sol:7:26:
  |
7 |     FixedContract public fixed;
  |                          ^^^^^

Error: Compilation failed
Regenerating: 2-Mishandled-Events-vulnerability.t.sol

Running forge test: 2-Mishandled-Events-vulnerability.t.sol (attempt 2)
Failed: 2-Mishandled-Events-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "2-Mishandled-Events-vulnerability.sol" not found: File not found.
 --> test/2-Mishandled-Events-vulnerability.t.sol:7:1:
  |
7 | import "../2-Mishandled-Events-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2-Mishandled-Events-vulnerability.t.sol

Running forge test: 2-Mishandled-Events-vulnerability.t.sol (attempt 3)
Failed: 2-Mishandled-Events-vulnerability.t.sol
Error:
Compiler run failed:
Error (2314): Expected ';' but got '('
 --> test/2-Mishandled-Events-vulnerability.t.sol:7:12:
  |
7 | error Panic(uint256);
  |            ^

Error: Compilation failed
Regenerating: 2-Mishandled-Events-vulnerability.t.sol

Running forge test: 2-Mishandled-Events-vulnerability.t.sol (attempt 4)
Passed: 2-Mishandled-Events-vulnerability.t.sol
Test file not found, generating first: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol (attempt 1)
Passed: 2.1-Improper-Exceptional-Events-Handling-fixed.t.sol
Test file not found, generating first: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol (attempt 1)
Failed: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol
Error:
Compiler run failed:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol:27:1:
   |
27 | contract AttackContract {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol:35:5:
   |
35 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Error (7398): Explicit type conversion not allowed from non-payable "address" to "contract AttackContract", which has a payable fallback function.
  --> test/2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol:92:9:
   |
92 |         AttackContract(address(attackContract)).attack{value: depositAmount}();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol

Running forge test: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol (attempt 2)
Passed: 2.1-Improper-Exceptional-Events-Handling-vulnerability.t.sol
Test file not found, generating first: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol

Running forge test: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol (attempt 1)
Failed: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol:53:11:
   |
53 |     Fixed fixed;
   |           ^^^^^

Error: Compilation failed
Regenerating: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol

Running forge test: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol (attempt 2)
Failed: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol
Error:
Compiler run failed:
Error (6138): Wrong argument count for function call: 0 arguments given but expected 1. This function requires a single bytes argument. Use "" as argument to provide empty calldata.
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol:21:28:
   |
21 |         (bool success, ) = payable(msg.sender).call{value: amount}();
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol

Running forge test: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol (attempt 3)
Failed: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 360.60ms
Compiler run successful!

Ran 2 tests for test/2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol:FixedTest
[FAIL: next call did not revert as expected] testAttackReverts() (gas: 337055)
Traces:
  [336066] FixedTest::setUp()
    ├─ [292131] → new Fixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1459 bytes of code
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(SHA-256: [0x0000000000000000000000000000000000000002], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [337055] FixedTest::testAttackReverts()
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [222268] → new AttackerFixed@0xE536720791A7DaDBeBdBCD8c8546fb0791a11901
    │   └─ ← [Return] 1004 bytes of code
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Transfer failed.)
    │   └─ ← [Return] 
    ├─ [43977] AttackerFixed::attack{value: 1000000000000000000}()
    │   ├─ [21251] Fixed::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [10962] Fixed::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [55] AttackerFixed::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    └─ ← [Revert] next call did not revert as expected

[PASS] testRegularWithdraw() (gas: 54129)
Traces:
  [73329] FixedTest::testRegularWithdraw()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [21251] Fixed::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1492] Fixed::balances(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Deposit balance not recorded correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [13907] Fixed::withdraw(1000000000000000000 [1e18])
    │   ├─ [3000] ECRecover::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Return] 
    │   └─ ← [Stop] 
    ├─ [1492] Fixed::balances(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "User balance should be zero after withdrawal") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000000 [1e19], 10000000000000000000 [1e19], "User did not receive withdrawn ether") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 2.94ms (2.56ms CPU time)

Ran 1 test suite in 499.84ms (2.94ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol:FixedTest
[FAIL: next call did not revert as expected] testAttackReverts() (gas: 337055)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol

Running forge test: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol (attempt 4)
Failed: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol:52:11:
   |
52 |     Fixed fixed;
   |           ^^^^^

Error: Compilation failed
Regenerating: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol

Running forge test: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol (attempt 5)
Failed: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol:55:11:
   |
55 |     Fixed fixed;
   |           ^^^^^

Error: Compilation failed
Regenerating: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol
Failed after 5 attempts: 2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol
Test file not found, generating first: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol

Running forge test: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol (attempt 1)
Failed: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.sol" not found: File not found.
 --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol:9:1:
  |
9 | import "../2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol

Running forge test: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol (attempt 2)
Failed: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.sol" not found: File not found.
 --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.t.sol:9:1:
  |
9 | import "../2.1.1-Improper-Use-of-Exception-Handling-Functions-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.sol" not found: File not found.
 --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:5:1:
  |
5 | import "../2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol

Running forge test: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol (attempt 3)
Failed: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 345.66ms
Compiler run successful!

Ran 2 tests for test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:VulnerableTest
[FAIL: next call did not revert as expected] testAttackWithdrawRevert() (gas: 584158)
Traces:
  [584158] VulnerableTest::testAttackWithdrawRevert()
    ├─ [240881] → new Vulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1203 bytes of code
    ├─ [222268] → new Attacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1004 bytes of code
    ├─ [0] VM::deal(Attacker: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Fallback triggered revert)
    │   └─ ← [Return] 
    ├─ [43798] Attacker::attack{value: 1000000000000000000}()
    │   ├─ [21251] Vulnerable::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [10783] Vulnerable::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [55] Attacker::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    └─ ← [Revert] next call did not revert as expected

[PASS] testNormalWithdraw() (gas: 308106)
Traces:
  [327306] VulnerableTest::testNormalWithdraw()
    ├─ [240881] → new Vulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1203 bytes of code
    ├─ [21251] Vulnerable::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1492] Vulnerable::balances(VulnerableTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Balance should be 1 ether after deposit") [staticcall]
    │   └─ ← [Return] 
    ├─ [10783] Vulnerable::withdraw(1000000000000000000 [1e18])
    │   ├─ [55] VulnerableTest::receive{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1492] Vulnerable::balances(VulnerableTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "Balance should be 0 after withdrawal") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 541.18µs (358.44µs CPU time)

Ran 1 test suite in 493.33ms (541.18µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:VulnerableTest
[FAIL: next call did not revert as expected] testAttackWithdrawRevert() (gas: 584158)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol

Running forge test: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol (attempt 4)
Failed: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 351.24ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:61:1:
   |
61 | contract RevertingAttacker {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:69:5:
   |
69 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2072): Unused local variable.
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:97:9:
   |
97 |         uint256 balanceBefore = address(this).balance;
   |         ^^^^^^^^^^^^^^^^^^^^^


Ran 2 tests for test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:VulnerableTest
[FAIL: Attacker's balance should remain after failed withdrawal: 0 != 1000000000000000000] testAttackWithdrawRevert() (gas: 317837)
Traces:
  [287930] VulnerableTest::setUp()
    ├─ [240881] → new Vulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1203 bytes of code
    ├─ [55] Vulnerable::receive{value: 10000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [317837] VulnerableTest::testAttackWithdrawRevert()
    ├─ [221068] → new RevertingAttacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 998 bytes of code
    ├─ [0] VM::deal(RevertingAttacker: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Fallback triggered revert)
    │   └─ ← [Return] 
    ├─ [44081] RevertingAttacker::attack{value: 1000000000000000000}()
    │   ├─ [21251] Vulnerable::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [11056] Vulnerable::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [311] RevertingAttacker::fallback{value: 1000000000000000000}()
    │   │   │   └─ ← [Revert] revert: Fallback triggered revert
    │   │   └─ ← [Revert] revert: Fallback triggered revert
    │   └─ ← [Revert] revert: Fallback triggered revert
    ├─ [1492] Vulnerable::balances(RevertingAttacker: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 1000000000000000000 [1e18], "Attacker's balance should remain after failed withdrawal") [staticcall]
    │   └─ ← [Revert] Attacker's balance should remain after failed withdrawal: 0 != 1000000000000000000
    └─ ← [Revert] Attacker's balance should remain after failed withdrawal: 0 != 1000000000000000000

[PASS] testNormalWithdraw() (gas: 31663)
Traces:
  [50863] VulnerableTest::testNormalWithdraw()
    ├─ [21251] Vulnerable::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [10783] Vulnerable::withdraw(1000000000000000000 [1e18])
    │   ├─ [55] VulnerableTest::receive{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1492] Vulnerable::balances(VulnerableTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "Balance should be 0 after withdrawal") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 594.04µs (303.35µs CPU time)

Ran 1 test suite in 507.33ms (594.04µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:VulnerableTest
[FAIL: Attacker's balance should remain after failed withdrawal: 0 != 1000000000000000000] testAttackWithdrawRevert() (gas: 317837)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol

Running forge test: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol (attempt 5)
Failed: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol
Error:
Compiler run failed:
Error (9456): Overriding function is missing "override" specifier.
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:59:5:
   |
59 |     receive() external payable {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: Overridden function is here:
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:51:5:
   |
51 |     receive() external payable {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (4334): Trying to override non-virtual function. Did you forget to add "virtual"?
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:51:5:
   |
51 |     receive() external payable {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: Overriding function is here:
  --> test/2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol:59:5:
   |
59 |     receive() external payable {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol
Failed after 5 attempts: 2.1.1-Improper-Use-of-Exception-Handling-Functions-vulnerability.t.sol
Test file not found, generating first: 2.1.2-Improper-Exception-Handling-in-a-Loop-fixed.t.sol

Running forge test: 2.1.2-Improper-Exception-Handling-in-a-Loop-fixed.t.sol (attempt 1)
Passed: 2.1.2-Improper-Exception-Handling-in-a-Loop-fixed.t.sol
Test file not found, generating first: 2.1.2-Improper-Exception-Handling-in-a-Loop-vulnerability.t.sol

Running forge test: 2.1.2-Improper-Exception-Handling-in-a-Loop-vulnerability.t.sol (attempt 1)
Passed: 2.1.2-Improper-Exception-Handling-in-a-Loop-vulnerability.t.sol
Test file not found, generating first: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol

Running forge test: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol (attempt 1)
Failed: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 345.72ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:45:1:
   |
45 | contract AttackFixed {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:53:5:
   |
53 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 2 tests for test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:NaiveBankFixedTest
[PASS] testSetTransferRevertsOnSendFailure() (gas: 265980)
Traces:
  [265980] NaiveBankFixedTest::testSetTransferRevertsOnSendFailure()
    ├─ [0] VM::deal(NaiveBankFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [144194] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 614 bytes of code
    ├─ [27256] NaiveBankFixed::addWinner(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  "Send failed, reverting transaction)
    │   └─ ← [Return] 
    ├─ [33490] NaiveBankFixed::setTransfer()
    │   ├─ [45] NaiveBankFixedTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Send failed, reverting transaction
    ├─ [1589] NaiveBankFixed::processed(NaiveBankFixedTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] false
    ├─ [1589] NaiveBankFixed::processed(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false, "Deployer should not be marked processed due to revert") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertFalse(false, "Attack contract should not be marked processed due to revert") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Bank balance should remain unchanged after revert") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: revert: Send failed, reverting transaction] testSetTransferSuccessNoAttack() (gas: 119460)
Traces:
  [458761] NaiveBankFixedTest::setUp()
    ├─ [420177] → new NaiveBankFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1790 bytes of code
    └─ ← [Stop] 

  [119460] NaiveBankFixedTest::testSetTransferSuccessNoAttack()
    ├─ [13869] → new DummyWinner@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 69 bytes of code
    ├─ [27256] NaiveBankFixed::addWinner(DummyWinner: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Stop] 
    ├─ [1107] NaiveBankFixed::reward() [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::deal(NaiveBankFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [33490] NaiveBankFixed::setTransfer()
    │   ├─ [45] NaiveBankFixedTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Send failed, reverting transaction
    └─ ← [Revert] revert: Send failed, reverting transaction

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 674.05µs (354.69µs CPU time)

Ran 1 test suite in 512.88ms (674.05µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:NaiveBankFixedTest
[FAIL: revert: Send failed, reverting transaction] testSetTransferSuccessNoAttack() (gas: 119460)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol

Running forge test: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol (attempt 2)
Failed: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 366.11ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:57:1:
   |
57 | contract AttackFixed {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:65:5:
   |
65 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 2 tests for test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:NaiveBankFixedTest
[PASS] testSetTransferRevertsOnSendFailure() (gas: 285571)
Traces:
  [285571] NaiveBankFixedTest::testSetTransferRevertsOnSendFailure()
    ├─ [144194] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 614 bytes of code
    ├─ [27256] NaiveBankFixed::addWinner(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  "Send failed, reverting transaction)
    │   └─ ← [Return] 
    ├─ [33490] NaiveBankFixed::setTransfer()
    │   ├─ [45] NaiveBankFixedTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Send failed, reverting transaction
    ├─ [1589] NaiveBankFixed::processed(NaiveBankFixedTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] false
    ├─ [1589] NaiveBankFixed::processed(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertTrue(true, "Deployer should not be marked processed after revert") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertTrue(true, "Attack contract should not be marked processed after revert") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Bank balance should remain unchanged after revert") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: revert: Send failed, reverting transaction] testSetTransferSuccessNoAttack() (gas: 133665)
Traces:
  [461530] NaiveBankFixedTest::setUp()
    ├─ [420177] → new NaiveBankFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1790 bytes of code
    ├─ [0] VM::deal(NaiveBankFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [133665] NaiveBankFixedTest::testSetTransferSuccessNoAttack()
    ├─ [13869] → new DummyWinner@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 69 bytes of code
    ├─ [27256] NaiveBankFixed::addWinner(DummyWinner: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Stop] 
    ├─ [33490] NaiveBankFixed::setTransfer()
    │   ├─ [45] NaiveBankFixedTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Send failed, reverting transaction
    └─ ← [Revert] revert: Send failed, reverting transaction

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 976.02µs (426.68µs CPU time)

Ran 1 test suite in 496.44ms (976.02µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:NaiveBankFixedTest
[FAIL: revert: Send failed, reverting transaction] testSetTransferSuccessNoAttack() (gas: 133665)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol

Running forge test: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol (attempt 3)
Failed: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.sol" not found: File not found.
 --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:5:1:
  |
5 | import "../2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol

Running forge test: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol (attempt 4)
Failed: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 350.81ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:42:1:
   |
42 | contract AttackFixed {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:50:5:
   |
50 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2072): Unused local variable.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:85:9:
   |
85 |         uint testerInitialBalance = address(this).balance;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^


Ran 2 tests for test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:NaiveBankFixedTest
[FAIL: revert: Send failed, reverting transaction] testSuccessfulTransferNoAttack() (gas: 68448)
Traces:
  [464227] NaiveBankFixedTest::setUp()
    ├─ [420177] → new NaiveBankFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1790 bytes of code
    ├─ [0] VM::deal(NaiveBankFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000cafE, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [68448] NaiveBankFixedTest::testSuccessfulTransferNoAttack()
    ├─ [27256] NaiveBankFixed::addWinner(0x000000000000000000000000000000000000cafE)
    │   └─ ← [Stop] 
    ├─ [33490] NaiveBankFixed::setTransfer()
    │   ├─ [45] NaiveBankFixedTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Send failed, reverting transaction
    └─ ← [Revert] revert: Send failed, reverting transaction

[PASS] testTransferRevertsOnAttack() (gas: 287603)
Traces:
  [287603] NaiveBankFixedTest::testTransferRevertsOnAttack()
    ├─ [144194] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 614 bytes of code
    ├─ [27256] NaiveBankFixed::addWinner(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  "Send failed, reverting transaction)
    │   └─ ← [Return] 
    ├─ [33490] NaiveBankFixed::setTransfer()
    │   ├─ [45] NaiveBankFixedTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Send failed, reverting transaction
    ├─ [1589] NaiveBankFixed::processed(NaiveBankFixedTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] false
    ├─ [1589] NaiveBankFixed::processed(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertTrue(true, "Test contract should not be marked as processed due to revert") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertTrue(true, "Attack contract should not be marked as processed due to revert") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000000 [1e19], 10000000000000000000 [1e19], "Bank balance should remain unchanged after revert") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 770.96µs (322.92µs CPU time)

Ran 1 test suite in 509.78ms (770.96µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol:NaiveBankFixedTest
[FAIL: revert: Send failed, reverting transaction] testSuccessfulTransferNoAttack() (gas: 68448)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol

Running forge test: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol (attempt 5)
Passed: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-fixed.t.sol
Test file not found, generating first: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol

Running forge test: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol (attempt 1)
Failed: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 358.69ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol:28:1:
   |
28 | contract Attack {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol:35:5:
   |
35 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 2 tests for test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol:NaiveBankVulnerableTest
[PASS] testSetTransferRevertsWithAttacker() (gas: 347703)
Traces:
  [347703] NaiveBankVulnerableTest::testSetTransferRevertsWithAttacker()
    ├─ [0] VM::deal(NaiveBankVulnerable: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [13869] → new DummyReceiver@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 69 bytes of code
    ├─ [27256] NaiveBankVulnerable::addWinner(DummyReceiver: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Stop] 
    ├─ [144194] → new Attack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 614 bytes of code
    ├─ [23056] NaiveBankVulnerable::addWinner(Attack: [0xF62849F9A0B5Bf2913b396098F7c7019b51A820a])
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  )Send failed, reverting entire transaction)
    │   └─ ← [Return] 
    ├─ [11313] NaiveBankVulnerable::setTransfer()
    │   ├─ [45] NaiveBankVulnerableTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Send failed, reverting entire transaction
    ├─ [0] VM::assertEq(5000000000000000000 [5e18], 5000000000000000000 [5e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: revert: Send failed, reverting entire transaction] testSetTransferSuccessWithoutAttack() (gas: 114246)
Traces:
  [402833] NaiveBankVulnerableTest::setUp()
    ├─ [364327] → new NaiveBankVulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1511 bytes of code
    └─ ← [Stop] 

  [114246] NaiveBankVulnerableTest::testSetTransferSuccessWithoutAttack()
    ├─ [0] VM::deal(NaiveBankVulnerable: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [13869] → new DummyReceiver@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 69 bytes of code
    ├─ [27256] NaiveBankVulnerable::addWinner(DummyReceiver: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Stop] 
    ├─ [11313] NaiveBankVulnerable::setTransfer()
    │   ├─ [45] NaiveBankVulnerableTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Send failed, reverting entire transaction
    └─ ← [Revert] revert: Send failed, reverting entire transaction

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 542.77µs (275.73µs CPU time)

Ran 1 test suite in 495.61ms (542.77µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol:NaiveBankVulnerableTest
[FAIL: revert: Send failed, reverting entire transaction] testSetTransferSuccessWithoutAttack() (gas: 114246)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol

Running forge test: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol (attempt 2)
Failed: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 339.87ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol:30:1:
   |
30 | contract Attack {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol:38:5:
   |
38 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 2 tests for test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol:NaiveBankVulnerableTest
[PASS] testSetTransferRevertsWithAttacker() (gas: 344735)
Traces:
  [344735] NaiveBankVulnerableTest::testSetTransferRevertsWithAttacker()
    ├─ [38087] → new DummyReceiverAccepting@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 190 bytes of code
    ├─ [27256] NaiveBankVulnerable::addWinner(DummyReceiverAccepting: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Stop] 
    ├─ [144194] → new Attack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 614 bytes of code
    ├─ [23056] NaiveBankVulnerable::addWinner(Attack: [0xF62849F9A0B5Bf2913b396098F7c7019b51A820a])
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  )Send failed, reverting entire transaction)
    │   └─ ← [Return] 
    ├─ [11313] NaiveBankVulnerable::setTransfer()
    │   ├─ [45] NaiveBankVulnerableTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Send failed, reverting entire transaction
    ├─ [0] VM::assertEq(5000000000000000000 [5e18], 5000000000000000000 [5e18], "Bank balance should remain unchanged after revert") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: revert: Send failed, reverting entire transaction] testSetTransferSuccessWithoutAttack() (gas: 137298)
Traces:
  [405602] NaiveBankVulnerableTest::setUp()
    ├─ [364327] → new NaiveBankVulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1511 bytes of code
    ├─ [0] VM::deal(NaiveBankVulnerable: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [137298] NaiveBankVulnerableTest::testSetTransferSuccessWithoutAttack()
    ├─ [38087] → new DummyReceiverAccepting@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 190 bytes of code
    ├─ [27256] NaiveBankVulnerable::addWinner(DummyReceiverAccepting: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Stop] 
    ├─ [11313] NaiveBankVulnerable::setTransfer()
    │   ├─ [45] NaiveBankVulnerableTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Send failed, reverting entire transaction
    └─ ← [Revert] revert: Send failed, reverting entire transaction

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 461.48µs (178.48µs CPU time)

Ran 1 test suite in 532.11ms (461.48µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol:NaiveBankVulnerableTest
[FAIL: revert: Send failed, reverting entire transaction] testSetTransferSuccessWithoutAttack() (gas: 137298)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol

Running forge test: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol (attempt 3)
Passed: 2.1.3-Incorrect-Revert-Implementation-in-a-Loop-vulnerability.t.sol
Test file not found, generating first: 2.2-Improper-Token-Exception-Handling-fixed.t.sol

Running forge test: 2.2-Improper-Token-Exception-Handling-fixed.t.sol (attempt 1)
Failed: 2.2-Improper-Token-Exception-Handling-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 347.46ms
Compiler run successful with warnings:
Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/2.2-Improper-Token-Exception-Handling-fixed.t.sol:29:24:
   |
29 |     function balanceOf(address account) external pure override returns (uint256) {
   |                        ^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
  --> test/2.2-Improper-Token-Exception-Handling-fixed.t.sol:93:9:
   |
93 |         bool success = goodToken.transfer(address(this), amount);
   |         ^^^^^^^^^^^^


Ran 2 tests for test/2.2-Improper-Token-Exception-Handling-fixed.t.sol:FixedTokenHandlerTest
[PASS] testWithdrawRevertsWithMaliciousToken() (gas: 261559)
Traces:
  [261559] FixedTokenHandlerTest::testWithdrawRevertsWithMaliciousToken()
    ├─ [212855] → new FixedTokenHandler@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 957 bytes of code
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  transfer failed)
    │   └─ ← [Return] 
    ├─ [4459] FixedTokenHandler::withdraw(100)
    │   ├─ [822] MaliciousToken::transfer(FixedTokenHandlerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 100)
    │   │   └─ ← [Return] false
    │   └─ ← [Revert] revert: transfer failed
    └─ ← [Stop] 

[FAIL: revert: insufficient balance] testWithdrawSucceedsWithGoodToken() (gas: 593569)
Traces:
  [505404] FixedTokenHandlerTest::setUp()
    ├─ [114959] → new MaliciousToken@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 574 bytes of code
    ├─ [284009] → new GoodToken@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1318 bytes of code
    └─ ← [Stop] 

  [593569] FixedTokenHandlerTest::testWithdrawSucceedsWithGoodToken()
    ├─ [9782] GoodToken::transfer(FixedTokenHandlerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 100)
    │   └─ ← [Return] true
    ├─ [0] VM::addr(<pk>) [staticcall]
    │   └─ ← [Return] 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf
    ├─ [0] VM::prank(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf)
    │   └─ ← [Return] 
    ├─ [284009] → new GoodToken@0xF2E246BB76DF876Cef8b38ae84130F4F55De395b
    │   └─ ← [Return] 1318 bytes of code
    ├─ [212855] → new FixedTokenHandler@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 957 bytes of code
    ├─ [0] VM::prank(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf)
    │   └─ ← [Return] 
    ├─ [4900] FixedTokenHandler::withdraw(100)
    │   ├─ [1824] GoodToken::transfer(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf, 100)
    │   │   └─ ← [Revert] revert: insufficient balance
    │   └─ ← [Revert] revert: insufficient balance
    └─ ← [Revert] revert: insufficient balance

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 730.74µs (435.29µs CPU time)

Ran 1 test suite in 521.44ms (730.74µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/2.2-Improper-Token-Exception-Handling-fixed.t.sol:FixedTokenHandlerTest
[FAIL: revert: insufficient balance] testWithdrawSucceedsWithGoodToken() (gas: 593569)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 2.2-Improper-Token-Exception-Handling-fixed.t.sol

Running forge test: 2.2-Improper-Token-Exception-Handling-fixed.t.sol (attempt 2)
Passed: 2.2-Improper-Token-Exception-Handling-fixed.t.sol
Test file not found, generating first: 2.2-Improper-Token-Exception-Handling-vulnerability.t.sol

Running forge test: 2.2-Improper-Token-Exception-Handling-vulnerability.t.sol (attempt 1)
Passed: 2.2-Improper-Token-Exception-Handling-vulnerability.t.sol
Test file not found, generating first: 2.2.1-Missing-Thrown-Exception-fixed.t.sol

Running forge test: 2.2.1-Missing-Thrown-Exception-fixed.t.sol (attempt 1)
Passed: 2.2.1-Missing-Thrown-Exception-fixed.t.sol
Test file not found, generating first: 2.2.1-Missing-Thrown-Exception-vulnerability.t.sol

Running forge test: 2.2.1-Missing-Thrown-Exception-vulnerability.t.sol (attempt 1)
Passed: 2.2.1-Missing-Thrown-Exception-vulnerability.t.sol
Test file not found, generating first: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol

Running forge test: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol (attempt 1)
Failed: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 364.56ms
Compiler run successful!

Ran 3 tests for test/2.2.2-Extraneous-Exception-Handling-fixed.t.sol:ExtraneousExceptionHandlingTest
[FAIL: revert: Insufficient balance] testAttackContractAllows25Transfer() (gas: 243924)
Traces:
  [343337] ExtraneousExceptionHandlingTest::setUp()
    ├─ [284009] → new FixedToken@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1318 bytes of code
    └─ ← [Stop] 

  [243924] ExtraneousExceptionHandlingTest::testAttackContractAllows25Transfer()
    ├─ [28938] FixedToken::transferFrom(0x000000000000000000000000000000000000bEEF, 50)
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true, "Initial funding transfer should succeed") [staticcall]
    │   └─ ← [Return] 
    ├─ [1563] FixedToken::getBalance(0x000000000000000000000000000000000000bEEF) [staticcall]
    │   └─ ← [Return] 50
    ├─ [0] VM::assertEq(50, 50, "Attacker should have 50 wei initially") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [159406] → new FixedAttackContract@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 690 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [4633] FixedAttackContract::attack()
    │   ├─ [1780] FixedToken::transferFrom(0x000000000000000000000000000000000000bEEF, 25)
    │   │   └─ ← [Revert] revert: Insufficient balance
    │   └─ ← [Revert] revert: Insufficient balance
    └─ ← [Revert] revert: Insufficient balance

[PASS] testTransfer25Succeeds() (gas: 54702)
Traces:
  [54702] ExtraneousExceptionHandlingTest::testTransfer25Succeeds()
    ├─ [1563] FixedToken::getBalance(ExtraneousExceptionHandlingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 1000
    ├─ [28938] FixedToken::transferFrom(0x000000000000000000000000000000000000bEEF, 25)
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true, "transferFrom should return true") [staticcall]
    │   └─ ← [Return] 
    ├─ [1563] FixedToken::getBalance(ExtraneousExceptionHandlingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 975
    ├─ [1563] FixedToken::getBalance(0x000000000000000000000000000000000000bEEF) [staticcall]
    │   └─ ← [Return] 25
    ├─ [0] VM::assertEq(975, 975, "Deployer balance should be reduced by 25") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(25, 25, "Recipient balance should be 25 wei") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testTransferFailsWithInsufficientBalance() (gas: 8599)
Traces:
  [8599] ExtraneousExceptionHandlingTest::testTransferFailsWithInsufficientBalance()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient balance)
    │   └─ ← [Return] 
    ├─ [1780] FixedToken::transferFrom(0x000000000000000000000000000000000000dEaD, 1)
    │   └─ ← [Revert] revert: Insufficient balance
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 682.29µs (476.75µs CPU time)

Ran 1 test suite in 523.54ms (682.29µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/2.2.2-Extraneous-Exception-Handling-fixed.t.sol:ExtraneousExceptionHandlingTest
[FAIL: revert: Insufficient balance] testAttackContractAllows25Transfer() (gas: 243924)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol

Running forge test: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol (attempt 2)
Failed: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 350.07ms
Compiler run successful!

Ran 3 tests for test/2.2.2-Extraneous-Exception-Handling-fixed.t.sol:ExtraneousExceptionHandlingTest
[FAIL: revert: Insufficient balance] testAttackContractAllows25Transfer() (gas: 242173)
Traces:
  [343337] ExtraneousExceptionHandlingTest::setUp()
    ├─ [284009] → new FixedToken@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1318 bytes of code
    └─ ← [Stop] 

  [242173] ExtraneousExceptionHandlingTest::testAttackContractAllows25Transfer()
    ├─ [28938] FixedToken::transferFrom(0x000000000000000000000000000000000000bEEF, 50)
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true, "Initial funding transfer should succeed") [staticcall]
    │   └─ ← [Return] 
    ├─ [1563] FixedToken::getBalance(0x000000000000000000000000000000000000bEEF) [staticcall]
    │   └─ ← [Return] 50
    ├─ [0] VM::assertEq(50, 50, "Attacker should have 50 wei after funding") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::startPrank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [159406] → new FixedAttackContract@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 690 bytes of code
    ├─ [4633] FixedAttackContract::attack()
    │   ├─ [1780] FixedToken::transferFrom(0x000000000000000000000000000000000000bEEF, 25)
    │   │   └─ ← [Revert] revert: Insufficient balance
    │   └─ ← [Revert] revert: Insufficient balance
    └─ ← [Revert] revert: Insufficient balance

[FAIL: Deployer balance should be reduced by 25: 1000 != 975] testTransfer25Succeeds() (gas: 26704)
Traces:
  [343337] ExtraneousExceptionHandlingTest::setUp()
    ├─ [284009] → new FixedToken@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1318 bytes of code
    └─ ← [Stop] 

  [26704] ExtraneousExceptionHandlingTest::testTransfer25Succeeds()
    ├─ [9738] FixedToken::transferFrom(ExtraneousExceptionHandlingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 25)
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true, "transferFrom should return true") [staticcall]
    │   └─ ← [Return] 
    ├─ [1563] FixedToken::getBalance(ExtraneousExceptionHandlingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 1000
    ├─ [1563] FixedToken::getBalance(0x000000000000000000000000000000000000bEEF) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(1000, 975, "Deployer balance should be reduced by 25") [staticcall]
    │   └─ ← [Revert] Deployer balance should be reduced by 25: 1000 != 975
    └─ ← [Revert] Deployer balance should be reduced by 25: 1000 != 975

[PASS] testTransferFailsWithInsufficientBalance() (gas: 8599)
Traces:
  [8599] ExtraneousExceptionHandlingTest::testTransferFailsWithInsufficientBalance()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient balance)
    │   └─ ← [Return] 
    ├─ [1780] FixedToken::transferFrom(0x000000000000000000000000000000000000dEaD, 1)
    │   └─ ← [Revert] revert: Insufficient balance
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 959.55µs (697.31µs CPU time)

Ran 1 test suite in 567.67ms (959.55µs CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/2.2.2-Extraneous-Exception-Handling-fixed.t.sol:ExtraneousExceptionHandlingTest
[FAIL: revert: Insufficient balance] testAttackContractAllows25Transfer() (gas: 242173)
[FAIL: Deployer balance should be reduced by 25: 1000 != 975] testTransfer25Succeeds() (gas: 26704)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol

Running forge test: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol (attempt 3)
Failed: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "2.2.2-Extraneous-Exception-Handling-fixed.sol" not found: File not found.
 --> test/2.2.2-Extraneous-Exception-Handling-fixed.t.sol:6:1:
  |
6 | import "../2.2.2-Extraneous-Exception-Handling-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol

Running forge test: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol (attempt 4)
Passed: 2.2.2-Extraneous-Exception-Handling-fixed.t.sol
Test file not found, generating first: 2.2.2-Extraneous-Exception-Handling-vulnerability.t.sol

Running forge test: 2.2.2-Extraneous-Exception-Handling-vulnerability.t.sol (attempt 1)
Passed: 2.2.2-Extraneous-Exception-Handling-vulnerability.t.sol
Test file not found, generating first: 3-Gas-Depletion-fixed.t.sol

Running forge test: 3-Gas-Depletion-fixed.t.sol (attempt 1)
Failed: 3-Gas-Depletion-fixed.t.sol
Error:
Compiler run failed:
Error (7279): Cannot perform packed encoding for a literal. Please convert it to an explicit type first.
  --> test/3-Gas-Depletion-fixed.t.sol:77:81:
   |
77 |         address sampleUser = vm.addr(uint256(keccak256(abi.encodePacked("user", 0))));
   |                                                                                 ^

Error: Compilation failed
Regenerating: 3-Gas-Depletion-fixed.t.sol

Running forge test: 3-Gas-Depletion-fixed.t.sol (attempt 2)
Failed: 3-Gas-Depletion-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 383.24ms
Compiler run successful!

Ran 3 tests for test/3-Gas-Depletion-fixed.t.sol:GasDepletionFixedTest
[FAIL: EvmError: Revert] testAttackHelperJoinMultiple() (gas: 2180826)
Traces:
  [527460] GasDepletionFixedTest::setUp()
    ├─ [488791] → new GasDepletionFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2433 bytes of code
    └─ ← [Stop] 

  [2180826] GasDepletionFixedTest::testAttackHelperJoinMultiple()
    ├─ [219261] → new GasDepletionFixedAttackHelper@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 989 bytes of code
    ├─ [0] VM::deal(GasDepletionFixedTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [1621630] GasDepletionFixedAttackHelper::joinMultiple{value: 500000000000000000}(50)
    │   ├─ [41986] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(500000000000000000 [5e17], 500000000000000000 [5e17], "Balance mismatch after attack helper joins") [staticcall]
    │   └─ ← [Return] 
    ├─ [274477] GasDepletionFixed::calculateRewards()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(GasDepletionFixedAttackHelper: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [9611] GasDepletionFixed::withdrawReward()
    │   ├─ [46] GasDepletionFixedAttackHelper::fallback{value: 500000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testCalculateRewardsDistribution() (gas: 13165)
Traces:
  [527460] GasDepletionFixedTest::setUp()
    ├─ [488791] → new GasDepletionFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2433 bytes of code
    └─ ← [Stop] 

  [13165] GasDepletionFixedTest::testCalculateRewardsDistribution()
    ├─ [0] VM::addr(<pk>) [staticcall]
    │   └─ ← [Return] 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf
    ├─ [0] VM::prank(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf)
    │   └─ ← [Return] 
    ├─ [0] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testDoubleCalculateRewardsRevert() (gas: 13164)
Traces:
  [527460] GasDepletionFixedTest::setUp()
    ├─ [488791] → new GasDepletionFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2433 bytes of code
    └─ ← [Stop] 

  [13164] GasDepletionFixedTest::testDoubleCalculateRewardsRevert()
    ├─ [0] VM::addr(<pk>) [staticcall]
    │   └─ ← [Return] 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf
    ├─ [0] VM::prank(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf)
    │   └─ ← [Return] 
    ├─ [0] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 0 passed; 3 failed; 0 skipped; finished in 1.05ms (1.28ms CPU time)

Ran 1 test suite in 498.99ms (1.05ms CPU time): 0 tests passed, 3 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 3 failing tests in test/3-Gas-Depletion-fixed.t.sol:GasDepletionFixedTest
[FAIL: EvmError: Revert] testAttackHelperJoinMultiple() (gas: 2180826)
[FAIL: EvmError: Revert] testCalculateRewardsDistribution() (gas: 13165)
[FAIL: EvmError: Revert] testDoubleCalculateRewardsRevert() (gas: 13164)

Encountered a total of 3 failing tests, 0 tests succeeded
Regenerating: 3-Gas-Depletion-fixed.t.sol

Running forge test: 3-Gas-Depletion-fixed.t.sol (attempt 3)
Failed: 3-Gas-Depletion-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 338.22ms
Compiler run successful!

Ran 3 tests for test/3-Gas-Depletion-fixed.t.sol:GasDepletionFixedTest
[PASS] testAttackHelperJoinMultiple() (gas: 523829)
Traces:
  [523829] GasDepletionFixedTest::testAttackHelperJoinMultiple()
    ├─ [221468] → new GasDepletionFixedAttackHelper@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1000 bytes of code
    ├─ [180010] GasDepletionFixedAttackHelper::joinMultiple{value: 50000000000000000}(5)
    │   ├─ [41986] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(50000000000000000 [5e16], 50000000000000000 [5e16], "Fixed contract balance mismatch after attack helper joins") [staticcall]
    │   └─ ← [Return] 
    ├─ [66847] GasDepletionFixed::calculateRewards()
    │   └─ ← [Stop] 
    ├─ [1492] GasDepletionFixed::rewards(GasDepletionFixedAttackHelper: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return] 50000000000000000 [5e16]
    ├─ [0] VM::assertEq(50000000000000000 [5e16], 50000000000000000 [5e16], "Attack helper reward not accumulated correctly") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testCalculateRewardsDistribution() (gas: 265929)
Traces:
  [537499] GasDepletionFixedTest::setUp()
    ├─ [488791] → new GasDepletionFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2433 bytes of code
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(SHA-256: [0x0000000000000000000000000000000000000002], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(RIPEMD-160: [0x0000000000000000000000000000000000000003], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(GasDepletionFixedTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [265929] GasDepletionFixedTest::testCalculateRewardsDistribution()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [41986] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(RIPEMD-160: [0x0000000000000000000000000000000000000003])
    │   └─ ← [Return] 
    ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(30000000000000000 [3e16], 30000000000000000 [3e16]) [staticcall]
    │   └─ ← [Return] 
    ├─ [96019] GasDepletionFixed::calculateRewards()
    │   └─ ← [Stop] 
    ├─ [1492] GasDepletionFixed::rewards(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 10000000000000000 [1e16]
    ├─ [1492] GasDepletionFixed::rewards(SHA-256: [0x0000000000000000000000000000000000000002]) [staticcall]
    │   └─ ← [Return] 10000000000000000 [1e16]
    ├─ [1492] GasDepletionFixed::rewards(RIPEMD-160: [0x0000000000000000000000000000000000000003]) [staticcall]
    │   └─ ← [Return] 10000000000000000 [1e16]
    ├─ [0] VM::assertEq(10000000000000000 [1e16], 10000000000000000 [1e16], "User1 reward incorrect") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000 [1e16], 10000000000000000 [1e16], "User2 reward incorrect") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000 [1e16], 10000000000000000 [1e16], "User3 reward incorrect") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [11865] GasDepletionFixed::withdrawReward()
    │   ├─ [0] ECRecover::fallback{value: 10000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] testDoubleCalculateRewardsRevert() (gas: 110532)
Traces:
  [110532] GasDepletionFixedTest::testDoubleCalculateRewardsRevert()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [41986] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [Stop] 
    ├─ [48391] GasDepletionFixed::calculateRewards()
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Rewards already calculated)
    │   └─ ← [Return] 
    ├─ [1282] GasDepletionFixed::calculateRewards()
    │   └─ ← [Revert] revert: Rewards already calculated
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 651.88µs (390.77µs CPU time)

Ran 1 test suite in 516.65ms (651.88µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/3-Gas-Depletion-fixed.t.sol:GasDepletionFixedTest
[FAIL: EvmError: Revert] testCalculateRewardsDistribution() (gas: 265929)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 3-Gas-Depletion-fixed.t.sol

Running forge test: 3-Gas-Depletion-fixed.t.sol (attempt 4)
Failed: 3-Gas-Depletion-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 363.75ms
Compiler run successful!

Ran 3 tests for test/3-Gas-Depletion-fixed.t.sol:GasDepletionFixedTest
[FAIL: Attack helper reward not accumulated correctly: 50000000000000000 != 10000000000000000] testAttackHelperJoinMultiple() (gas: 528861)
Traces:
  [537499] GasDepletionFixedTest::setUp()
    ├─ [488791] → new GasDepletionFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2433 bytes of code
    ├─ [0] VM::deal(0x3DA8D322CB2435dA26E9C9fEE670f9fB7Fe74E49, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0xDbc23AE43a150ff8884B02Cea117b22D1c3b9796, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x68E527780872cda0216Ba0d8fBD58b67a5D5e351, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(GasDepletionFixedTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [528861] GasDepletionFixedTest::testAttackHelperJoinMultiple()
    ├─ [0] VM::addr(<pk>) [staticcall]
    │   └─ ← [Return] 0xd9A284367b6D3e25A91c91b5A430AF2593886EB9
    ├─ [0] VM::deal(0xd9A284367b6D3e25A91c91b5A430AF2593886EB9, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::startPrank(0xd9A284367b6D3e25A91c91b5A430AF2593886EB9)
    │   └─ ← [Return] 
    ├─ [219261] → new GasDepletionFixedAttackHelper@0xbad0CA620438C8689B1ed717093d0beb9f1D90eD
    │   └─ ← [Return] 989 bytes of code
    ├─ [180010] GasDepletionFixedAttackHelper::joinMultiple{value: 50000000000000000}(5)
    │   ├─ [41986] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(50000000000000000 [5e16], 50000000000000000 [5e16], "Fixed contract balance mismatch after attack helper joins") [staticcall]
    │   └─ ← [Return] 
    ├─ [66847] GasDepletionFixed::calculateRewards()
    │   └─ ← [Stop] 
    ├─ [1492] GasDepletionFixed::rewards(GasDepletionFixedAttackHelper: [0xbad0CA620438C8689B1ed717093d0beb9f1D90eD]) [staticcall]
    │   └─ ← [Return] 50000000000000000 [5e16]
    ├─ [0] VM::assertEq(50000000000000000 [5e16], 10000000000000000 [1e16], "Attack helper reward not accumulated correctly") [staticcall]
    │   └─ ← [Revert] Attack helper reward not accumulated correctly: 50000000000000000 != 10000000000000000
    └─ ← [Revert] Attack helper reward not accumulated correctly: 50000000000000000 != 10000000000000000

[PASS] testCalculateRewardsDistribution() (gas: 274390)
Traces:
  [331990] GasDepletionFixedTest::testCalculateRewardsDistribution()
    ├─ [0] VM::prank(0x3DA8D322CB2435dA26E9C9fEE670f9fB7Fe74E49)
    │   └─ ← [Return] 
    ├─ [41986] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0xDbc23AE43a150ff8884B02Cea117b22D1c3b9796)
    │   └─ ← [Return] 
    ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x68E527780872cda0216Ba0d8fBD58b67a5D5e351)
    │   └─ ← [Return] 
    ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(30000000000000000 [3e16], 30000000000000000 [3e16], "Contract balance incorrect after joins") [staticcall]
    │   └─ ← [Return] 
    ├─ [96019] GasDepletionFixed::calculateRewards()
    │   └─ ← [Stop] 
    ├─ [1492] GasDepletionFixed::rewards(0x3DA8D322CB2435dA26E9C9fEE670f9fB7Fe74E49) [staticcall]
    │   └─ ← [Return] 10000000000000000 [1e16]
    ├─ [1492] GasDepletionFixed::rewards(0xDbc23AE43a150ff8884B02Cea117b22D1c3b9796) [staticcall]
    │   └─ ← [Return] 10000000000000000 [1e16]
    ├─ [1492] GasDepletionFixed::rewards(0x68E527780872cda0216Ba0d8fBD58b67a5D5e351) [staticcall]
    │   └─ ← [Return] 10000000000000000 [1e16]
    ├─ [0] VM::assertEq(10000000000000000 [1e16], 10000000000000000 [1e16], "User1 reward incorrect") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000 [1e16], 10000000000000000 [1e16], "User2 reward incorrect") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000 [1e16], 10000000000000000 [1e16], "User3 reward incorrect") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x3DA8D322CB2435dA26E9C9fEE670f9fB7Fe74E49)
    │   └─ ← [Return] 
    ├─ [9563] GasDepletionFixed::withdrawReward()
    │   ├─ [0] 0x3DA8D322CB2435dA26E9C9fEE670f9fB7Fe74E49::fallback{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1492] GasDepletionFixed::rewards(0x3DA8D322CB2435dA26E9C9fEE670f9fB7Fe74E49) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "User1 reward not reset after withdrawal") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000 [1e16], 10000000000000000 [1e16], "User1 did not receive correct reward") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0xDbc23AE43a150ff8884B02Cea117b22D1c3b9796)
    │   └─ ← [Return] 
    ├─ [9563] GasDepletionFixed::withdrawReward()
    │   ├─ [0] 0xDbc23AE43a150ff8884B02Cea117b22D1c3b9796::fallback{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1492] GasDepletionFixed::rewards(0xDbc23AE43a150ff8884B02Cea117b22D1c3b9796) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "User2 reward not reset after withdrawal") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000 [1e16], 10000000000000000 [1e16], "User2 did not receive correct reward") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x68E527780872cda0216Ba0d8fBD58b67a5D5e351)
    │   └─ ← [Return] 
    ├─ [9563] GasDepletionFixed::withdrawReward()
    │   ├─ [0] 0x68E527780872cda0216Ba0d8fBD58b67a5D5e351::fallback{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1492] GasDepletionFixed::rewards(0x68E527780872cda0216Ba0d8fBD58b67a5D5e351) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "User3 reward not reset after withdrawal") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000 [1e16], 10000000000000000 [1e16], "User3 did not receive correct reward") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testDoubleCalculateRewardsRevert() (gas: 110179)
Traces:
  [110179] GasDepletionFixedTest::testDoubleCalculateRewardsRevert()
    ├─ [0] VM::prank(0x3DA8D322CB2435dA26E9C9fEE670f9fB7Fe74E49)
    │   └─ ← [Return] 
    ├─ [41986] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [Stop] 
    ├─ [48391] GasDepletionFixed::calculateRewards()
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Rewards already calculated)
    │   └─ ← [Return] 
    ├─ [1282] GasDepletionFixed::calculateRewards()
    │   └─ ← [Revert] revert: Rewards already calculated
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 867.68µs (324.09µs CPU time)

Ran 1 test suite in 501.28ms (867.68µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/3-Gas-Depletion-fixed.t.sol:GasDepletionFixedTest
[FAIL: Attack helper reward not accumulated correctly: 50000000000000000 != 10000000000000000] testAttackHelperJoinMultiple() (gas: 528861)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 3-Gas-Depletion-fixed.t.sol

Running forge test: 3-Gas-Depletion-fixed.t.sol (attempt 5)
Failed: 3-Gas-Depletion-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 356.06ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
   --> test/3-Gas-Depletion-fixed.t.sol:105:9:
    |
105 |         uint256 attackerBalanceBefore = attacker.balance;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Ran 2 tests for test/3-Gas-Depletion-fixed.t.sol:GasDepletionFixedTest
[FAIL: EvmError: Revert] testAttackHelperJoinMultiple() (gas: 599735)
Traces:
  [530179] GasDepletionFixedTest::setUp()
    ├─ [488791] → new GasDepletionFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2433 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [599735] GasDepletionFixedTest::testAttackHelperJoinMultiple()
    ├─ [0] VM::startPrank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [252098] → new GasDepletionFixedAttackHelper@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 1153 bytes of code
    ├─ [180032] GasDepletionFixedAttackHelper::joinMultiple{value: 50000000000000000}(5)
    │   ├─ [41986] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22786] GasDepletionFixed::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(50000000000000000 [5e16], 50000000000000000 [5e16], "Fixed contract balance mismatch after attack helper joins") [staticcall]
    │   └─ ← [Return] 
    ├─ [66847] GasDepletionFixed::calculateRewards()
    │   └─ ← [Stop] 
    ├─ [1492] GasDepletionFixed::rewards(GasDepletionFixedAttackHelper: [0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d]) [staticcall]
    │   └─ ← [Return] 50000000000000000 [5e16]
    ├─ [0] VM::assertEq(50000000000000000 [5e16], 50000000000000000 [5e16], "Attack helper reward not accumulated correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(GasDepletionFixedAttackHelper: [0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d])
    │   └─ ← [Return] 
    ├─ [12103] GasDepletionFixedAttackHelper::withdraw()
    │   ├─ [9611] GasDepletionFixed::withdrawReward()
    │   │   ├─ [46] GasDepletionFixedAttackHelper::fallback{value: 50000000000000000}()
    │   │   │   └─ ← [Revert] EvmError: Revert
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testDoubleCalculateRewardsRevert() (gas: 11081)
Traces:
  [530179] GasDepletionFixedTest::setUp()
    ├─ [488791] → new GasDepletionFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2433 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [11081] GasDepletionFixedTest::testDoubleCalculateRewardsRevert()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [0] GasDepletionFixed::join{value: 10000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 539.74µs (206.77µs CPU time)

Ran 1 test suite in 510.13ms (539.74µs CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/3-Gas-Depletion-fixed.t.sol:GasDepletionFixedTest
[FAIL: EvmError: Revert] testAttackHelperJoinMultiple() (gas: 599735)
[FAIL: EvmError: Revert] testDoubleCalculateRewardsRevert() (gas: 11081)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 3-Gas-Depletion-fixed.t.sol
Failed after 5 attempts: 3-Gas-Depletion-fixed.t.sol
Test file not found, generating first: 3-Gas-Depletion-vulnerability.t.sol

Running forge test: 3-Gas-Depletion-vulnerability.t.sol (attempt 1)
Failed: 3-Gas-Depletion-vulnerability.t.sol
Error:
Compiler run failed:
Error (9582): Member "participantsLength" not found or not visible after argument-dependent lookup in contract GasDepletionVulnerable.
  --> test/3-Gas-Depletion-vulnerability.t.sol:84:16:
   |
84 |         return vulnerable.participantsLength();
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 3-Gas-Depletion-vulnerability.t.sol

Running forge test: 3-Gas-Depletion-vulnerability.t.sol (attempt 2)
Failed: 3-Gas-Depletion-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 372.41ms
Compiler run successful!

Ran 3 tests for test/3-Gas-Depletion-vulnerability.t.sol:GasDepletionVulnerabilityTest
[PASS] testDistributeRewardsFailsDueToGasDepletion() (gas: 9643730)
Traces:
  [9643730] GasDepletionVulnerabilityTest::testDistributeRewardsFailsDueToGasDepletion()
    ├─ [9617452] GasDepletionAttack::attack{value: 3000000000000000000}(300)
    │   ├─ [41942] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [12084] GasDepletionVulnerable::distributeRewards()
    │   ├─ [46] GasDepletionAttack::fallback{value: 10000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    ├─ [0] VM::assertFalse(false, "distributeRewards should fail due to low gas") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testDistributeRewardsWorksWithFewParticipants() (gas: 65752)
Traces:
  [585425] GasDepletionVulnerabilityTest::setUp()
    ├─ [273512] → new GasDepletionVulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1366 bytes of code
    ├─ [219261] → new GasDepletionAttack@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 989 bytes of code
    └─ ← [Stop] 

  [65752] GasDepletionVulnerabilityTest::testDistributeRewardsWorksWithFewParticipants()
    ├─ [41942] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   └─ ← [Stop] 
    ├─ [12083] GasDepletionVulnerable::distributeRewards()
    │   ├─ [45] GasDepletionVulnerabilityTest::fallback{value: 10000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] testInvalidJoinReverts() (gas: 11507)
Traces:
  [11507] GasDepletionVulnerabilityTest::testInvalidJoinReverts()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  
Invalid value)
    │   └─ ← [Return] 
    ├─ [424] GasDepletionVulnerable::join{value: 5000000000000000}()
    │   └─ ← [Revert] revert: Invalid value
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 1.86ms (1.52ms CPU time)

Ran 1 test suite in 502.62ms (1.86ms CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/3-Gas-Depletion-vulnerability.t.sol:GasDepletionVulnerabilityTest
[FAIL: EvmError: Revert] testDistributeRewardsWorksWithFewParticipants() (gas: 65752)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 3-Gas-Depletion-vulnerability.t.sol

Running forge test: 3-Gas-Depletion-vulnerability.t.sol (attempt 3)
Failed: 3-Gas-Depletion-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "contracts/3-Gas-Depletion-vulnerability.sol" not found: File not found.
 --> test/3-Gas-Depletion-vulnerability.t.sol:6:1:
  |
6 | import "../contracts/3-Gas-Depletion-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 3-Gas-Depletion-vulnerability.t.sol

Running forge test: 3-Gas-Depletion-vulnerability.t.sol (attempt 4)
Failed: 3-Gas-Depletion-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 341.20ms
Compiler run successful!

Ran 2 tests for test/3-Gas-Depletion-vulnerability.t.sol:GasDepletionVulnerabilityTest
[PASS] testDistributeRewardsFailsDueToGasDepletion() (gas: 9643139)
Traces:
  [9643139] GasDepletionVulnerabilityTest::testDistributeRewardsFailsDueToGasDepletion()
    ├─ [9617452] GasDepletionAttack::attack{value: 3000000000000000000}(300)
    │   ├─ [41942] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return] 
    ├─ [12084] GasDepletionVulnerable::distributeRewards()
    │   ├─ [46] GasDepletionAttack::fallback{value: 13333333333333333}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testDistributeRewardsWorksForFewParticipants() (gas: 109644)
Traces:
  [593870] GasDepletionVulnerabilityTest::setUp()
    ├─ [273512] → new GasDepletionVulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1366 bytes of code
    ├─ [219261] → new GasDepletionAttack@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 989 bytes of code
    ├─ [55] GasDepletionVulnerable::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [109644] GasDepletionVulnerabilityTest::testDistributeRewardsWorksForFewParticipants()
    ├─ [83836] GasDepletionAttack::attack{value: 20000000000000000}(2)
    │   ├─ [41942] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [12084] GasDepletionVulnerable::distributeRewards()
    │   ├─ [46] GasDepletionAttack::fallback{value: 510000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 1.36ms (1.11ms CPU time)

Ran 1 test suite in 518.14ms (1.36ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/3-Gas-Depletion-vulnerability.t.sol:GasDepletionVulnerabilityTest
[FAIL: EvmError: Revert] testDistributeRewardsWorksForFewParticipants() (gas: 109644)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 3-Gas-Depletion-vulnerability.t.sol

Running forge test: 3-Gas-Depletion-vulnerability.t.sol (attempt 5)
Failed: 3-Gas-Depletion-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 354.53ms
Compiler run successful!

Ran 2 tests for test/3-Gas-Depletion-vulnerability.t.sol:GasDepletionVulnerabilityTest
[PASS] testDistributeRewardsFailsDueToGasDepletion() (gas: 9643133)
Traces:
  [9643133] GasDepletionVulnerabilityTest::testDistributeRewardsFailsDueToGasDepletion()
    ├─ [9617452] GasDepletionAttack::attack{value: 3000000000000000000}(300)
    │   ├─ [41942] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [22742] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return] 
    ├─ [12084] GasDepletionVulnerable::distributeRewards()
    │   ├─ [46] GasDepletionAttack::fallback{value: 13333333333333333}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testDistributeRewardsWorksForFewParticipants() (gas: 323859)
Traces:
  [594049] GasDepletionVulnerabilityTest::setUp()
    ├─ [273512] → new GasDepletionVulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1366 bytes of code
    ├─ [219261] → new GasDepletionAttack@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 989 bytes of code
    ├─ [55] GasDepletionVulnerable::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [323859] GasDepletionVulnerabilityTest::testDistributeRewardsWorksForFewParticipants()
    ├─ [273512] → new GasDepletionVulnerable@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1366 bytes of code
    ├─ [55] GasDepletionVulnerable::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return] 
    ├─ [0] GasDepletionVulnerable::join{value: 10000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 1.28ms (1.04ms CPU time)

Ran 1 test suite in 539.76ms (1.28ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/3-Gas-Depletion-vulnerability.t.sol:GasDepletionVulnerabilityTest
[FAIL: EvmError: Revert] testDistributeRewardsWorksForFewParticipants() (gas: 323859)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 3-Gas-Depletion-vulnerability.t.sol
Failed after 5 attempts: 3-Gas-Depletion-vulnerability.t.sol
Test file not found, generating first: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol

Running forge test: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol (attempt 1)
Failed: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol
Error:
Compiler run failed:
Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
   --> test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:107:13:
    |
107 |             fail("Attack function should not revert since sufficient gas is provided");
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol

Running forge test: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol (attempt 2)
Failed: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol
Error:
Compiler run failed:
Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
   --> test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:103:13:
    |
103 |             fail("Attack function should not revert since sufficient gas is provided");
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol

Running forge test: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol (attempt 3)
Failed: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol
Error:
Compiler run failed:
Error (9640): Explicit type conversion not allowed from "bytes memory" to "bytes32".
  --> test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:70:23:
   |
70 |         assertEq(uint(bytes32(abi.encodePacked(data))), uint(bytes32(abi.encodePacked(callData))), "Transaction data mismatch");
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (9640): Explicit type conversion not allowed from "bytes memory" to "bytes32".
  --> test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:70:62:
   |
70 |         assertEq(uint(bytes32(abi.encodePacked(data))), uint(bytes32(abi.encodePacked(callData))), "Transaction data mismatch");
   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol

Running forge test: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol (attempt 4)
Failed: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 370.86ms
Compiler run successful with warnings:
Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:33:22:
   |
33 |     function execute(bytes memory _data, uint _gasLimit) public {
   |                      ^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
  --> test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:89:10:
   |
89 |         (bytes memory storedData, bool executed) = relayer.transactions(0);
   |          ^^^^^^^^^^^^^^^^^^^^^^^

Warning (2018): Function state mutability can be restricted to view
  --> test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:33:5:
   |
33 |     function execute(bytes memory _data, uint _gasLimit) public {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 3 tests for test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:FixedGasTest
[PASS] testAttack() (gas: 65401)
Traces:
  [65401] FixedGasTest::testAttack()
    ├─ [56496] FixedAttack::attack()
    │   ├─ [52096] FixedRelayer::relay(FixedTarget: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x, 300000 [3e5])
    │   │   ├─ [1194] FixedTarget::execute(0x, 300000 [3e5])
    │   │   │   └─ ← [Revert] revert: not enough gas
    │   │   └─ ← [Return] false
    │   └─ ← [Stop] 
    ├─ [1129] FixedRelayer::transactionId() [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1, "TransactionId should be incremented after attack") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testInsufficientGasRelay() (gas: 68775)
Traces:
  [68775] FixedGasTest::testInsufficientGasRelay()
    ├─ [52096] FixedRelayer::relay(FixedTarget: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x, 10000 [1e4])
    │   ├─ [1194] FixedTarget::execute(0x, 10000 [1e4])
    │   │   └─ ← [Revert] revert: not enough gas
    │   └─ ← [Return] false
    ├─ [0] VM::assertTrue(true, "Relay call should fail with insufficient gas") [staticcall]
    │   └─ ← [Return] 
    ├─ [3912] FixedRelayer::transactions(0) [staticcall]
    │   └─ ← [Return] 0x, true
    ├─ [0] VM::assertTrue(true, "Transaction record should still be marked as executed even if call failed") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: Relay call should succeed with sufficient gas] testSuccessfulRelay() (gas: 58932)
Traces:
  [1081027] FixedGasTest::setUp()
    ├─ [483518] → new FixedRelayer@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2415 bytes of code
    ├─ [194438] → new FixedTarget@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 971 bytes of code
    ├─ [256172] → new FixedAttack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1068 bytes of code
    └─ ← [Stop] 

  [58932] FixedGasTest::testSuccessfulRelay()
    ├─ [52096] FixedRelayer::relay(FixedTarget: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x, 300000 [3e5])
    │   ├─ [1194] FixedTarget::execute(0x, 300000 [3e5])
    │   │   └─ ← [Revert] revert: not enough gas
    │   └─ ← [Return] false
    ├─ [0] VM::assertTrue(false, "Relay call should succeed with sufficient gas") [staticcall]
    │   └─ ← [Revert] Relay call should succeed with sufficient gas
    └─ ← [Revert] Relay call should succeed with sufficient gas

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 2.47ms (2.25ms CPU time)

Ran 1 test suite in 498.59ms (2.47ms CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:FixedGasTest
[FAIL: Relay call should succeed with sufficient gas] testSuccessfulRelay() (gas: 58932)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol

Running forge test: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol (attempt 5)
Failed: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 364.03ms
Compiler run successful with warnings:
Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> src/3.1-Improper-Gas-Requirements-Checking-fixed.sol:39:22:
   |
39 |     function execute(bytes memory _data, uint _gasLimit) public {
   |                      ^^^^^^^^^^^^^^^^^^

Warning (2018): Function state mutability can be restricted to view
  --> src/3.1-Improper-Gas-Requirements-Checking-fixed.sol:39:5:
   |
39 |     function execute(bytes memory _data, uint _gasLimit) public {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 3 tests for test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:FixedGasTest
[PASS] testAttack() (gas: 65401)
Traces:
  [65401] FixedGasTest::testAttack()
    ├─ [56496] FixedAttack::attack()
    │   ├─ [52096] FixedRelayer::relay(FixedTarget: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x, 300000 [3e5])
    │   │   ├─ [1194] FixedTarget::execute(0x, 300000 [3e5])
    │   │   │   └─ ← [Revert] revert: not enough gas
    │   │   └─ ← [Return] false
    │   └─ ← [Stop] 
    ├─ [1129] FixedRelayer::transactionId() [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1, "TransactionId should be incremented after attack") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testInsufficientGasRelay() (gas: 68502)
Traces:
  [68502] FixedGasTest::testInsufficientGasRelay()
    ├─ [52096] FixedRelayer::relay(FixedTarget: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x, 10000 [1e4])
    │   ├─ [1194] FixedTarget::execute(0x, 10000 [1e4])
    │   │   └─ ← [Revert] revert: not enough gas
    │   └─ ← [Return] false
    ├─ [0] VM::assertTrue(true, "Relay call should fail with insufficient gas") [staticcall]
    │   └─ ← [Return] 
    ├─ [3912] FixedRelayer::transactions(0) [staticcall]
    │   └─ ← [Return] 0x, true
    ├─ [0] VM::assertTrue(true, "Transaction record should be marked as executed even if call failed") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: Relay call should succeed with sufficient gas] testSuccessfulRelay() (gas: 58661)
Traces:
  [1081027] FixedGasTest::setUp()
    ├─ [483518] → new FixedRelayer@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2415 bytes of code
    ├─ [194438] → new FixedTarget@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 971 bytes of code
    ├─ [256172] → new FixedAttack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1068 bytes of code
    └─ ← [Stop] 

  [58661] FixedGasTest::testSuccessfulRelay()
    ├─ [52096] FixedRelayer::relay(FixedTarget: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x, 1200000 [1.2e6])
    │   ├─ [1194] FixedTarget::execute(0x, 1200000 [1.2e6])
    │   │   └─ ← [Revert] revert: not enough gas
    │   └─ ← [Return] false
    ├─ [0] VM::assertTrue(false, "Relay call should succeed with sufficient gas") [staticcall]
    │   └─ ← [Revert] Relay call should succeed with sufficient gas
    └─ ← [Revert] Relay call should succeed with sufficient gas

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 725.87µs (346.31µs CPU time)

Ran 1 test suite in 599.96ms (725.87µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/3.1-Improper-Gas-Requirements-Checking-fixed.t.sol:FixedGasTest
[FAIL: Relay call should succeed with sufficient gas] testSuccessfulRelay() (gas: 58661)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol
Failed after 5 attempts: 3.1-Improper-Gas-Requirements-Checking-fixed.t.sol
Test file not found, generating first: 3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol

Running forge test: 3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol (attempt 1)
Failed: 3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 358.13ms
Compiler run successful with warnings:
Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol:34:22:
   |
34 |     function execute(bytes memory _data) public {
   |                      ^^^^^^^^^^^^^^^^^^

Warning (2018): Function state mutability can be restricted to pure
  --> test/3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol:34:5:
   |
34 |     function execute(bytes memory _data) public {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 4 tests for test/3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol:ImproperGasRequirementsTest
[PASS] testAttackWithLowGas() (gas: 262403)
Traces:
  [262403] ImproperGasRequirementsTest::testAttackWithLowGas()
    ├─ [243760] Attack::attack()
    │   ├─ [239476] Relayer::relay(Target: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x)
    │   │   ├─ [188971] Target::execute(0x)
    │   │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   │   └─ ← [Return] false
    │   └─ ← [Stop] 
    ├─ [1107] Relayer::transactionId() [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1, "Transaction ID should be incremented after attack invocation") [staticcall]
    │   └─ ← [Return] 
    ├─ [3890] Relayer::transactions(0) [staticcall]
    │   └─ ← [Return] 0x, true
    ├─ [0] VM::assertTrue(true, "The transaction should be marked as executed even if target execution failed") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testAttackWithSufficientGas() (gas: 979398)
Traces:
  [979398] ImproperGasRequirementsTest::testAttackWithSufficientGas()
    ├─ [970505] Attack::attack()
    │   ├─ [966221] Relayer::relay(Target: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x)
    │   │   ├─ [915715] Target::execute(0x)
    │   │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   │   └─ ← [Return] false
    │   └─ ← [Stop] 
    ├─ [1107] Relayer::transactionId() [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1, "Transaction ID should be incremented after successful attack invocation") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testRelayWithLowGas() (gas: 259895)
Traces:
  [259895] ImproperGasRequirementsTest::testRelayWithLowGas()
    ├─ [247140] Relayer::relay(Target: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x)
    │   ├─ [196634] Target::execute(0x)
    │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   └─ ← [Return] false
    ├─ [0] VM::assertTrue(true, "Relay should fail due to out-of-gas in heavy computation") [staticcall]
    │   └─ ← [Return] 
    ├─ [1107] Relayer::transactionId() [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1, "Transaction ID should advance even if execution fails") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: Relay should succeed with sufficient gas] testRelayWithSufficientGas() (gas: 991926)
Traces:
  [1014524] ImproperGasRequirementsTest::setUp()
    ├─ [475911] → new Relayer@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2377 bytes of code
    ├─ [145590] → new Target@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 727 bytes of code
    ├─ [246160] → new Attack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1018 bytes of code
    └─ ← [Stop] 

  [991926] ImproperGasRequirementsTest::testRelayWithSufficientGas()
    ├─ [985422] Relayer::relay(Target: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x)
    │   ├─ [934918] Target::execute(0x)
    │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   └─ ← [Return] false
    ├─ [0] VM::assertTrue(false, "Relay should succeed with sufficient gas") [staticcall]
    │   └─ ← [Revert] Relay should succeed with sufficient gas
    └─ ← [Revert] Relay should succeed with sufficient gas

Suite result: FAILED. 3 passed; 1 failed; 0 skipped; finished in 3.55ms (4.97ms CPU time)

Ran 1 test suite in 528.39ms (3.55ms CPU time): 3 tests passed, 1 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 1 failing test in test/3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol:ImproperGasRequirementsTest
[FAIL: Relay should succeed with sufficient gas] testRelayWithSufficientGas() (gas: 991926)

Encountered a total of 1 failing tests, 3 tests succeeded
Regenerating: 3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol

Running forge test: 3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol (attempt 2)
Failed: 3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 366.87ms
Compiler run successful with warnings:
Warning (2018): Function state mutability can be restricted to pure
  --> test/3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol:33:5:
   |
33 |     function execute(bytes memory /* _data */) public {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 4 tests for test/3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol:ImproperGasRequirementsTest
[PASS] testAttackWithLowGas() (gas: 213856)
Traces:
  [213856] ImproperGasRequirementsTest::testAttackWithLowGas()
    ├─ [195310] Attack::attack()
    │   ├─ [191026] Relayer::relay(Target: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x)
    │   │   ├─ [140522] Target::execute(0x)
    │   │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   │   └─ ← [Return] false
    │   └─ ← [Stop] 
    ├─ [3890] Relayer::transactions(0) [staticcall]
    │   └─ ← [Return] 0x, true
    ├─ [0] VM::assertTrue(true, "Transaction should be marked as executed after attack invocation") [staticcall]
    │   └─ ← [Return] 
    ├─ [1107] Relayer::transactionId() [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1, "Transaction ID should be incremented after attack invocation") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testAttackWithSufficientGas() (gas: 2927038)
Traces:
  [2927038] ImproperGasRequirementsTest::testAttackWithSufficientGas()
    ├─ [2908494] Attack::attack()
    │   ├─ [2904210] Relayer::relay(Target: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x)
    │   │   ├─ [2853704] Target::execute(0x)
    │   │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   │   └─ ← [Return] false
    │   └─ ← [Stop] 
    ├─ [3890] Relayer::transactions(0) [staticcall]
    │   └─ ← [Return] 0x, true
    ├─ [0] VM::assertTrue(true, "Transaction should be marked as executed after attack invocation") [staticcall]
    │   └─ ← [Return] 
    ├─ [1107] Relayer::transactionId() [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1, "Transaction ID should be incremented after attack invocation") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testRelayWithLowGas() (gas: 220760)
Traces:
  [220760] ImproperGasRequirementsTest::testRelayWithLowGas()
    ├─ [197922] Relayer::relay(Target: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x)
    │   ├─ [147418] Target::execute(0x)
    │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   └─ ← [Return] false
    ├─ [0] VM::assertTrue(true, "Relay should fail due to out-of-gas in heavy computation") [staticcall]
    │   └─ ← [Return] 
    ├─ [3890] Relayer::transactions(0) [staticcall]
    │   └─ ← [Return] 0x, true
    ├─ [0] VM::assertTrue(true, "The transaction should be marked as executed even if target execution failed") [staticcall]
    │   └─ ← [Return] 
    ├─ [1107] Relayer::transactionId() [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1, "Transaction ID should advance even if execution fails") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: Relay should succeed with sufficient gas] testRelayWithSufficientGas() (gas: 2960947)
Traces:
  [1014524] ImproperGasRequirementsTest::setUp()
    ├─ [475911] → new Relayer@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2377 bytes of code
    ├─ [145590] → new Target@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 727 bytes of code
    ├─ [246160] → new Attack@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 1018 bytes of code
    └─ ← [Stop] 

  [2960947] ImproperGasRequirementsTest::testRelayWithSufficientGas()
    ├─ [2954172] Relayer::relay(Target: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0x)
    │   ├─ [2903668] Target::execute(0x)
    │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   └─ ← [Return] false
    ├─ [0] VM::assertTrue(false, "Relay should succeed with sufficient gas") [staticcall]
    │   └─ ← [Revert] Relay should succeed with sufficient gas
    └─ ← [Revert] Relay should succeed with sufficient gas

Suite result: FAILED. 3 passed; 1 failed; 0 skipped; finished in 6.85ms (13.03ms CPU time)

Ran 1 test suite in 495.67ms (6.85ms CPU time): 3 tests passed, 1 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 1 failing test in test/3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol:ImproperGasRequirementsTest
[FAIL: Relay should succeed with sufficient gas] testRelayWithSufficientGas() (gas: 2960947)

Encountered a total of 1 failing tests, 3 tests succeeded
Regenerating: 3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol

Running forge test: 3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol (attempt 3)
Passed: 3.1-Improper-Gas-Requirements-Checking-vulnerability.t.sol
Test file not found, generating first: 3.2-Call-with-hardcoded-gas-amount-fixed.t.sol

Running forge test: 3.2-Call-with-hardcoded-gas-amount-fixed.t.sol (attempt 1)
Passed: 3.2-Call-with-hardcoded-gas-amount-fixed.t.sol
Test file not found, generating first: 3.2-Call-with-hardcoded-gas-amount-vulnerability.t.sol

Running forge test: 3.2-Call-with-hardcoded-gas-amount-vulnerability.t.sol (attempt 1)
Passed: 3.2-Call-with-hardcoded-gas-amount-vulnerability.t.sol
Test file not found, generating first: 4-Erroneous-Credit-Transfer-fixed.t.sol

Running forge test: 4-Erroneous-Credit-Transfer-fixed.t.sol (attempt 1)
Failed: 4-Erroneous-Credit-Transfer-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 364.40ms
Compiler run successful!

Ran 3 tests for test/4-Erroneous-Credit-Transfer-fixed.t.sol:FixedCreditTest
[PASS] testAttackFixedPrevention() (gas: 299080)
Traces:
  [318280] FixedCreditTest::testAttackFixedPrevention()
    ├─ [192237] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 854 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [43955] AttackFixed::attack{value: 1000000000000000000}()
    │   ├─ [21251] FixedCredit::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [10940] FixedCredit::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [55] AttackFixed::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1536] FixedCredit::credits(0x000000000000000000000000000000000000ABcD) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "Attacker's credit should be 0 after attack") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient credit)
    │   └─ ← [Return] 
    ├─ [1557] FixedCredit::withdraw(1000000000000000000 [1e18])
    │   └─ ← [Revert] revert: Insufficient credit
    └─ ← [Stop] 

[PASS] testDepositZeroValueReverts() (gas: 5182)
Traces:
  [5182] FixedCreditTest::testDepositZeroValueReverts()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  msg.value must be > 0)
    │   └─ ← [Return] 
    ├─ [402] FixedCredit::deposit()
    │   └─ ← [Revert] revert: msg.value must be > 0
    └─ ← [Stop] 

[FAIL: revert: Transfer failed] testDoubleWithdrawalPrevention() (gas: 53069)
Traces:
  [362668] FixedCreditTest::setUp()
    ├─ [324162] → new FixedCredit@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1619 bytes of code
    └─ ← [Stop] 

  [53069] FixedCreditTest::testDoubleWithdrawalPrevention()
    ├─ [0] VM::deal(FixedCreditTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [21251] FixedCredit::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1536] FixedCredit::credits(FixedCreditTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Deposit not recorded correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [11186] FixedCredit::withdraw(1000000000000000000 [1e18])
    │   ├─ [45] FixedCreditTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Transfer failed
    └─ ← [Revert] revert: Transfer failed

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 1.29ms (366.34µs CPU time)

Ran 1 test suite in 503.16ms (1.29ms CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/4-Erroneous-Credit-Transfer-fixed.t.sol:FixedCreditTest
[FAIL: revert: Transfer failed] testDoubleWithdrawalPrevention() (gas: 53069)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 4-Erroneous-Credit-Transfer-fixed.t.sol

Running forge test: 4-Erroneous-Credit-Transfer-fixed.t.sol (attempt 2)
Failed: 4-Erroneous-Credit-Transfer-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
  --> test/4-Erroneous-Credit-Transfer-fixed.t.sol:48:17:
   |
48 |     FixedCredit fixed;
   |                 ^^^^^

Error: Compilation failed
Regenerating: 4-Erroneous-Credit-Transfer-fixed.t.sol

Running forge test: 4-Erroneous-Credit-Transfer-fixed.t.sol (attempt 3)
Failed: 4-Erroneous-Credit-Transfer-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "4-Erroneous-Credit-Transfer-fixed.sol" not found: File not found.
 --> test/4-Erroneous-Credit-Transfer-fixed.t.sol:6:1:
  |
6 | import "../4-Erroneous-Credit-Transfer-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 4-Erroneous-Credit-Transfer-fixed.t.sol

Running forge test: 4-Erroneous-Credit-Transfer-fixed.t.sol (attempt 4)
Failed: 4-Erroneous-Credit-Transfer-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 346.46ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
   --> test/4-Erroneous-Credit-Transfer-fixed.t.sol:106:9:
    |
106 |         uint256 initialAttackBalance = address(attackContract).balance;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Ran 3 tests for test/4-Erroneous-Credit-Transfer-fixed.t.sol:FixedCreditTest
[PASS] testAttackContract() (gas: 45897)
Traces:
  [65097] FixedCreditTest::testAttackContract()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [43955] AttackFixed::attack{value: 1000000000000000000}()
    │   ├─ [21251] FixedCredit::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [10940] FixedCredit::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [55] AttackFixed::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1536] FixedCredit::credits(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "Attack contract should have 0 credit after attack") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: revert: Insufficient credit] testDoubleWithdrawFails() (gas: 45110)
Traces:
  [614505] FixedCreditTest::setUp()
    ├─ [324162] → new FixedCredit@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1619 bytes of code
    ├─ [192237] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 854 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [45110] FixedCreditTest::testDoubleWithdrawFails()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [21251] FixedCredit::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1536] FixedCredit::credits(0x000000000000000000000000000000000000ABcD) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Credit should be 1 Ether after deposit") [staticcall]
    │   └─ ← [Return] 
    ├─ [1557] FixedCredit::withdraw(1000000000000000000 [1e18])
    │   └─ ← [Revert] revert: Insufficient credit
    └─ ← [Revert] revert: Insufficient credit

[PASS] testMultipleDepositsAndWithdrawals() (gas: 76816)
Traces:
  [96016] FixedCreditTest::testMultipleDepositsAndWithdrawals()
    ├─ [0] VM::startPrank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [21251] FixedCredit::deposit{value: 500000000000000000}()
    │   └─ ← [Stop] 
    ├─ [2051] FixedCredit::deposit{value: 500000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1536] FixedCredit::credits(0x000000000000000000000000000000000000ABcD) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Total credit should be 1 Ether") [staticcall]
    │   └─ ← [Return] 
    ├─ [10885] FixedCredit::withdraw(500000000000000000 [5e17])
    │   ├─ [0] 0x000000000000000000000000000000000000ABcD::fallback{value: 500000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1536] FixedCredit::credits(0x000000000000000000000000000000000000ABcD) [staticcall]
    │   └─ ← [Return] 500000000000000000 [5e17]
    ├─ [0] VM::assertEq(500000000000000000 [5e17], 500000000000000000 [5e17], "Credit should be 0.5 Ether after partial withdrawal") [staticcall]
    │   └─ ← [Return] 
    ├─ [10885] FixedCredit::withdraw(500000000000000000 [5e17])
    │   ├─ [0] 0x000000000000000000000000000000000000ABcD::fallback{value: 500000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1536] FixedCredit::credits(0x000000000000000000000000000000000000ABcD) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "Credit should be 0 after full withdrawal") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 651.58µs (349.95µs CPU time)

Ran 1 test suite in 504.04ms (651.58µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/4-Erroneous-Credit-Transfer-fixed.t.sol:FixedCreditTest
[FAIL: revert: Insufficient credit] testDoubleWithdrawFails() (gas: 45110)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 4-Erroneous-Credit-Transfer-fixed.t.sol

Running forge test: 4-Erroneous-Credit-Transfer-fixed.t.sol (attempt 5)
Failed: 4-Erroneous-Credit-Transfer-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
  --> test/4-Erroneous-Credit-Transfer-fixed.t.sol:53:24:
   |
53 |     FixedCredit public fixed;
   |                        ^^^^^

Error: Compilation failed
Regenerating: 4-Erroneous-Credit-Transfer-fixed.t.sol
Failed after 5 attempts: 4-Erroneous-Credit-Transfer-fixed.t.sol
Test file not found, generating first: 4-Erroneous-Credit-Transfer-vulnerability.t.sol

Running forge test: 4-Erroneous-Credit-Transfer-vulnerability.t.sol (attempt 1)
Failed: 4-Erroneous-Credit-Transfer-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "4-Erroneous-Credit-Transfer-fixed.sol" not found: File not found.
 --> test/4-Erroneous-Credit-Transfer-fixed.t.sol:6:1:
  |
6 | import "../4-Erroneous-Credit-Transfer-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 4-Erroneous-Credit-Transfer-vulnerability.t.sol

Running forge test: 4-Erroneous-Credit-Transfer-vulnerability.t.sol (attempt 2)
Failed: 4-Erroneous-Credit-Transfer-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "4-Erroneous-Credit-Transfer-fixed.sol" not found: File not found.
 --> test/4-Erroneous-Credit-Transfer-fixed.t.sol:6:1:
  |
6 | import "../4-Erroneous-Credit-Transfer-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6275): Source "4-Erroneous-Credit-Transfer-vulnerability.sol" not found: File not found.
 --> test/4-Erroneous-Credit-Transfer-vulnerability.t.sol:4:1:
  |
4 | import "../4-Erroneous-Credit-Transfer-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 4-Erroneous-Credit-Transfer-vulnerability.t.sol

Running forge test: 4-Erroneous-Credit-Transfer-vulnerability.t.sol (attempt 3)
Failed: 4-Erroneous-Credit-Transfer-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "4-Erroneous-Credit-Transfer-fixed.sol" not found: File not found.
 --> test/4-Erroneous-Credit-Transfer-fixed.t.sol:6:1:
  |
6 | import "../4-Erroneous-Credit-Transfer-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 4-Erroneous-Credit-Transfer-vulnerability.t.sol

===== Test run started: 2025-03-31 01:12:08.537847 =====

Test file not found, generating first: 4.1-Improper-Check-on-Transfer-Credit-fixed.t.sol

Running forge test: 4.1-Improper-Check-on-Transfer-Credit-fixed.t.sol (attempt 1)
Passed: 4.1-Improper-Check-on-Transfer-Credit-fixed.t.sol
Test file not found, generating first: 4.1-Improper-Check-on-Transfer-Credit-vulnerability.t.sol

Running forge test: 4.1-Improper-Check-on-Transfer-Credit-vulnerability.t.sol (attempt 1)
Passed: 4.1-Improper-Check-on-Transfer-Credit-vulnerability.t.sol
Test file not found, generating first: 4.2-Unprotected-Transfer-Value-fixed.t.sol

Running forge test: 4.2-Unprotected-Transfer-Value-fixed.t.sol (attempt 1)
Passed: 4.2-Unprotected-Transfer-Value-fixed.t.sol
Test file not found, generating first: 4.2-Unprotected-Transfer-Value-vulnerability.t.sol

Running forge test: 4.2-Unprotected-Transfer-Value-vulnerability.t.sol (attempt 1)
Passed: 4.2-Unprotected-Transfer-Value-vulnerability.t.sol
Test file not found, generating first: 4.3-Wrong-use-of-Transfer-Credit-Function-fixed.t.sol

Running forge test: 4.3-Wrong-use-of-Transfer-Credit-Function-fixed.t.sol (attempt 1)
Failed: 4.3-Wrong-use-of-Transfer-Credit-Function-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 362.79ms
Compiler run successful!

Ran 3 tests for test/4.3-Wrong-use-of-Transfer-Credit-Function-fixed.t.sol:AuctionFixedTest
[PASS] testAuctionRemainsFunctionalDespiteAttack() (gas: 139962)
Traces:
  [139962] AuctionFixedTest::testAuctionRemainsFunctionalDespiteAttack()
    ├─ [0] VM::deal(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [51888] AttackFixed::attackBid{value: 1000000000000000000}()
    │   ├─ [42692] AuctionFixed::bid{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1195] AuctionFixed::highestBid() [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [1233] AuctionFixed::highestBidder() [staticcall]
    │   └─ ← [Return] AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]
    ├─ [0] VM::assertEq(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x0000000000000000000000000000000000000B0b, 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000000B0b)
    │   └─ ← [Return] 
    ├─ [27039] AuctionFixed::bid{value: 2000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1558] AuctionFixed::refunds(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [1195] AuctionFixed::highestBid() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [1233] AuctionFixed::highestBidder() [staticcall]
    │   └─ ← [Return] 0x0000000000000000000000000000000000000B0b
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000000B0b, 0x0000000000000000000000000000000000000B0b) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testWithdrawRefundForValidBidder() (gas: 113630)
Traces:
  [597466] AuctionFixedTest::setUp()
    ├─ [317755] → new AuctionFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1587 bytes of code
    ├─ [187031] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 828 bytes of code
    └─ ← [Stop] 

  [113630] AuctionFixedTest::testWithdrawRefundForValidBidder()
    ├─ [0] VM::deal(AuctionFixedTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [42692] AuctionFixed::bid{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::deal(0x0000000000000000000000000000000000000B0b, 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000000B0b)
    │   └─ ← [Return] 
    ├─ [27039] AuctionFixed::bid{value: 2000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1558] AuctionFixed::refunds(AuctionFixedTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [9500] AuctionFixed::withdrawRefund()
    │   ├─ [45] AuctionFixedTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] testWithdrawRefundRevertsForAttackContract() (gas: 112744)
Traces:
  [131944] AuctionFixedTest::testWithdrawRefundRevertsForAttackContract()
    ├─ [0] VM::deal(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [51888] AttackFixed::attackBid{value: 1000000000000000000}()
    │   ├─ [42692] AuctionFixed::bid{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::deal(0x0000000000000000000000000000000000000B0b, 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000000B0b)
    │   └─ ← [Return] 
    ├─ [27039] AuctionFixed::bid{value: 2000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1558] AuctionFixed::refunds(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(AttackFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  AttackFixed: Rejecting refund)
    │   └─ ← [Return] 
    ├─ [9795] AuctionFixed::withdrawRefund()
    │   ├─ [325] AttackFixed::receive{value: 1000000000000000000}()
    │   │   └─ ← [Revert] revert: AttackFixed: Rejecting refund
    │   └─ ← [Revert] revert: AttackFixed: Rejecting refund
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 2.78ms (2.59ms CPU time)

Ran 1 test suite in 481.28ms (2.78ms CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/4.3-Wrong-use-of-Transfer-Credit-Function-fixed.t.sol:AuctionFixedTest
[FAIL: EvmError: Revert] testWithdrawRefundForValidBidder() (gas: 113630)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 4.3-Wrong-use-of-Transfer-Credit-Function-fixed.t.sol

Running forge test: 4.3-Wrong-use-of-Transfer-Credit-Function-fixed.t.sol (attempt 2)
Passed: 4.3-Wrong-use-of-Transfer-Credit-Function-fixed.t.sol
Test file not found, generating first: 4.3-Wrong-use-of-Transfer-Credit-Function-vulnerability.t.sol

Running forge test: 4.3-Wrong-use-of-Transfer-Credit-Function-vulnerability.t.sol (attempt 1)
Passed: 4.3-Wrong-use-of-Transfer-Credit-Function-vulnerability.t.sol
Test file not found, generating first: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol

Running forge test: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol (attempt 1)
Failed: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 354.03ms
Compiler run successful!

Ran 2 tests for test/4.4-Missing-Token-Issuer-Verification-fixed.t.sol:FixedTicketTest
[PASS] testTransferByAttackerFails() (gas: 8179)
Traces:
  [8179] FixedTicketTest::testTransferByAttackerFails()
    ├─ [0] VM::prank(RIPEMD-160: [0x0000000000000000000000000000000000000003])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Caller is not token issuer)
    │   └─ ← [Return] 
    ├─ [1247] FixedTicket::transfer()
    │   └─ ← [Revert] revert: Caller is not token issuer
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testTransferByTokenIssuerSucceeds() (gas: 42599)
Traces:
  [299074] FixedTicketTest::setUp()
    ├─ [249966] → new FixedTicket@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1037 bytes of code
    ├─ [55] FixedTicket::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [42599] FixedTicketTest::testTransferByTokenIssuerSucceeds()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [35811] FixedTicket::transfer()
    │   ├─ [0] ECRecover::fallback{value: 1000000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 500.58µs (185.66µs CPU time)

Ran 1 test suite in 518.93ms (500.58µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/4.4-Missing-Token-Issuer-Verification-fixed.t.sol:FixedTicketTest
[FAIL: EvmError: Revert] testTransferByTokenIssuerSucceeds() (gas: 42599)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol

Running forge test: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol (attempt 2)
Failed: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "4.4-Missing-Token-Issuer-Verification-fixed.sol" not found: File not found.
 --> test/4.4-Missing-Token-Issuer-Verification-fixed.t.sol:4:1:
  |
4 | import "../4.4-Missing-Token-Issuer-Verification-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol

Running forge test: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol (attempt 3)
Failed: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 379.31ms
Compiler run successful!

Ran 2 tests for test/4.4-Missing-Token-Issuer-Verification-fixed.t.sol:FixedTicketTest
[PASS] testAttackerCannotCallTransfer() (gas: 8223)
Traces:
  [8223] FixedTicketTest::testAttackerCannotCallTransfer()
    ├─ [0] VM::prank(RIPEMD-160: [0x0000000000000000000000000000000000000003])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Caller is not token issuer)
    │   └─ ← [Return] 
    ├─ [1247] FixedTicket::transfer()
    │   └─ ← [Revert] revert: Caller is not token issuer
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testTokenIssuerCanCallTransfer() (gas: 46049)
Traces:
  [300956] FixedTicketTest::setUp()
    ├─ [249966] → new FixedTicket@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1037 bytes of code
    ├─ [0] VM::deal(FixedTicketTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [55] FixedTicket::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [46049] FixedTicketTest::testTokenIssuerCanCallTransfer()
    ├─ [0] VM::assertGt(1000000000000000000 [1e18], 0) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [35811] FixedTicket::transfer()
    │   ├─ [0] ECRecover::fallback{value: 1000000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 2.17ms (1.76ms CPU time)

Ran 1 test suite in 491.52ms (2.17ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/4.4-Missing-Token-Issuer-Verification-fixed.t.sol:FixedTicketTest
[FAIL: EvmError: Revert] testTokenIssuerCanCallTransfer() (gas: 46049)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol

Running forge test: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol (attempt 4)
Failed: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "4.4-Missing-Token-Issuer-Verification-fixed.sol" not found: File not found.
 --> test/4.4-Missing-Token-Issuer-Verification-fixed.t.sol:4:1:
  |
4 | import "../4.4-Missing-Token-Issuer-Verification-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol

Running forge test: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol (attempt 5)
Passed: 4.4-Missing-Token-Issuer-Verification-fixed.t.sol
Test file not found, generating first: 4.4-Missing-Token-Issuer-Verification-vulnerability.t.sol

Running forge test: 4.4-Missing-Token-Issuer-Verification-vulnerability.t.sol (attempt 1)
Failed: 4.4-Missing-Token-Issuer-Verification-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 358.45ms
Compiler run successful!

Ran 2 tests for test/4.4-Missing-Token-Issuer-Verification-vulnerability.t.sol:VulnerableTicketTest
[PASS] testExploitDrainsFunds() (gas: 48528)
Traces:
  [48528] VulnerableTicketTest::testExploitDrainsFunds()
    ├─ [0] VM::startPrank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [32649] VulnerableTicket::transfer()
    │   ├─ [0] 0x000000000000000000000000000000000000bEEF::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Attacker did not receive the full bonus pool") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: Token issuer did not receive the bonus pool as expected: 2000000000000000000 != 1000000000000000000] testTokenIssuerExploit() (gas: 57015)
Traces:
  [254617] VulnerableTicketTest::setUp()
    ├─ [202317] → new VulnerableTicket@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 799 bytes of code
    ├─ [55] VulnerableTicket::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [57015] VulnerableTicketTest::testTokenIssuerExploit()
    ├─ [55] VulnerableTicket::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::startPrank(0x000000000000000000000000000000000000F00D)
    │   └─ ← [Return] 
    ├─ [32649] VulnerableTicket::transfer()
    │   ├─ [0] 0x000000000000000000000000000000000000F00D::fallback{value: 2000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 1000000000000000000 [1e18], "Token issuer did not receive the bonus pool as expected") [staticcall]
    │   └─ ← [Revert] Token issuer did not receive the bonus pool as expected: 2000000000000000000 != 1000000000000000000
    └─ ← [Revert] Token issuer did not receive the bonus pool as expected: 2000000000000000000 != 1000000000000000000

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 593.90µs (209.35µs CPU time)

Ran 1 test suite in 521.29ms (593.90µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/4.4-Missing-Token-Issuer-Verification-vulnerability.t.sol:VulnerableTicketTest
[FAIL: Token issuer did not receive the bonus pool as expected: 2000000000000000000 != 1000000000000000000] testTokenIssuerExploit() (gas: 57015)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 4.4-Missing-Token-Issuer-Verification-vulnerability.t.sol

Running forge test: 4.4-Missing-Token-Issuer-Verification-vulnerability.t.sol (attempt 2)
Passed: 4.4-Missing-Token-Issuer-Verification-vulnerability.t.sol
Test file not found, generating first: 4.5-Missing-Token-Verification-of-Exchange-fixed.t.sol

Running forge test: 4.5-Missing-Token-Verification-of-Exchange-fixed.t.sol (attempt 1)
Passed: 4.5-Missing-Token-Verification-of-Exchange-fixed.t.sol
Test file not found, generating first: 4.5-Missing-Token-Verification-of-Exchange-vulnerability.t.sol

Running forge test: 4.5-Missing-Token-Verification-of-Exchange-vulnerability.t.sol (attempt 1)
Passed: 4.5-Missing-Token-Verification-of-Exchange-vulnerability.t.sol
Test file not found, generating first: 4.6-Fake-Notification-fixed.t.sol

Running forge test: 4.6-Fake-Notification-fixed.t.sol (attempt 1)
Failed: 4.6-Fake-Notification-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "4.6-Fake-Notification-fixed.sol" not found: File not found.
 --> test/4.6-Fake-Notification-fixed.t.sol:7:1:
  |
7 | import "../4.6-Fake-Notification-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 4.6-Fake-Notification-fixed.t.sol

Running forge test: 4.6-Fake-Notification-fixed.t.sol (attempt 2)
Passed: 4.6-Fake-Notification-fixed.t.sol
Test file not found, generating first: 4.6-Fake-Notification-vulnerability.t.sol

Running forge test: 4.6-Fake-Notification-vulnerability.t.sol (attempt 1)
Failed: 4.6-Fake-Notification-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "4.6-Fake-Notification-vulnerability.sol" not found: File not found.
 --> test/4.6-Fake-Notification-vulnerability.t.sol:8:1:
  |
8 | import "../4.6-Fake-Notification-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 4.6-Fake-Notification-vulnerability.t.sol

Running forge test: 4.6-Fake-Notification-vulnerability.t.sol (attempt 2)
Passed: 4.6-Fake-Notification-vulnerability.t.sol
Test file not found, generating first: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol

Running forge test: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol (attempt 1)
Failed: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol
Error:
Compiler run failed:
Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
   --> test/5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol:131:13:
    |
131 |             fail("AttackContract.attack should have reverted");
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol

Running forge test: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol (attempt 2)
Failed: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol:7:19:
  |
7 |     FixedContract fixed;
  |                   ^^^^^

Error: Compilation failed
Regenerating: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol

Running forge test: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol (attempt 3)
Failed: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol
Error:
Compiler run failed:
Error (9097): Identifier already declared.
  --> lib/forge-std/src/StdInvariant.sol:64:5:
   |
64 |     function targetContract(address newTargetedContract_) internal {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: The previous declaration is here:
  --> test/5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol:48:5:
   |
48 |     FixedContract targetContract;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol

Running forge test: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol (attempt 4)
Failed: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.sol" not found: File not found.
 --> test/5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol:4:1:
  |
4 | import "../5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol

Running forge test: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol (attempt 5)
Failed: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 335.43ms
Compiler run successful!

Ran 3 tests for test/5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol:FixedContractTest
[FAIL: revert: Attacker deposit failed] testAttackContractCannotWithdraw() (gas: 198189)
Traces:
  [400076] FixedContractTest::setUp()
    ├─ [331815] → new FixedContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1553 bytes of code
    ├─ [21164] FixedContract::receive{value: 2000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [198189] FixedContractTest::testAttackContractCannotWithdraw()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [129776] → new AttackContractFixed@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 542 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] FixedContract::receive{value: 1000000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] revert: Attacker deposit failed

[PASS] testAuthorizedWithdraw() (gas: 35001)
Traces:
  [35001] FixedContractTest::testAuthorizedWithdraw()
    ├─ [15850] FixedContract::withdraw(1000000000000000000 [1e18])
    │   ├─ [55] FixedContractTest::receive{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1492] FixedContract::balances(FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Owner balance in contract should reduce by withdrawal amount") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "FixedContract ether balance should be reduced") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertGe(79228162513264337593543950335 [7.922e28], 79228162513254337593543950335 [7.922e28], "Owner should receive withdrawn ether") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testUnauthorizedWithdrawDirectly() (gas: 9033)
Traces:
  [9033] FixedContractTest::testUnauthorizedWithdrawDirectly()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Not authorized)
    │   └─ ← [Return] 
    ├─ [1531] FixedContract::withdraw(1000000000000000000 [1e18])
    │   └─ ← [Revert] revert: Not authorized
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 657.38µs (449.65µs CPU time)

Ran 1 test suite in 495.17ms (657.38µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol:FixedContractTest
[FAIL: revert: Attacker deposit failed] testAttackContractCannotWithdraw() (gas: 198189)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol
Failed after 5 attempts: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol
Deleted test file due to repeated failure: 5-Bad-Programming-Practices-and-Language-Weaknesses-fixed.t.sol
Test file not found, generating first: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol

Running forge test: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol (attempt 1)
Failed: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 348.78ms
Compiler run successful!

Ran 1 test for test/5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol:VulnerableContractTest
[FAIL: revert: Deposit failed] setUp() (gas: 0)
Traces:
  [573488] VulnerableContractTest::setUp()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000baBe)
    │   └─ ← [Return] 
    ├─ [331815] → new VulnerableContract@0xDfC8e9f1795AEC6a975d983F9Dcca974012a7155
    │   └─ ← [Return] 1553 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [129776] → new AttackContract@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 542 bytes of code
    ├─ [0] VM::deal(AttackContract: [0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d], 0)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(AttackContract: [0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d])
    │   └─ ← [Return] 
    ├─ [0] VulnerableContract::receive{value: 1000000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] revert: Deposit failed

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 1.08ms (0.00ns CPU time)

Ran 1 test suite in 569.15ms (1.08ms CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol:VulnerableContractTest
[FAIL: revert: Deposit failed] setUp() (gas: 0)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol

Running forge test: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol (attempt 2)
Failed: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 344.13ms
Compiler run successful!

Ran 1 test for test/5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol:VulnerableContractTest
[FAIL: revert: Not authorized] testExploit() (gas: 12519)
Traces:
  [604879] VulnerableContractTest::setUp()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000baBe)
    │   └─ ← [Return] 
    ├─ [331815] → new VulnerableContract@0xDfC8e9f1795AEC6a975d983F9Dcca974012a7155
    │   └─ ← [Return] 1553 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [129776] → new AttackContract@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 542 bytes of code
    ├─ [0] VM::deal(AttackContract: [0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(AttackContract: [0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d])
    │   └─ ← [Return] 
    ├─ [21164] VulnerableContract::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1492] VulnerableContract::balances(AttackContract: [0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [12519] VulnerableContractTest::testExploit()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000baBe)
    │   └─ ← [Return] 
    ├─ [4233] AttackContract::attack()
    │   ├─ [1531] VulnerableContract::withdraw(1000000000000000000 [1e18])
    │   │   └─ ← [Revert] revert: Not authorized
    │   └─ ← [Revert] revert: Not authorized
    └─ ← [Revert] revert: Not authorized

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 423.17µs (41.68µs CPU time)

Ran 1 test suite in 482.28ms (423.17µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol:VulnerableContractTest
[FAIL: revert: Not authorized] testExploit() (gas: 12519)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol

Running forge test: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol (attempt 3)
Failed: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 342.25ms
Compiler run successful!

Ran 1 test for test/5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol:VulnerableContractTest
[FAIL: revert: Not authorized] testExploit() (gas: 9363)
Traces:
  [605154] VulnerableContractTest::setUp()
    ├─ [0] VM::startPrank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [331815] → new VulnerableContract@0x522B3294E6d06aA25Ad0f1B8891242E335D3B459
    │   └─ ← [Return] 1553 bytes of code
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [0] VM::startPrank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [129776] → new AttackContract@0xE536720791A7DaDBeBdBCD8c8546fb0791a11901
    │   └─ ← [Return] 542 bytes of code
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [0] VM::deal(AttackContract: [0xE536720791A7DaDBeBdBCD8c8546fb0791a11901], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(AttackContract: [0xE536720791A7DaDBeBdBCD8c8546fb0791a11901])
    │   └─ ← [Return] 
    ├─ [21164] VulnerableContract::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1492] VulnerableContract::balances(AttackContract: [0xE536720791A7DaDBeBdBCD8c8546fb0791a11901]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Attack contract deposit not registered") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [9363] VulnerableContractTest::testExploit()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [4233] AttackContract::attack()
    │   ├─ [1531] VulnerableContract::withdraw(1000000000000000000 [1e18])
    │   │   └─ ← [Revert] revert: Not authorized
    │   └─ ← [Revert] revert: Not authorized
    └─ ← [Revert] revert: Not authorized

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 534.07µs (52.50µs CPU time)

Ran 1 test suite in 527.35ms (534.07µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol:VulnerableContractTest
[FAIL: revert: Not authorized] testExploit() (gas: 9363)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol

Running forge test: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol (attempt 4)
Failed: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 301.67ms
Compiler run successful!

Ran 2 tests for test/5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol:VulnerableContractTest
[PASS] testDirectWithdrawFailsForNonOwner() (gas: 8679)
Traces:
  [8679] VulnerableContractTest::testDirectWithdrawFailsForNonOwner()
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Not authorized)
    │   └─ ← [Return] 
    ├─ [1531] VulnerableContract::withdraw(1000000000000000000 [1e18])
    │   └─ ← [Revert] revert: Not authorized
    └─ ← [Stop] 

[FAIL: revert: Not authorized] testExploit() (gas: 9363)
Traces:
  [603615] VulnerableContractTest::setUp()
    ├─ [0] VM::startPrank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [331815] → new VulnerableContract@0x522B3294E6d06aA25Ad0f1B8891242E335D3B459
    │   └─ ← [Return] 1553 bytes of code
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [129776] → new AttackContract@0xE536720791A7DaDBeBdBCD8c8546fb0791a11901
    │   └─ ← [Return] 542 bytes of code
    ├─ [0] VM::deal(AttackContract: [0xE536720791A7DaDBeBdBCD8c8546fb0791a11901], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(AttackContract: [0xE536720791A7DaDBeBdBCD8c8546fb0791a11901])
    │   └─ ← [Return] 
    ├─ [21164] VulnerableContract::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1492] VulnerableContract::balances(AttackContract: [0xE536720791A7DaDBeBdBCD8c8546fb0791a11901]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Attack contract deposit not registered") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [9363] VulnerableContractTest::testExploit()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [4233] AttackContract::attack()
    │   ├─ [1531] VulnerableContract::withdraw(1000000000000000000 [1e18])
    │   │   └─ ← [Revert] revert: Not authorized
    │   └─ ← [Revert] revert: Not authorized
    └─ ← [Revert] revert: Not authorized

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 873.23µs (226.42µs CPU time)

Ran 1 test suite in 503.94ms (873.23µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol:VulnerableContractTest
[FAIL: revert: Not authorized] testExploit() (gas: 9363)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol

Running forge test: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol (attempt 5)
Failed: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 350.31ms
Compiler run successful!

Ran 2 tests for test/5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol:VulnerableContractTest
[PASS] testDirectWithdrawFailsForNonOwner() (gas: 41341)
Traces:
  [41341] VulnerableContractTest::testDirectWithdrawFailsForNonOwner()
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [21164] VulnerableContract::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Not authorized)
    │   └─ ← [Return] 
    ├─ [1531] VulnerableContract::withdraw(1000000000000000000 [1e18])
    │   └─ ← [Revert] revert: Not authorized
    └─ ← [Stop] 

[FAIL: revert: Deposit failed] testExploit() (gas: 11569)
Traces:
  [567897] VulnerableContractTest::setUp()
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(SHA-256: [0x0000000000000000000000000000000000000002], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::startPrank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [331815] → new VulnerableContract@0x522B3294E6d06aA25Ad0f1B8891242E335D3B459
    │   └─ ← [Return] 1553 bytes of code
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [0] VM::startPrank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [129776] → new AttackContract@0xE536720791A7DaDBeBdBCD8c8546fb0791a11901
    │   └─ ← [Return] 542 bytes of code
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [11569] VulnerableContractTest::testExploit()
    ├─ [0] VM::prank(AttackContract: [0xE536720791A7DaDBeBdBCD8c8546fb0791a11901])
    │   └─ ← [Return] 
    ├─ [0] VulnerableContract::receive{value: 1000000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] revert: Deposit failed

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 598.81µs (204.36µs CPU time)

Ran 1 test suite in 550.27ms (598.81µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol:VulnerableContractTest
[FAIL: revert: Deposit failed] testExploit() (gas: 11569)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol
Failed after 5 attempts: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol
Deleted test file due to repeated failure: 5-Bad-Programming-Practices-and-Language-Weaknesses-vulnerability.t.sol
Test file not found, generating first: 5.1-Bad-Randomness-fixed.t.sol

Running forge test: 5.1-Bad-Randomness-fixed.t.sol (attempt 1)
Passed: 5.1-Bad-Randomness-fixed.t.sol
Test file not found, generating first: 5.1-Bad-Randomness-vulnerability.t.sol

Running forge test: 5.1-Bad-Randomness-vulnerability.t.sol (attempt 1)
Failed: 5.1-Bad-Randomness-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 334.69ms
Compiler run successful!

Ran 1 test for test/5.1-Bad-Randomness-vulnerability.t.sol:GameGuessBlockVulnerableTest
[FAIL: Bet block number not recorded correctly: 0 != 1] testExploit() (gas: 53876)
Traces:
  [695021] GameGuessBlockVulnerableTest::setUp()
    ├─ [0] VM::label(Attacker: [0x0000000000000000000000000000000000000001], "Attacker")
    │   └─ ← [Return] 
    ├─ [280918] → new GameGuessBlockVulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1403 bytes of code
    ├─ [0] VM::deal(GameGuessBlockVulnerable: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(Attacker: [0x0000000000000000000000000000000000000001], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(Attacker: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [310595] → new AttackGameGuessBlockVulnerable@0x522B3294E6d06aA25Ad0f1B8891242E335D3B459
    │   └─ ← [Return] 1341 bytes of code
    └─ ← [Stop] 

  [53876] GameGuessBlockVulnerableTest::testExploit()
    ├─ [0] VM::prank(Attacker: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [31635] AttackGameGuessBlockVulnerable::attackBet{value: 1000000000000000000}()
    │   ├─ [21403] GameGuessBlockVulnerable::bet{value: 1000000000000000000}(0x0000000000000000000000000000000000000000000000000000000000000000)
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [2462] GameGuessBlockVulnerable::attempts(Attacker: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 0, 0x0000000000000000000000000000000000000000000000000000000000000000
    ├─ [0] VM::assertEq(0, 1, "Bet block number not recorded correctly") [staticcall]
    │   └─ ← [Revert] Bet block number not recorded correctly: 0 != 1
    └─ ← [Revert] Bet block number not recorded correctly: 0 != 1

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 369.13µs (67.84µs CPU time)

Ran 1 test suite in 549.50ms (369.13µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/5.1-Bad-Randomness-vulnerability.t.sol:GameGuessBlockVulnerableTest
[FAIL: Bet block number not recorded correctly: 0 != 1] testExploit() (gas: 53876)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 5.1-Bad-Randomness-vulnerability.t.sol

Running forge test: 5.1-Bad-Randomness-vulnerability.t.sol (attempt 2)
Failed: 5.1-Bad-Randomness-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.1-Bad-Randomness-vulnerability.sol" not found: File not found.
 --> test/5.1-Bad-Randomness-vulnerability.t.sol:5:1:
  |
5 | import "../5.1-Bad-Randomness-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.1-Bad-Randomness-vulnerability.t.sol

Running forge test: 5.1-Bad-Randomness-vulnerability.t.sol (attempt 3)
Failed: 5.1-Bad-Randomness-vulnerability.t.sol
Error:
Compiler run failed:
Error (6138): Wrong argument count for function call: 0 arguments given but expected 1. This function requires a single bytes argument. Use "" as argument to provide empty calldata.
  --> test/5.1-Bad-Randomness-vulnerability.t.sol:87:25:
   |
87 |         (bool sent, ) = payable(address(vulnerable)).call{value: 10 ether}();
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.1-Bad-Randomness-vulnerability.t.sol

Running forge test: 5.1-Bad-Randomness-vulnerability.t.sol (attempt 4)
Failed: 5.1-Bad-Randomness-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "contracts/5.1-Bad-Randomness-vulnerability.sol" not found: File not found.
 --> test/5.1-Bad-Randomness-vulnerability.t.sol:8:1:
  |
8 | import "../contracts/5.1-Bad-Randomness-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.1-Bad-Randomness-vulnerability.t.sol

Running forge test: 5.1-Bad-Randomness-vulnerability.t.sol (attempt 5)
Passed: 5.1-Bad-Randomness-vulnerability.t.sol
Test file not found, generating first: 5.10-Improper-Modifier-fixed.t.sol

Running forge test: 5.10-Improper-Modifier-fixed.t.sol (attempt 1)
Passed: 5.10-Improper-Modifier-fixed.t.sol
Test file not found, generating first: 5.10-Improper-Modifier-vulnerability.t.sol

Running forge test: 5.10-Improper-Modifier-vulnerability.t.sol (attempt 1)
Failed: 5.10-Improper-Modifier-vulnerability.t.sol
Error:
Compiler run failed:
Error (3125): Member "balance" not found or not visible after argument-dependent lookup in contract Attack. Use "address(attackContract).balance" to access this address member.
  --> test/5.10-Improper-Modifier-vulnerability.t.sol:78:74:
   |
78 |         emit log_named_uint("Attacker balance before (Attack contract)", attackContract.balance);
   |                                                                          ^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.10-Improper-Modifier-vulnerability.t.sol

Running forge test: 5.10-Improper-Modifier-vulnerability.t.sol (attempt 2)
Passed: 5.10-Improper-Modifier-vulnerability.t.sol
Test file not found, generating first: 5.10.1-Wrong-Function-Modifier-fixed.t.sol

Running forge test: 5.10.1-Wrong-Function-Modifier-fixed.t.sol (attempt 1)
Failed: 5.10.1-Wrong-Function-Modifier-fixed.t.sol
Error:
Compiler run failed:
Error (4487): No unique declaration found after argument-dependent lookup.
  --> test/5.10.1-Wrong-Function-Modifier-fixed.t.sol:67:9:
   |
67 |         assertEq(uint8(xData[xData.length - 2]), 0x01, "Expected second last byte to be 0x01");
   |         ^^^^^^^^
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:67:5:
   |
67 |     function assertEq(bool left, bool right) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:71:5:
   |
71 |     function assertEq(bool left, bool right, string memory err) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:75:5:
   |
75 |     function assertEq(uint256 left, uint256 right) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:79:5:
   |
79 |     function assertEq(uint256 left, uint256 right, string memory err) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:91:5:
   |
91 |     function assertEq(int256 left, int256 right) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:95:5:
   |
95 |     function assertEq(int256 left, int256 right, string memory err) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:107:5:
    |
107 |     function assertEq(address left, address right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:111:5:
    |
111 |     function assertEq(address left, address right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:115:5:
    |
115 |     function assertEq(bytes32 left, bytes32 right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:119:5:
    |
119 |     function assertEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:131:5:
    |
131 |     function assertEq(string memory left, string memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:135:5:
    |
135 |     function assertEq(string memory left, string memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:139:5:
    |
139 |     function assertEq(bytes memory left, bytes memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:143:5:
    |
143 |     function assertEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:147:5:
    |
147 |     function assertEq(bool[] memory left, bool[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:151:5:
    |
151 |     function assertEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:155:5:
    |
155 |     function assertEq(uint256[] memory left, uint256[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:159:5:
    |
159 |     function assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:163:5:
    |
163 |     function assertEq(int256[] memory left, int256[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:167:5:
    |
167 |     function assertEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:171:5:
    |
171 |     function assertEq(address[] memory left, address[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:175:5:
    |
175 |     function assertEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:179:5:
    |
179 |     function assertEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:183:5:
    |
183 |     function assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:187:5:
    |
187 |     function assertEq(string[] memory left, string[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:191:5:
    |
191 |     function assertEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:195:5:
    |
195 |     function assertEq(bytes[] memory left, bytes[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:199:5:
    |
199 |     function assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).

Error: Compilation failed
Regenerating: 5.10.1-Wrong-Function-Modifier-fixed.t.sol

Running forge test: 5.10.1-Wrong-Function-Modifier-fixed.t.sol (attempt 2)
Failed: 5.10.1-Wrong-Function-Modifier-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.10.1-Wrong-Function-Modifier-fixed.sol" not found: File not found.
 --> test/5.10.1-Wrong-Function-Modifier-fixed.t.sol:6:1:
  |
6 | import "../5.10.1-Wrong-Function-Modifier-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.10.1-Wrong-Function-Modifier-fixed.t.sol

Running forge test: 5.10.1-Wrong-Function-Modifier-fixed.t.sol (attempt 3)
Passed: 5.10.1-Wrong-Function-Modifier-fixed.t.sol
Test file not found, generating first: 5.10.1-Wrong-Function-Modifier-vulnerability.t.sol

Running forge test: 5.10.1-Wrong-Function-Modifier-vulnerability.t.sol (attempt 1)
Passed: 5.10.1-Wrong-Function-Modifier-vulnerability.t.sol
Test file not found, generating first: 5.10.2-Missing-Constant-Modifier-in-Variable-Declaration-fixed.t.sol

Running forge test: 5.10.2-Missing-Constant-Modifier-in-Variable-Declaration-fixed.t.sol (attempt 1)
Passed: 5.10.2-Missing-Constant-Modifier-in-Variable-Declaration-fixed.t.sol
Test file not found, generating first: 5.10.2-Missing-Constant-Modifier-in-Variable-Declaration-vulnerability.t.sol

Running forge test: 5.10.2-Missing-Constant-Modifier-in-Variable-Declaration-vulnerability.t.sol (attempt 1)
Passed: 5.10.2-Missing-Constant-Modifier-in-Variable-Declaration-vulnerability.t.sol
Test file not found, generating first: 5.10.3-Missing-Visibility-Modifier-in-Variable-Declaration-fixed.t.sol

Running forge test: 5.10.3-Missing-Visibility-Modifier-in-Variable-Declaration-fixed.t.sol (attempt 1)
Passed: 5.10.3-Missing-Visibility-Modifier-in-Variable-Declaration-fixed.t.sol
Test file not found, generating first: 5.10.3-Missing-Visibility-Modifier-in-Variable-Declaration-vulnerability.t.sol

Running forge test: 5.10.3-Missing-Visibility-Modifier-in-Variable-Declaration-vulnerability.t.sol (attempt 1)
Passed: 5.10.3-Missing-Visibility-Modifier-in-Variable-Declaration-vulnerability.t.sol
Test file not found, generating first: 5.11-Redundant-Functionality-fixed.t.sol

Running forge test: 5.11-Redundant-Functionality-fixed.t.sol (attempt 1)
Passed: 5.11-Redundant-Functionality-fixed.t.sol
Test file not found, generating first: 5.11-Redundant-Functionality-vulnerability.t.sol

Running forge test: 5.11-Redundant-Functionality-vulnerability.t.sol (attempt 1)
Passed: 5.11-Redundant-Functionality-vulnerability.t.sol
Test file not found, generating first: 5.12-Shadowing-fixed.t.sol

Running forge test: 5.12-Shadowing-fixed.t.sol (attempt 1)
Passed: 5.12-Shadowing-fixed.t.sol
Test file not found, generating first: 5.12-Shadowing-vulnerability.t.sol

Running forge test: 5.12-Shadowing-vulnerability.t.sol (attempt 1)
Passed: 5.12-Shadowing-vulnerability.t.sol
Test file not found, generating first: 5.12.1-Use-of-Same-Variable-or-Function-Name-In-Inherited-Contract-fixed.t.sol

Running forge test: 5.12.1-Use-of-Same-Variable-or-Function-Name-In-Inherited-Contract-fixed.t.sol (attempt 1)
Passed: 5.12.1-Use-of-Same-Variable-or-Function-Name-In-Inherited-Contract-fixed.t.sol
Test file not found, generating first: 5.12.1-Use-of-Same-Variable-or-Function-Name-In-Inherited-Contract-vulnerability.t.sol

Running forge test: 5.12.1-Use-of-Same-Variable-or-Function-Name-In-Inherited-Contract-vulnerability.t.sol (attempt 1)
Passed: 5.12.1-Use-of-Same-Variable-or-Function-Name-In-Inherited-Contract-vulnerability.t.sol
Test file not found, generating first: 5.12.2-Variables-or-Functions-Named-After-Reserved-Words-fixed.t.sol

Running forge test: 5.12.2-Variables-or-Functions-Named-After-Reserved-Words-fixed.t.sol (attempt 1)
Passed: 5.12.2-Variables-or-Functions-Named-After-Reserved-Words-fixed.t.sol
Test file not found, generating first: 5.12.2-Variables-or-Functions-Named-After-Reserved-Words-vulnerability.t.sol

Running forge test: 5.12.2-Variables-or-Functions-Named-After-Reserved-Words-vulnerability.t.sol (attempt 1)
Passed: 5.12.2-Variables-or-Functions-Named-After-Reserved-Words-vulnerability.t.sol
Test file not found, generating first: 5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-fixed.t.sol

Running forge test: 5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-fixed.t.sol (attempt 1)
Passed: 5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-fixed.t.sol
Test file not found, generating first: 5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol

Running forge test: 5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol (attempt 1)
Failed: 5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 335.08ms
Compiler run successful with warnings:
Warning (2519): This declaration shadows an existing declaration.
  --> test/5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol:14:33:
   |
14 |     function sensitive_function(address owner) public {
   |                                 ^^^^^^^^^^^^^
Note: The shadowed declaration is here:
 --> test/5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol:7:5:
  |
7 |     address public owner;
  |     ^^^^^^^^^^^^^^^^^^^^

Warning (2018): Function state mutability can be restricted to view
  --> test/5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol:14:5:
   |
14 |     function sensitive_function(address owner) public {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2018): Function state mutability can be restricted to view
  --> test/5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol:20:5:
   |
20 |     function alternate_sensitive_function() public {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 4 tests for test/5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol:BugVulnerableTest
[PASS] testAlternateSensitiveFunction() (gas: 5428)
Traces:
  [5428] BugVulnerableTest::testAlternateSensitiveFunction()
    ├─ [0] VM::prank(0x00000000000000000000000000000000000000C8)
    │   └─ ← [Return] 
    ├─ [168] BugVulnerable::alternate_sensitive_function()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

[FAIL: revert: Not authorized] testAttackContract() (gas: 8630)
Traces:
  [389864] BugVulnerableTest::setUp()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000000064)
    │   └─ ← [Return] 
    ├─ [170862] → new BugVulnerable@0x86C56C43a1D19B06D54971C467bad4b25e4eF59e
    │   └─ ← [Return] 749 bytes of code
    ├─ [0] VM::prank(0x00000000000000000000000000000000000000C8)
    │   └─ ← [Return] 
    ├─ [121370] → new AttackVulnerable@0xF3Cf43F77e2d81C61aD3e1F54549253fD5AD1FeD
    │   └─ ← [Return] 500 bytes of code
    └─ ← [Stop] 

  [8630] BugVulnerableTest::testAttackContract()
    ├─ [0] VM::prank(0x00000000000000000000000000000000000000C8)
    │   └─ ← [Return] 
    ├─ [3476] AttackVulnerable::attack()
    │   ├─ [747] BugVulnerable::sensitive_function(0x00000000000000000000000000000000000000C8)
    │   │   └─ ← [Revert] revert: Not authorized
    │   └─ ← [Revert] revert: Not authorized
    └─ ← [Revert] revert: Not authorized

[PASS] testSensitiveFunctionByNonOwner() (gas: 13263)
Traces:
  [13263] BugVulnerableTest::testSensitiveFunctionByNonOwner()
    ├─ [0] VM::prank(0x00000000000000000000000000000000000000C8)
    │   └─ ← [Return] 
    ├─ [489] BugVulnerable::sensitive_function(0x00000000000000000000000000000000000000C8)
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000000064)
    │   └─ ← [Return] 
    ├─ [489] BugVulnerable::sensitive_function(0x0000000000000000000000000000000000000064)
    │   └─ ← [Stop] 
    └─ ← [Stop] 

[PASS] testSensitiveFunctionWithIncorrectParameterReverts() (gas: 8320)
Traces:
  [8320] BugVulnerableTest::testSensitiveFunctionWithIncorrectParameterReverts()
    ├─ [0] VM::prank(0x00000000000000000000000000000000000000C8)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Not authorized)
    │   └─ ← [Return] 
    ├─ [747] BugVulnerable::sensitive_function(0x00000000000000000000000000000000000003E7)
    │   └─ ← [Revert] revert: Not authorized
    └─ ← [Stop] 

Suite result: FAILED. 3 passed; 1 failed; 0 skipped; finished in 713.51µs (256.13µs CPU time)

Ran 1 test suite in 566.84ms (713.51µs CPU time): 3 tests passed, 1 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 1 failing test in test/5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol:BugVulnerableTest
[FAIL: revert: Not authorized] testAttackContract() (gas: 8630)

Encountered a total of 1 failing tests, 3 tests succeeded
Regenerating: 5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol

Running forge test: 5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol (attempt 2)
Passed: 5.12.3-Use-of-the-Same-Variable-or-Function-Name-In-a-Single-Contract-vulnerability.t.sol
Test file not found, generating first: 5.13-Bufer-Based-Vulnerabilities-fixed.t.sol

Running forge test: 5.13-Bufer-Based-Vulnerabilities-fixed.t.sol (attempt 1)
Passed: 5.13-Bufer-Based-Vulnerabilities-fixed.t.sol
Test file not found, generating first: 5.13-Bufer-Based-Vulnerabilities-vulnerability.t.sol

Running forge test: 5.13-Bufer-Based-Vulnerabilities-vulnerability.t.sol (attempt 1)
Passed: 5.13-Bufer-Based-Vulnerabilities-vulnerability.t.sol
Test file not found, generating first: 5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol

Running forge test: 5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol (attempt 1)
Failed: 5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol
Error:
Compiler run failed:
Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
  --> test/5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol:59:13:
   |
59 |             fail("Attack should not revert since recursion vulnerability has been fixed");
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
  --> test/5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol:68:13:
   |
68 |             fail("Direct call to b() should not revert because the recursion vulnerability has been fixed");
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (2271): Operator + not compatible with types literal_string "Call number " and string memory
  --> test/5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol:78:22:
   |
78 |                 fail("Call number " + vm.toString(i) + " should not revert; recursion vulnerability seems present");
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (2271): Operator + not compatible with types literal_string "Call number " and literal_string " should not revert; recursion vulnerability seems present"
  --> test/5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol:78:22:
   |
78 |                 fail("Call number " + vm.toString(i) + " should not revert; recursion vulnerability seems present");
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
  --> test/5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol:78:17:
   |
78 |                 fail("Call number " + vm.toString(i) + " should not revert; recursion vulnerability seems present");
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol

Running forge test: 5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol (attempt 2)
Failed: 5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.13.1-Stack-based-Buffer-Overflow-fixed.sol" not found: File not found.
 --> test/5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol:6:1:
  |
6 | import "../5.13.1-Stack-based-Buffer-Overflow-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol

Running forge test: 5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol (attempt 3)
Passed: 5.13.1-Stack-based-Buffer-Overflow-fixed.t.sol
Test file not found, generating first: 5.13.1-Stack-based-Buffer-Overflow-vulnerability.t.sol

Running forge test: 5.13.1-Stack-based-Buffer-Overflow-vulnerability.t.sol (attempt 1)
Passed: 5.13.1-Stack-based-Buffer-Overflow-vulnerability.t.sol
Test file not found, generating first: 5.13.2-Write-to-Arbitrary-Storage-Location-fixed.t.sol

Running forge test: 5.13.2-Write-to-Arbitrary-Storage-Location-fixed.t.sol (attempt 1)
Passed: 5.13.2-Write-to-Arbitrary-Storage-Location-fixed.t.sol
Test file not found, generating first: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol

Running forge test: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol (attempt 1)
Failed: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 349.08ms
Compiler run successful!

Ran 3 tests for test/5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol:WalletVulnerabilityTest
[PASS] testCannotPopBonusCodeIfNotEmpty() (gas: 55278)
Traces:
  [55278] WalletVulnerabilityTest::testCannotPopBonusCodeIfNotEmpty()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [41395] Wallet::PushBonusCode(42)
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  %Not allowed: bonusCodes must be empty)
    │   └─ ← [Return] 
    ├─ [1253] Wallet::PopBonusCode()
    │   └─ ← [Revert] revert: Not allowed: bonusCodes must be empty
    └─ ← [Stop] 

[FAIL: panic: arithmetic underflow or overflow (0x11)] testDirectExploit() (gas: 34696)
Traces:
  [297348] WalletVulnerabilityTest::setUp()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [256341] → new Wallet@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 1176 bytes of code
    └─ ← [Stop] 

  [34696] WalletVulnerabilityTest::testDirectExploit()
    ├─ [1236] Wallet::owner() [staticcall]
    │   └─ ← [Return] 0x000000000000000000000000000000000000bEEF
    ├─ [0] VM::assertEq(0x000000000000000000000000000000000000bEEF, 0x000000000000000000000000000000000000bEEF, "Initial owner should be deployer") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001337)
    │   └─ ← [Return] 
    ├─ [21792] Wallet::PopBonusCode()
    │   └─ ← [Stop] 
    └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)

[FAIL: panic: arithmetic underflow or overflow (0x11)] testExploitToOverwriteOwner() (gas: 264834)
Traces:
  [297348] WalletVulnerabilityTest::setUp()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [256341] → new Wallet@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 1176 bytes of code
    └─ ← [Stop] 

  [264834] WalletVulnerabilityTest::testExploitToOverwriteOwner()
    ├─ [1236] Wallet::owner() [staticcall]
    │   └─ ← [Return] 0x000000000000000000000000000000000000bEEF
    ├─ [0] VM::assertEq(0x000000000000000000000000000000000000bEEF, 0x000000000000000000000000000000000000bEEF, "Initial owner should be deployer") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001337)
    │   └─ ← [Return] 
    ├─ [192480] → new Attack@0x03F1B4380995Fbf41652F75a38c9F74aD8aD73F5
    │   └─ ← [Return] 855 bytes of code
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001337)
    │   └─ ← [Return] 
    ├─ [24755] Attack::attack()
    │   ├─ [21792] Wallet::PopBonusCode()
    │   │   └─ ← [Stop] 
    │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 620.52µs (384.36µs CPU time)

Ran 1 test suite in 505.92ms (620.52µs CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol:WalletVulnerabilityTest
[FAIL: panic: arithmetic underflow or overflow (0x11)] testDirectExploit() (gas: 34696)
[FAIL: panic: arithmetic underflow or overflow (0x11)] testExploitToOverwriteOwner() (gas: 264834)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol

Running forge test: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol (attempt 2)
Failed: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.sol" not found: File not found.
 --> test/5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol:6:1:
  |
6 | import "../5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol

Running forge test: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol (attempt 3)
Failed: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 348.85ms
Compiler run successful!

Ran 2 tests for test/5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol:VulnerabilityTest
[FAIL: panic: arithmetic underflow or overflow (0x11)] testExploit() (gas: 34991)
Traces:
  [541457] VulnerabilityTest::setUp()
    ├─ [256341] → new Wallet@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1176 bytes of code
    ├─ [192480] → new Attack@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 855 bytes of code
    └─ ← [Stop] 

  [34991] VulnerabilityTest::testExploit()
    ├─ [1236] Wallet::owner() [staticcall]
    │   └─ ← [Return] VulnerabilityTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]
    ├─ [0] VM::assertEq(VulnerabilityTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], VulnerabilityTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001337)
    │   └─ ← [Return] 
    ├─ [24755] Attack::attack()
    │   ├─ [21792] Wallet::PopBonusCode()
    │   │   └─ ← [Stop] 
    │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)

[PASS] testPopBonusCodeRevertWhenNotEmpty() (gas: 50103)
Traces:
  [50103] VulnerabilityTest::testPopBonusCodeRevertWhenNotEmpty()
    ├─ [41395] Wallet::PushBonusCode(123)
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  %Not allowed: bonusCodes must be empty)
    │   └─ ← [Return] 
    ├─ [1253] Wallet::PopBonusCode()
    │   └─ ← [Revert] revert: Not allowed: bonusCodes must be empty
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 1.42ms (757.17µs CPU time)

Ran 1 test suite in 541.51ms (1.42ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol:VulnerabilityTest
[FAIL: panic: arithmetic underflow or overflow (0x11)] testExploit() (gas: 34991)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol

Running forge test: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol (attempt 4)
Failed: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.sol" not found: File not found.
 --> test/5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol:6:1:
  |
6 | import "../5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol

Running forge test: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol (attempt 5)
Failed: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol
Error:
Compiler run failed:
Error (6160): Wrong argument count for function call: 0 arguments given but expected 1.
  --> test/5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol:75:31:
   |
75 |         uint[] memory codes = wallet.bonusCodes(); // not directly accessible but we assume its empty
   |                               ^^^^^^^^^^^^^^^^^^^

Error (9574): Type uint256 is not implicitly convertible to expected type uint256[] memory.
  --> test/5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol:75:9:
   |
75 |         uint[] memory codes = wallet.bonusCodes(); // not directly accessible but we assume its empty
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol
Failed after 5 attempts: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol
Deleted test file due to repeated failure: 5.13.2-Write-to-Arbitrary-Storage-Location-vulnerability.t.sol
Test file not found, generating first: 5.13.3-Read-from-Arbitrary-Storage-Location-fixed.t.sol

Running forge test: 5.13.3-Read-from-Arbitrary-Storage-Location-fixed.t.sol (attempt 1)
Passed: 5.13.3-Read-from-Arbitrary-Storage-Location-fixed.t.sol
Test file not found, generating first: 5.13.3-Read-from-Arbitrary-Storage-Location-vulnerability.t.sol

Running forge test: 5.13.3-Read-from-Arbitrary-Storage-Location-vulnerability.t.sol (attempt 1)
Passed: 5.13.3-Read-from-Arbitrary-Storage-Location-vulnerability.t.sol
Test file not found, generating first: 5.14-Use-of-Malicious-Libraries-fixed.t.sol

Running forge test: 5.14-Use-of-Malicious-Libraries-fixed.t.sol (attempt 1)
Passed: 5.14-Use-of-Malicious-Libraries-fixed.t.sol
Test file not found, generating first: 5.14-Use-of-Malicious-Libraries-vulnerability.t.sol

Running forge test: 5.14-Use-of-Malicious-Libraries-vulnerability.t.sol (attempt 1)
Passed: 5.14-Use-of-Malicious-Libraries-vulnerability.t.sol
Test file not found, generating first: 5.15-Typographical-Error-fixed.t.sol

Running forge test: 5.15-Typographical-Error-fixed.t.sol (attempt 1)
Failed: 5.15-Typographical-Error-fixed.t.sol
Error:
Compiler run failed:
Error (9182): Function, variable, struct or modifier declaration expected.
  --> test/5.15-Typographical-Error-fixed.t.sol:38:5:
   |
38 |     contract TypoOneCommandFixed {
   |     ^^^^^^^^

Error: Compilation failed
Regenerating: 5.15-Typographical-Error-fixed.t.sol

Running forge test: 5.15-Typographical-Error-fixed.t.sol (attempt 2)
Passed: 5.15-Typographical-Error-fixed.t.sol
Test file not found, generating first: 5.15-Typographical-Error-vulnerability.t.sol

Running forge test: 5.15-Typographical-Error-vulnerability.t.sol (attempt 1)
Failed: 5.15-Typographical-Error-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 350.86ms
Compiler run successful!

Ran 1 test for test/5.15-Typographical-Error-vulnerability.t.sol:TypoOneCommandVulnerableTest
[FAIL: `testFail*` has been removed. Consider changing to test_Revert[If|When]_Condition and expecting a revert] Found 1 instances: testFailedAccumulationLogic (gas: 0)
Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 219.39µs (0.00ns CPU time)

Ran 1 test suite in 10.55ms (219.39µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/5.15-Typographical-Error-vulnerability.t.sol:TypoOneCommandVulnerableTest
[FAIL: `testFail*` has been removed. Consider changing to test_Revert[If|When]_Condition and expecting a revert] Found 1 instances: testFailedAccumulationLogic (gas: 0)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 5.15-Typographical-Error-vulnerability.t.sol

Running forge test: 5.15-Typographical-Error-vulnerability.t.sol (attempt 2)
Passed: 5.15-Typographical-Error-vulnerability.t.sol
Test file not found, generating first: 5.16-Wrong-Logic-fixed.t.sol

Running forge test: 5.16-Wrong-Logic-fixed.t.sol (attempt 1)
Failed: 5.16-Wrong-Logic-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/5.16-Wrong-Logic-fixed.t.sol:9:28:
  |
9 |     WrongLogicFixed public fixed;
  |                            ^^^^^

Error: Compilation failed
Regenerating: 5.16-Wrong-Logic-fixed.t.sol

Running forge test: 5.16-Wrong-Logic-fixed.t.sol (attempt 2)
Failed: 5.16-Wrong-Logic-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.16-Wrong-Logic-fixed.sol" not found: File not found.
 --> test/5.16-Wrong-Logic-fixed.t.sol:4:1:
  |
4 | import "../5.16-Wrong-Logic-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.16-Wrong-Logic-fixed.t.sol

Running forge test: 5.16-Wrong-Logic-fixed.t.sol (attempt 3)
Failed: 5.16-Wrong-Logic-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 359.62ms
Compiler run successful!

Ran 2 tests for test/5.16-Wrong-Logic-fixed.t.sol:WrongLogicFixedTest
[PASS] testAttackerClaim() (gas: 523919)
Traces:
  [523919] WrongLogicFixedTest::testAttackerClaim()
    ├─ [241845] → new WrongLogicFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1108 bytes of code
    ├─ [133382] → new AttackWrongLogicFixed@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 560 bytes of code
    ├─ [33769] AttackWrongLogicFixed::attack()
    │   ├─ [31253] WrongLogicFixed::claimReward()
    │   │   ├─ [55] AttackWrongLogicFixed::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Already claimed reward)
    │   └─ ← [Return] 
    ├─ [3897] AttackWrongLogicFixed::attack()
    │   ├─ [1371] WrongLogicFixed::claimReward()
    │   │   └─ ← [Revert] revert: Already claimed reward
    │   └─ ← [Revert] revert: Already claimed reward
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Attacker should have received 1 ether reward") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(WrongLogicFixedTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   └─ ← [Return] 
    ├─ [7682] AttackWrongLogicFixed::withdraw()
    │   ├─ [55] WrongLogicFixedTest::receive{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(79228162511264337593543950335 [7.922e28], 79228162511264337593543950335 [7.922e28], "Withdrawal should transfer the reward to the caller") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testRepeatedClaim() (gas: 39776)
Traces:
  [280260] WrongLogicFixedTest::setUp()
    ├─ [241845] → new WrongLogicFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1108 bytes of code
    └─ ← [Stop] 

  [39776] WrongLogicFixedTest::testRepeatedClaim()
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [33502] WrongLogicFixed::claimReward()
    │   ├─ [0] ECRecover::fallback{value: 1000000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 618.81µs (388.63µs CPU time)

Ran 1 test suite in 512.44ms (618.81µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/5.16-Wrong-Logic-fixed.t.sol:WrongLogicFixedTest
[FAIL: EvmError: Revert] testRepeatedClaim() (gas: 39776)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 5.16-Wrong-Logic-fixed.t.sol

Running forge test: 5.16-Wrong-Logic-fixed.t.sol (attempt 4)
Failed: 5.16-Wrong-Logic-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 361.94ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
  --> test/5.16-Wrong-Logic-fixed.t.sol:85:9:
   |
85 |         uint initialTestBalance = address(this).balance;
   |         ^^^^^^^^^^^^^^^^^^^^^^^


Ran 2 tests for test/5.16-Wrong-Logic-fixed.t.sol:WrongLogicFixedTest
[FAIL: vm.prank: cannot overwrite a prank until it is applied at least once] testAttackerClaim() (gas: 218294)
Traces:
  [281060] WrongLogicFixedTest::setUp()
    ├─ [241845] → new WrongLogicFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1108 bytes of code
    └─ ← [Stop] 

  [218294] WrongLogicFixedTest::testAttackerClaim()
    ├─ [133382] → new AttackWrongLogicFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 560 bytes of code
    ├─ [33769] AttackWrongLogicFixed::attack()
    │   ├─ [31253] WrongLogicFixed::claimReward()
    │   │   ├─ [55] AttackWrongLogicFixed::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Attacker should have received 1 ether reward") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Already claimed reward)
    │   └─ ← [Return] 
    ├─ [3897] AttackWrongLogicFixed::attack()
    │   ├─ [1371] WrongLogicFixed::claimReward()
    │   │   └─ ← [Revert] revert: Already claimed reward
    │   └─ ← [Revert] revert: Already claimed reward
    ├─ [0] VM::prank(AttackWrongLogicFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 0)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Revert] vm.prank: cannot overwrite a prank until it is applied at least once
    └─ ← [Revert] vm.prank: cannot overwrite a prank until it is applied at least once

[PASS] testRepeatedClaim() (gas: 191904)
Traces:
  [191904] WrongLogicFixedTest::testRepeatedClaim()
    ├─ [112007] → new MockUser@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 453 bytes of code
    ├─ [0] VM::prank(MockUser: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [33747] MockUser::claimReward()
    │   ├─ [31253] WrongLogicFixed::claimReward()
    │   │   ├─ [55] MockUser::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(MockUser: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Already claimed reward)
    │   └─ ← [Return] 
    ├─ [3875] MockUser::claimReward()
    │   ├─ [1371] WrongLogicFixed::claimReward()
    │   │   └─ ← [Revert] revert: Already claimed reward
    │   └─ ← [Revert] revert: Already claimed reward
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 1.77ms (1.27ms CPU time)

Ran 1 test suite in 545.13ms (1.77ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/5.16-Wrong-Logic-fixed.t.sol:WrongLogicFixedTest
[FAIL: vm.prank: cannot overwrite a prank until it is applied at least once] testAttackerClaim() (gas: 218294)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 5.16-Wrong-Logic-fixed.t.sol

Running forge test: 5.16-Wrong-Logic-fixed.t.sol (attempt 5)
Passed: 5.16-Wrong-Logic-fixed.t.sol
Test file not found, generating first: 5.16-Wrong-Logic-vulnerability.t.sol

Running forge test: 5.16-Wrong-Logic-vulnerability.t.sol (attempt 1)
Failed: 5.16-Wrong-Logic-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 336.73ms
Compiler run successful!

Ran 2 tests for test/5.16-Wrong-Logic-vulnerability.t.sol:VulnerabilityTest
[PASS] testExploitDraining() (gas: 87641)
Traces:
  [87641] VulnerabilityTest::testExploitDraining()
    ├─ [0] VM::prank(AttackWrongLogic: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [59929] AttackWrongLogic::attack(5)
    │   ├─ [9352] WrongLogicVulnerable::claimReward()
    │   │   ├─ [55] AttackWrongLogic::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   ├─ [9352] WrongLogicVulnerable::claimReward()
    │   │   ├─ [55] AttackWrongLogic::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   ├─ [9352] WrongLogicVulnerable::claimReward()
    │   │   ├─ [55] AttackWrongLogic::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   ├─ [9352] WrongLogicVulnerable::claimReward()
    │   │   ├─ [55] AttackWrongLogic::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   ├─ [9352] WrongLogicVulnerable::claimReward()
    │   │   ├─ [55] AttackWrongLogic::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(0, 0, "Vulnerable contract is not drained") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(AttackWrongLogic: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [7682] AttackWrongLogic::withdraw()
    │   ├─ [55] AttackWrongLogic::receive{value: 6000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(6000000000000000000 [6e18], 6000000000000000000 [6e18], "Attacker did not receive the correct reward") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testInsufficientBalanceRevert() (gas: 249546)
Traces:
  [458878] VulnerabilityTest::setUp()
    ├─ [177184] → new WrongLogicVulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 785 bytes of code
    ├─ [186431] → new AttackWrongLogic@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 825 bytes of code
    ├─ [0] VM::deal(AttackWrongLogic: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [249546] VulnerabilityTest::testInsufficientBalanceRevert()
    ├─ [177184] → new WrongLogicVulnerable@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 785 bytes of code
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [36601] WrongLogicVulnerable::claimReward()
    │   ├─ [0] ECRecover::fallback{value: 1000000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 1.66ms (765.66µs CPU time)

Ran 1 test suite in 544.64ms (1.66ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/5.16-Wrong-Logic-vulnerability.t.sol:VulnerabilityTest
[FAIL: EvmError: Revert] testInsufficientBalanceRevert() (gas: 249546)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 5.16-Wrong-Logic-vulnerability.t.sol

Running forge test: 5.16-Wrong-Logic-vulnerability.t.sol (attempt 2)
Passed: 5.16-Wrong-Logic-vulnerability.t.sol
Test file not found, generating first: 5.17-Wrong-moment-for-token-generation-fixed.t.sol

Running forge test: 5.17-Wrong-moment-for-token-generation-fixed.t.sol (attempt 1)
Failed: 5.17-Wrong-moment-for-token-generation-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 350.00ms
Compiler run successful!

Ran 3 tests for test/5.17-Wrong-moment-for-token-generation-fixed.t.sol:FixedTokenSaleTest
[FAIL: assertion failed: 0 != 2] testAttackCannotMintToArbitraryAddress() (gas: 52077)
Traces:
  [600577] FixedTokenSaleTest::setUp()
    ├─ [212038] → new FixedTokenSale@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 959 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [290576] → new AttackFixed@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1241 bytes of code
    └─ ← [Stop] 

  [52077] FixedTokenSaleTest::testAttackCannotMintToArbitraryAddress()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [33180] AttackFixed::attack{value: 2000000000000000000}()
    │   ├─ [23070] FixedTokenSale::buyTokens{value: 2000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1492] FixedTokenSale::balances(0x000000000000000000000000000000000000ABcD) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 2) [staticcall]
    │   └─ ← [Revert] assertion failed: 0 != 2
    └─ ← [Revert] assertion failed: 0 != 2

[PASS] testBuyTokensFailsInsufficientEther() (gas: 12333)
Traces:
  [12333] FixedTokenSaleTest::testBuyTokensFailsInsufficientEther()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient Ether)
    │   └─ ← [Return] 
    ├─ [1227] FixedTokenSale::buyTokens{value: 500000000000000000}()
    │   └─ ← [Revert] revert: Insufficient Ether
    └─ ← [Stop] 

[PASS] testBuyTokensMintsToSender() (gas: 44861)
Traces:
  [44861] FixedTokenSaleTest::testBuyTokensMintsToSender()
    ├─ [1492] FixedTokenSale::balances(FixedTokenSaleTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return] 
    ├─ [23070] FixedTokenSale::buyTokens{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1492] FixedTokenSale::balances(FixedTokenSaleTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 2.84ms (2.19ms CPU time)

Ran 1 test suite in 539.88ms (2.84ms CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/5.17-Wrong-moment-for-token-generation-fixed.t.sol:FixedTokenSaleTest
[FAIL: assertion failed: 0 != 2] testAttackCannotMintToArbitraryAddress() (gas: 52077)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 5.17-Wrong-moment-for-token-generation-fixed.t.sol

Running forge test: 5.17-Wrong-moment-for-token-generation-fixed.t.sol (attempt 2)
Passed: 5.17-Wrong-moment-for-token-generation-fixed.t.sol
Test file not found, generating first: 5.17-Wrong-moment-for-token-generation-vulnerability.t.sol

Running forge test: 5.17-Wrong-moment-for-token-generation-vulnerability.t.sol (attempt 1)
Failed: 5.17-Wrong-moment-for-token-generation-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 355.60ms
Compiler run successful!

Ran 3 tests for test/5.17-Wrong-moment-for-token-generation-vulnerability.t.sol:VulnerableTokenSaleTest
[FAIL: EvmError: Revert] testAttackVulnerability() (gas: 17080)
Traces:
  [610662] VulnerableTokenSaleTest::setUp()
    ├─ [215844] → new VulnerableTokenSale@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 978 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [299589] → new AttackVulnerable@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1286 bytes of code
    └─ ← [Stop] 

  [17080] VulnerableTokenSaleTest::testAttackVulnerability()
    ├─ [1492] VulnerableTokenSale::balances(0x000000000000000000000000000000000000ABcD) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [0] AttackVulnerable::attack{value: 2000000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testExploitUsingWrongBeneficiaryByThirdParty() (gas: 12931)
Traces:
  [610662] VulnerableTokenSaleTest::setUp()
    ├─ [215844] → new VulnerableTokenSale@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 978 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [299589] → new AttackVulnerable@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1286 bytes of code
    └─ ← [Stop] 

  [12931] VulnerableTokenSaleTest::testExploitUsingWrongBeneficiaryByThirdParty()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VulnerableTokenSale::buyTokens{value: 1000000000000000000}(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[PASS] testInsufficientEtherReverts() (gas: 13655)
Traces:
  [13655] VulnerableTokenSaleTest::testInsufficientEtherReverts()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient Ether)
    │   └─ ← [Return] 
    ├─ [1536] VulnerableTokenSale::buyTokens{value: 500000000000000000}(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Revert] revert: Insufficient Ether
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 616.37µs (322.42µs CPU time)

Ran 1 test suite in 520.86ms (616.37µs CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/5.17-Wrong-moment-for-token-generation-vulnerability.t.sol:VulnerableTokenSaleTest
[FAIL: EvmError: Revert] testAttackVulnerability() (gas: 17080)
[FAIL: EvmError: Revert] testExploitUsingWrongBeneficiaryByThirdParty() (gas: 12931)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 5.17-Wrong-moment-for-token-generation-vulnerability.t.sol

Running forge test: 5.17-Wrong-moment-for-token-generation-vulnerability.t.sol (attempt 2)
Passed: 5.17-Wrong-moment-for-token-generation-vulnerability.t.sol
Test file not found, generating first: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol

Running forge test: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol (attempt 1)
Failed: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 335.54ms
Compiler run successful!

Ran 5 tests for test/5.2-Improper-Declaration-or-Initialization-fixed.t.sol:FixedContractTest
[PASS] testAttackerCannotReinitialize() (gas: 34669)
Traces:
  [34669] FixedContractTest::testAttackerCannotReinitialize()
    ├─ [23633] FixedContract::initialize()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Already initialized)
    │   └─ ← [Return] 
    ├─ [1310] FixedContract::initialize()
    │   └─ ← [Revert] revert: Already initialized
    └─ ← [Stop] 

[PASS] testDoubleInitializationReverts() (gas: 32115)
Traces:
  [32115] FixedContractTest::testDoubleInitializationReverts()
    ├─ [23633] FixedContract::initialize()
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Already initialized)
    │   └─ ← [Return] 
    ├─ [1310] FixedContract::initialize()
    │   └─ ← [Revert] revert: Already initialized
    └─ ← [Stop] 

[PASS] testFirstInitialization() (gas: 33532)
Traces:
  [33532] FixedContractTest::testFirstInitialization()
    ├─ [23633] FixedContract::initialize()
    │   └─ ← [Stop] 
    ├─ [1233] FixedContract::owner() [staticcall]
    │   └─ ← [Return] FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]
    ├─ [0] VM::assertEq(FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], "Owner should be the initializer") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: revert: Deposit failed] testWithdrawByNonOwnerFails() (gas: 37930)
Traces:
  [236820] FixedContractTest::setUp()
    ├─ [198438] → new FixedContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 991 bytes of code
    └─ ← [Stop] 

  [37930] FixedContractTest::testWithdrawByNonOwnerFails()
    ├─ [23633] FixedContract::initialize()
    │   └─ ← [Stop] 
    ├─ [0] VM::deal(FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [62] FixedContract::fallback{value: 1000000000000000000}(0x3078)
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] revert: Deposit failed

[PASS] testWithdrawByOwnerAfterInitialization() (gas: 54854)
Traces:
  [54854] FixedContractTest::testWithdrawByOwnerAfterInitialization()
    ├─ [23633] FixedContract::initialize()
    │   └─ ← [Stop] 
    ├─ [0] VM::deal(FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [55] FixedContract::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [9383] FixedContract::withdraw()
    │   ├─ [55] FixedContractTest::receive{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertTrue(true, "Owner should receive withdrawn funds") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 4 passed; 1 failed; 0 skipped; finished in 753.34µs (818.87µs CPU time)

Ran 1 test suite in 463.14ms (753.34µs CPU time): 4 tests passed, 1 failed, 0 skipped (5 total tests)

Failing tests:
Encountered 1 failing test in test/5.2-Improper-Declaration-or-Initialization-fixed.t.sol:FixedContractTest
[FAIL: revert: Deposit failed] testWithdrawByNonOwnerFails() (gas: 37930)

Encountered a total of 1 failing tests, 4 tests succeeded
Regenerating: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol

Running forge test: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol (attempt 2)
Failed: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 340.23ms
Compiler run successful!

Ran 5 tests for test/5.2-Improper-Declaration-or-Initialization-fixed.t.sol:FixedContractTest
[PASS] testAttackerCannotReinitialize() (gas: 34316)
Traces:
  [34316] FixedContractTest::testAttackerCannotReinitialize()
    ├─ [23633] FixedContract::initialize()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Already initialized)
    │   └─ ← [Return] 
    ├─ [1310] FixedContract::initialize()
    │   └─ ← [Revert] revert: Already initialized
    └─ ← [Stop] 

[PASS] testDoubleInitializationReverts() (gas: 31762)
Traces:
  [31762] FixedContractTest::testDoubleInitializationReverts()
    ├─ [23633] FixedContract::initialize()
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Already initialized)
    │   └─ ← [Return] 
    ├─ [1310] FixedContract::initialize()
    │   └─ ← [Revert] revert: Already initialized
    └─ ← [Stop] 

[PASS] testFirstInitialization() (gas: 32695)
Traces:
  [32695] FixedContractTest::testFirstInitialization()
    ├─ [23633] FixedContract::initialize()
    │   └─ ← [Stop] 
    ├─ [1233] FixedContract::owner() [staticcall]
    │   └─ ← [Return] FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]
    ├─ [0] VM::assertEq(FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], "Owner should be the initializer") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testWithdrawByNonOwnerFails() (gas: 46291)
Traces:
  [46291] FixedContractTest::testWithdrawByNonOwnerFails()
    ├─ [23633] FixedContract::initialize()
    │   └─ ← [Stop] 
    ├─ [0] VM::deal(FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [164] FixedContract::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  	Not owner)
    │   └─ ← [Return] 
    ├─ [1249] FixedContract::withdraw()
    │   └─ ← [Revert] revert: Not owner
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testWithdrawByOwnerAfterInitialization() (gas: 50031)
Traces:
  [236820] FixedContractTest::setUp()
    ├─ [198438] → new FixedContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 991 bytes of code
    └─ ← [Stop] 

  [50031] FixedContractTest::testWithdrawByOwnerAfterInitialization()
    ├─ [23633] FixedContract::initialize()
    │   └─ ← [Stop] 
    ├─ [0] VM::deal(FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [164] FixedContract::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [9377] FixedContract::withdraw()
    │   ├─ [45] FixedContractTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 4 passed; 1 failed; 0 skipped; finished in 892.63µs (1.35ms CPU time)

Ran 1 test suite in 496.55ms (892.63µs CPU time): 4 tests passed, 1 failed, 0 skipped (5 total tests)

Failing tests:
Encountered 1 failing test in test/5.2-Improper-Declaration-or-Initialization-fixed.t.sol:FixedContractTest
[FAIL: EvmError: Revert] testWithdrawByOwnerAfterInitialization() (gas: 50031)

Encountered a total of 1 failing tests, 4 tests succeeded
Regenerating: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol

Running forge test: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol (attempt 3)
Failed: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.2-Improper-Declaration-or-Initialization-fixed.sol" not found: File not found.
 --> test/5.2-Improper-Declaration-or-Initialization-fixed.t.sol:6:1:
  |
6 | import "../5.2-Improper-Declaration-or-Initialization-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol

Running forge test: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol (attempt 4)
Passed: 5.2-Improper-Declaration-or-Initialization-fixed.t.sol
Test file not found, generating first: 5.2-Improper-Declaration-or-Initialization-vulnerability.t.sol

Running forge test: 5.2-Improper-Declaration-or-Initialization-vulnerability.t.sol (attempt 1)
Passed: 5.2-Improper-Declaration-or-Initialization-vulnerability.t.sol
Test file not found, generating first: 5.2.1-Missing-Constructor-fixed.t.sol

Running forge test: 5.2.1-Missing-Constructor-fixed.t.sol (attempt 1)
Passed: 5.2.1-Missing-Constructor-fixed.t.sol
Test file not found, generating first: 5.2.1-Missing-Constructor-vulnerability.t.sol

Running forge test: 5.2.1-Missing-Constructor-vulnerability.t.sol (attempt 1)
Passed: 5.2.1-Missing-Constructor-vulnerability.t.sol
Test file not found, generating first: 5.2.2-Wrong-Constructor-Name-fixed.t.sol

Running forge test: 5.2.2-Wrong-Constructor-Name-fixed.t.sol (attempt 1)
Passed: 5.2.2-Wrong-Constructor-Name-fixed.t.sol
Test file not found, generating first: 5.2.2-Wrong-Constructor-Name-vulnerability.t.sol

Running forge test: 5.2.2-Wrong-Constructor-Name-vulnerability.t.sol (attempt 1)
Failed: 5.2.2-Wrong-Constructor-Name-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 408.37ms
Compiler run successful!

Ran 2 tests for test/5.2.2-Wrong-Constructor-Name-vulnerability.t.sol:MissingVulnerabilityTest
[PASS] testAttackContractExploit() (gas: 243337)
Traces:
  [243337] MissingVulnerabilityTest::testAttackContractExploit()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [137588] → new Attack@0x522B3294E6d06aA25Ad0f1B8891242E335D3B459
    │   └─ ← [Return] 581 bytes of code
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [35275] Attack::attack()
    │   ├─ [21010] Missing::Constructor()
    │   │   └─ ← [Stop] 
    │   ├─ [9383] Missing::withdraw()
    │   │   ├─ [55] Attack::receive{value: 10000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertGe(10000000000000000000 [1e19], 10000000000000000000 [1e19]) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testDirectExploit() (gas: 69380)
Traces:
  [157843] MissingVulnerabilityTest::setUp()
    ├─ [116765] → new Missing@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 583 bytes of code
    ├─ [0] VM::deal(Missing: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [69380] MissingVulnerabilityTest::testDirectExploit()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [21010] Missing::Constructor()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [36632] Missing::withdraw()
    │   ├─ [0] ECRecover::fallback{value: 10000000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 2.78ms (1.76ms CPU time)

Ran 1 test suite in 524.24ms (2.78ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/5.2.2-Wrong-Constructor-Name-vulnerability.t.sol:MissingVulnerabilityTest
[FAIL: EvmError: Revert] testDirectExploit() (gas: 69380)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 5.2.2-Wrong-Constructor-Name-vulnerability.t.sol

Running forge test: 5.2.2-Wrong-Constructor-Name-vulnerability.t.sol (attempt 2)
Passed: 5.2.2-Wrong-Constructor-Name-vulnerability.t.sol
Test file not found, generating first: 5.2.3-Missing-variable-initialization-fixed.t.sol

Running forge test: 5.2.3-Missing-variable-initialization-fixed.t.sol (attempt 1)
Failed: 5.2.3-Missing-variable-initialization-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 330.50ms
Compiler run successful!

Ran 3 tests for test/5.2.3-Missing-variable-initialization-fixed.t.sol:MissingVariableInitializationFixedTest
[PASS] testAttackTransferFunds() (gas: 317696)
Traces:
  [317696] MissingVariableInitializationFixedTest::testAttackTransferFunds()
    ├─ [0] VM::deal(RIPEMD-160: [0x0000000000000000000000000000000000000003], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(RIPEMD-160: [0x0000000000000000000000000000000000000003])
    │   └─ ← [Return] 
    ├─ [100395] → new Uninitialized@0x4859614cBE8bbe9cCAd991Cc69394343943CD52D
    │   └─ ← [Return] 397 bytes of code
    ├─ [1211] Uninitialized::destination() [staticcall]
    │   └─ ← [Return] RIPEMD-160: [0x0000000000000000000000000000000000000003]
    ├─ [0] VM::assertEq(RIPEMD-160: [0x0000000000000000000000000000000000000003], RIPEMD-160: [0x0000000000000000000000000000000000000003], "Destination mismatch in Uninitialized contract") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::deal(Identity: [0x0000000000000000000000000000000000000004], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(Identity: [0x0000000000000000000000000000000000000004])
    │   └─ ← [Return] 
    ├─ [107358] → new Attack@0x78a3d3258f9353517C4Df2E11B2a36924d97d744
    │   └─ ← [Return] 430 bytes of code
    ├─ [0] VM::prank(Identity: [0x0000000000000000000000000000000000000004])
    │   └─ ← [Return] 
    ├─ [18208] Attack::attack{value: 1000000000000000000}()
    │   ├─ [9034] Uninitialized::transfer{value: 1000000000000000000}()
    │   │   ├─ [600] PRECOMPILES::ripemd{value: 1000000000000000000}(0x)
    │   │   │   └─ ← [Return] 0x0000000000000000000000009c1185a5c5e9fc54612808977ee8f548b2258d31
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(11000000000000000000 [1.1e19], 11000000000000000000 [1.1e19], "Deployer did not receive funds from attack transfer") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testDestinationInitialization() (gas: 147330)
Traces:
  [147330] MissingVariableInitializationFixedTest::testDestinationInitialization()
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [100395] → new Uninitialized@0x522B3294E6d06aA25Ad0f1B8891242E335D3B459
    │   └─ ← [Return] 397 bytes of code
    ├─ [1211] Uninitialized::destination() [staticcall]
    │   └─ ← [Return] ECRecover: [0x0000000000000000000000000000000000000001]
    ├─ [0] VM::assertTrue(true, "Destination is zero address") [staticcall]
    │   └─ ← [Return] 
    ├─ [1211] Uninitialized::destination() [staticcall]
    │   └─ ← [Return] ECRecover: [0x0000000000000000000000000000000000000001]
    ├─ [0] VM::assertEq(ECRecover: [0x0000000000000000000000000000000000000001], ECRecover: [0x0000000000000000000000000000000000000001], "Destination should be deployer") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testTransferFunds() (gas: 165299)
Traces:
  [165299] MissingVariableInitializationFixedTest::testTransferFunds()
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [100395] → new Uninitialized@0x522B3294E6d06aA25Ad0f1B8891242E335D3B459
    │   └─ ← [Return] 397 bytes of code
    ├─ [1211] Uninitialized::destination() [staticcall]
    │   └─ ← [Return] ECRecover: [0x0000000000000000000000000000000000000001]
    ├─ [0] VM::assertEq(ECRecover: [0x0000000000000000000000000000000000000001], ECRecover: [0x0000000000000000000000000000000000000001], "Destination mismatch") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::deal(SHA-256: [0x0000000000000000000000000000000000000002], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [10738] Uninitialized::transfer{value: 1000000000000000000}()
    │   ├─ [0] ECRecover::fallback{value: 1000000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 2.36ms (2.21ms CPU time)

Ran 1 test suite in 507.13ms (2.36ms CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/5.2.3-Missing-variable-initialization-fixed.t.sol:MissingVariableInitializationFixedTest
[FAIL: EvmError: Revert] testTransferFunds() (gas: 165299)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 5.2.3-Missing-variable-initialization-fixed.t.sol

Running forge test: 5.2.3-Missing-variable-initialization-fixed.t.sol (attempt 2)
Passed: 5.2.3-Missing-variable-initialization-fixed.t.sol
Test file not found, generating first: 5.2.3-Missing-variable-initialization-vulnerability.t.sol

Running forge test: 5.2.3-Missing-variable-initialization-vulnerability.t.sol (attempt 1)
Passed: 5.2.3-Missing-variable-initialization-vulnerability.t.sol
Test file not found, generating first: 5.2.4-Uninitialized-Storage-Variables-fixed.t.sol

Running forge test: 5.2.4-Uninitialized-Storage-Variables-fixed.t.sol (attempt 1)
Failed: 5.2.4-Uninitialized-Storage-Variables-fixed.t.sol
Error:
Compiler run failed:
Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
  --> test/5.2.4-Uninitialized-Storage-Variables-fixed.t.sol:77:13:
   |
77 |             fail("attack() should have reverted");
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.2.4-Uninitialized-Storage-Variables-fixed.t.sol

Running forge test: 5.2.4-Uninitialized-Storage-Variables-fixed.t.sol (attempt 2)
Failed: 5.2.4-Uninitialized-Storage-Variables-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.2.4-Uninitialized-Storage-Variables-fixed.sol" not found: File not found.
 --> test/5.2.4-Uninitialized-Storage-Variables-fixed.t.sol:4:1:
  |
4 | import "../5.2.4-Uninitialized-Storage-Variables-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.2.4-Uninitialized-Storage-Variables-fixed.t.sol

Running forge test: 5.2.4-Uninitialized-Storage-Variables-fixed.t.sol (attempt 3)
Passed: 5.2.4-Uninitialized-Storage-Variables-fixed.t.sol
Test file not found, generating first: 5.2.4-Uninitialized-Storage-Variables-vulnerability.t.sol

Running forge test: 5.2.4-Uninitialized-Storage-Variables-vulnerability.t.sol (attempt 1)
Passed: 5.2.4-Uninitialized-Storage-Variables-vulnerability.t.sol
Test file not found, generating first: 5.2.5-Extraneous-Field-Declaration-fixed.t.sol

Running forge test: 5.2.5-Extraneous-Field-Declaration-fixed.t.sol (attempt 1)
Passed: 5.2.5-Extraneous-Field-Declaration-fixed.t.sol
Test file not found, generating first: 5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol

Running forge test: 5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol (attempt 1)
Failed: 5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol
Error:
Compiler run failed:
Error (2314): Expected ';' but got '('
  --> test/5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol:41:12:
   |
41 | error Panic(uint256);
   |            ^

Error: Compilation failed
Regenerating: 5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol

Running forge test: 5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol (attempt 2)
Failed: 5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 352.35ms
Compiler run successful!

Ran 2 tests for test/5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol:ExtraneousFieldTest
[FAIL: EvmError: Revert] testExploit() (gas: 55402)
Traces:
  [318019] ExtraneousFieldTest::setUp()
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 100000000000000000000 [1e20])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(SHA-256: [0x0000000000000000000000000000000000000002], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [271566] → new Vulnerable@0x522B3294E6d06aA25Ad0f1B8891242E335D3B459
    │   └─ ← [Return] 1156 bytes of code
    └─ ← [Stop] 

  [55402] ExtraneousFieldTest::testExploit()
    ├─ [1541] Vulnerable::getUserBalance(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 10000000000000000000 [1e19]
    ├─ [1151] Vulnerable::balance() [staticcall]
    │   └─ ← [Return] 10000000000000000000 [1e19]
    ├─ [0] VM::assertEq(10000000000000000000 [1e19], 10000000000000000000 [1e19], "Initial mapping balance should be 10 ETH") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000000 [1e19], 10000000000000000000 [1e19], "Initial extraneous field balance should be 10 ETH") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [5464] Vulnerable::setBalance(100000000000000000000 [1e20])
    │   └─ ← [Stop] 
    ├─ [1151] Vulnerable::balance() [staticcall]
    │   └─ ← [Return] 100000000000000000000 [1e20]
    ├─ [0] VM::assertEq(100000000000000000000 [1e20], 100000000000000000000 [1e20], "Extraneous field was not properly manipulated") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [19023] Vulnerable::withdraw(5000000000000000000 [5e18])
    │   ├─ [0] ECRecover::fallback{value: 5000000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] testWithdrawFailForAttacker() (gas: 19361)
Traces:
  [19361] ExtraneousFieldTest::testWithdrawFailForAttacker()
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [5464] Vulnerable::setBalance(100000000000000000000 [1e20])
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient funds)
    │   └─ ← [Return] 
    ├─ [1557] Vulnerable::withdraw(1000000000000000000 [1e18])
    │   └─ ← [Revert] revert: Insufficient funds
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 511.38µs (166.88µs CPU time)

Ran 1 test suite in 490.27ms (511.38µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol:ExtraneousFieldTest
[FAIL: EvmError: Revert] testExploit() (gas: 55402)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol

Running forge test: 5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol (attempt 3)
Passed: 5.2.5-Extraneous-Field-Declaration-vulnerability.t.sol
Test file not found, generating first: 5.2.6-Hardcoded-Address-fixed.t.sol

Running forge test: 5.2.6-Hardcoded-Address-fixed.t.sol (attempt 1)
Passed: 5.2.6-Hardcoded-Address-fixed.t.sol
Test file not found, generating first: 5.2.6-Hardcoded-Address-vulnerability.t.sol

Running forge test: 5.2.6-Hardcoded-Address-vulnerability.t.sol (attempt 1)
Passed: 5.2.6-Hardcoded-Address-vulnerability.t.sol
Test file not found, generating first: 5.3-Isolation-Phenomena-fixed.t.sol

Running forge test: 5.3-Isolation-Phenomena-fixed.t.sol (attempt 1)
Failed: 5.3-Isolation-Phenomena-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.3-Isolation-Phenomena-fixed.sol" not found: File not found.
 --> test/5.3-Isolation-Phenomena-fixed.t.sol:6:1:
  |
6 | import "../5.3-Isolation-Phenomena-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.3-Isolation-Phenomena-fixed.t.sol

Running forge test: 5.3-Isolation-Phenomena-fixed.t.sol (attempt 2)
Passed: 5.3-Isolation-Phenomena-fixed.t.sol
Test file not found, generating first: 5.3-Isolation-Phenomena-vulnerability.t.sol

Running forge test: 5.3-Isolation-Phenomena-vulnerability.t.sol (attempt 1)
Passed: 5.3-Isolation-Phenomena-vulnerability.t.sol
Test file not found, generating first: 5.3.1-Phantom-Reads-fixed.t.sol

Running forge test: 5.3.1-Phantom-Reads-fixed.t.sol (attempt 1)
Passed: 5.3.1-Phantom-Reads-fixed.t.sol
Test file not found, generating first: 5.3.1-Phantom-Reads-vulnerability.t.sol

Running forge test: 5.3.1-Phantom-Reads-vulnerability.t.sol (attempt 1)
Passed: 5.3.1-Phantom-Reads-vulnerability.t.sol
Test file not found, generating first: 5.3.2-Dirty-Reads-fixed.t.sol

Running forge test: 5.3.2-Dirty-Reads-fixed.t.sol (attempt 1)
Failed: 5.3.2-Dirty-Reads-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.3.2-Dirty-Reads-fixed.sol" not found: File not found.
 --> test/5.3.2-Dirty-Reads-fixed.t.sol:6:1:
  |
6 | import "../5.3.2-Dirty-Reads-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.3.2-Dirty-Reads-fixed.t.sol

Running forge test: 5.3.2-Dirty-Reads-fixed.t.sol (attempt 2)
Passed: 5.3.2-Dirty-Reads-fixed.t.sol
Test file not found, generating first: 5.3.2-Dirty-Reads-vulnerability.t.sol

Running forge test: 5.3.2-Dirty-Reads-vulnerability.t.sol (attempt 1)
Passed: 5.3.2-Dirty-Reads-vulnerability.t.sol
Test file not found, generating first: 5.4-Error-in-Function-Call-fixed.t.sol

Running forge test: 5.4-Error-in-Function-Call-fixed.t.sol (attempt 1)
Failed: 5.4-Error-in-Function-Call-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 332.11ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test/5.4-Error-in-Function-Call-fixed.t.sol:77:1:
   |
77 | contract Attacker {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test/5.4-Error-in-Function-Call-fixed.t.sol:86:5:
   |
86 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 3 tests for test/5.4-Error-in-Function-Call-fixed.t.sol:FixedBankTest
[PASS] testCallWrongFunctionSignature() (gas: 45830)
Traces:
  [45830] FixedBankTest::testCallWrongFunctionSignature()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [21273] FixedBank::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [157] FixedBank::performWithdraw(1000000000000000000 [1e18])
    │   └─ ← [Revert] EvmError: Revert
    ├─ [0] VM::assertTrue(true, "External call to internal function should fail") [staticcall]
    │   └─ ← [Return] 
    ├─ [1492] FixedBank::balances(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "User balance should remain unchanged after failed call") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testDepositAndWithdraw() (gas: 59016)
Traces:
  [330510] FixedBankTest::setUp()
    ├─ [288572] → new FixedBank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1337 bytes of code
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [59016] FixedBankTest::testDepositAndWithdraw()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [21273] FixedBank::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1492] FixedBank::balances(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "User deposit did not update balance correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [13030] FixedBank::withdraw(1000000000000000000 [1e18])
    │   ├─ [0] ECRecover::fallback{value: 1000000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testReentrancyAttempt() (gas: 335451)
Traces:
  [330510] FixedBankTest::setUp()
    ├─ [288572] → new FixedBank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1337 bytes of code
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [335451] FixedBankTest::testReentrancyAttempt()
    ├─ [243729] → new Attacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1111 bytes of code
    ├─ [0] VM::deal(Attacker: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [30535] Attacker::deposit{value: 1000000000000000000}()
    │   ├─ [21273] FixedBank::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [15786] Attacker::attack()
    │   ├─ [13030] FixedBank::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [1858] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 610.95µs (234.74µs CPU time)

Ran 1 test suite in 449.24ms (610.95µs CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/5.4-Error-in-Function-Call-fixed.t.sol:FixedBankTest
[FAIL: EvmError: Revert] testDepositAndWithdraw() (gas: 59016)
[FAIL: EvmError: Revert] testReentrancyAttempt() (gas: 335451)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 5.4-Error-in-Function-Call-fixed.t.sol

Running forge test: 5.4-Error-in-Function-Call-fixed.t.sol (attempt 2)
Failed: 5.4-Error-in-Function-Call-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 347.26ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
  --> test/5.4-Error-in-Function-Call-fixed.t.sol:67:14:
   |
67 |             (bool success, ) = address(bank).call(abi.encodeWithSignature("withdraw(uint256)", 1));
   |              ^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/5.4-Error-in-Function-Call-fixed.t.sol:103:9:
    |
103 |         uint256 initialUserBalance = user.balance;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^


Ran 3 tests for test/5.4-Error-in-Function-Call-fixed.t.sol:FixedBankTest
[PASS] testCallWrongFunctionSignature() (gas: 45830)
Traces:
  [45830] FixedBankTest::testCallWrongFunctionSignature()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [21273] FixedBank::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [157] FixedBank::01d898f2(0000000000000000000000000000000000000000000000000de0b6b3a7640000)
    │   └─ ← [Revert] EvmError: Revert
    ├─ [0] VM::assertTrue(true, "External call to internal function should fail") [staticcall]
    │   └─ ← [Return] 
    ├─ [1492] FixedBank::balances(0x000000000000000000000000000000000000bEEF) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "User balance should remain unchanged after failed call") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testDepositAndWithdraw() (gas: 50794)
Traces:
  [69994] FixedBankTest::testDepositAndWithdraw()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [21273] FixedBank::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1492] FixedBank::balances(0x000000000000000000000000000000000000bEEF) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "User deposit did not update balance correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [10728] FixedBank::withdraw(1000000000000000000 [1e18])
    │   ├─ [0] 0x000000000000000000000000000000000000bEEF::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1492] FixedBank::balances(0x000000000000000000000000000000000000bEEF) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "User balance in bank should be zero after withdrawal") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(0, 0, "Bank contract should have zero balance after withdrawal") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: Attacker bank balance should be zero after withdrawal: 1000000000000000000 != 0] testReentrancyAttempt() (gas: 434935)
Traces:
  [374206] FixedBankTest::setUp()
    ├─ [288572] → new FixedBank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1337 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [434935] FixedBankTest::testReentrancyAttempt()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [321603] → new Attacker@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1500 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [30513] Attacker::deposit{value: 1000000000000000000}()
    │   ├─ [21273] FixedBank::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1492] FixedBank::balances(Attacker: [0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Attacker deposit not recorded correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [17654] Attacker::attack(1000000000000000000 [1e18])
    │   ├─ [13030] FixedBank::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [2299] Attacker::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    ├─ [1492] FixedBank::balances(Attacker: [0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 0, "Attacker bank balance should be zero after withdrawal") [staticcall]
    │   └─ ← [Revert] Attacker bank balance should be zero after withdrawal: 1000000000000000000 != 0
    └─ ← [Revert] Attacker bank balance should be zero after withdrawal: 1000000000000000000 != 0

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 631.91µs (202.12µs CPU time)

Ran 1 test suite in 709.17ms (631.91µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/5.4-Error-in-Function-Call-fixed.t.sol:FixedBankTest
[FAIL: Attacker bank balance should be zero after withdrawal: 1000000000000000000 != 0] testReentrancyAttempt() (gas: 434935)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 5.4-Error-in-Function-Call-fixed.t.sol

Running forge test: 5.4-Error-in-Function-Call-fixed.t.sol (attempt 3)
Failed: 5.4-Error-in-Function-Call-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.4-Error-in-Function-Call-fixed.sol" not found: File not found.
 --> test/5.4-Error-in-Function-Call-fixed.t.sol:5:1:
  |
5 | import "../5.4-Error-in-Function-Call-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.4-Error-in-Function-Call-fixed.t.sol

Running forge test: 5.4-Error-in-Function-Call-fixed.t.sol (attempt 4)
Failed: 5.4-Error-in-Function-Call-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 351.69ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
   --> test/5.4-Error-in-Function-Call-fixed.t.sol:112:24:
    |
112 |         (bool success, bytes memory data) = address(bank).call(payload);
    |                        ^^^^^^^^^^^^^^^^^


Ran 3 tests for test/5.4-Error-in-Function-Call-fixed.t.sol:FixedBankTest
[FAIL: revert: Attacker failed to execute attack] testAttackScenario() (gas: 364292)
Traces:
  [327034] FixedBankTest::setUp()
    ├─ [288572] → new FixedBank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1337 bytes of code
    └─ ← [Stop] 

  [364292] FixedBankTest::testAttackScenario()
    ├─ [272560] → new Attacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1255 bytes of code
    ├─ [0] VM::deal(Attacker: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(Attacker: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [46083] Attacker::attack{value: 1000000000000000000}()
    │   ├─ [21273] FixedBank::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [13030] FixedBank::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [1073] Attacker::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [OutOfGas] EvmError: OutOfGas
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] revert: Attacker failed to execute attack

[PASS] testDepositAndWithdraw() (gas: 52025)
Traces:
  [71225] FixedBankTest::testDepositAndWithdraw()
    ├─ [0] VM::deal(0x0000000000000000000000000000000000000064, 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000000064)
    │   └─ ← [Return] 
    ├─ [21273] FixedBank::deposit{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [1492] FixedBank::balances(0x0000000000000000000000000000000000000064) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Deposit did not update balance correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000000064)
    │   └─ ← [Return] 
    ├─ [10728] FixedBank::withdraw(1000000000000000000 [1e18])
    │   ├─ [0] 0x0000000000000000000000000000000000000064::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1492] FixedBank::balances(0x0000000000000000000000000000000000000064) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "Withdrawal did not update balance correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(0, 0, "Bank contract should have zero ETH after withdrawal") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testInvalidFunctionCall() (gas: 5210)
Traces:
  [5210] FixedBankTest::testInvalidFunctionCall()
    ├─ [157] FixedBank::performWithdraw(1000000000000000000 [1e18])
    │   └─ ← [Revert] EvmError: Revert
    ├─ [0] VM::assertTrue(true, "Call to non-existent function should fail") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 642.73µs (274.89µs CPU time)

Ran 1 test suite in 494.68ms (642.73µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/5.4-Error-in-Function-Call-fixed.t.sol:FixedBankTest
[FAIL: revert: Attacker failed to execute attack] testAttackScenario() (gas: 364292)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 5.4-Error-in-Function-Call-fixed.t.sol

Running forge test: 5.4-Error-in-Function-Call-fixed.t.sol (attempt 5)
Failed: 5.4-Error-in-Function-Call-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "contracts/5.4-Error-in-Function-Call-fixed.sol" not found: File not found.
 --> test/5.4-Error-in-Function-Call-fixed.t.sol:6:1:
  |
6 | import "../contracts/5.4-Error-in-Function-Call-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.4-Error-in-Function-Call-fixed.t.sol
Failed after 5 attempts: 5.4-Error-in-Function-Call-fixed.t.sol
Deleted test file due to repeated failure: 5.4-Error-in-Function-Call-fixed.t.sol
Test file not found, generating first: 5.4-Error-in-Function-Call-vulnerability.t.sol

Running forge test: 5.4-Error-in-Function-Call-vulnerability.t.sol (attempt 1)
Failed: 5.4-Error-in-Function-Call-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 351.62ms
Compiler run successful with warnings:
Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/5.4-Error-in-Function-Call-vulnerability.t.sol:52:30:
   |
52 |     function performWithdraw(bool _flag, uint256 _amount) public {
   |                              ^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/5.4-Error-in-Function-Call-vulnerability.t.sol:52:42:
   |
52 |     function performWithdraw(bool _flag, uint256 _amount) public {
   |                                          ^^^^^^^^^^^^^^^


Ran 2 tests for test/5.4-Error-in-Function-Call-vulnerability.t.sol:VulnerabilityTest
[FAIL: revert: Call failed] testExploitDrainsBank() (gas: 432003)
Traces:
  [499422] VulnerabilityTest::setUp()
    ├─ [425109] → new Bank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2019 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [21295] Bank::deposit{value: 10000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [432003] VulnerabilityTest::testExploitDrainsBank()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000cafE, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000cafE)
    │   └─ ← [Return] 
    ├─ [310395] → new Attack@0x2fB4bEC86aBEB9724c036c544313F58a535F1af4
    │   └─ ← [Return] 1340 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000cafE)
    │   └─ ← [Return] 
    ├─ [46927] Attack::attack{value: 1000000000000000000}()
    │   ├─ [21295] Bank::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   ├─ [13840] Bank::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [10486] Attack::performWithdraw(false, 1000000000000000000 [1e18])
    │   │   │   ├─ [0] 0x000000000000000000000000000000000000cafE::fallback{value: 11000000000000000000}()
    │   │   │   │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    │   │   │   └─ ← [Revert] EvmError: Revert
    │   │   └─ ← [Revert] revert: Call failed
    │   └─ ← [Revert] revert: Call failed
    └─ ← [Revert] revert: Call failed

[FAIL: next call did not revert as expected] testWithdrawFromEOAReverts() (gas: 49257)
Traces:
  [499422] VulnerabilityTest::setUp()
    ├─ [425109] → new Bank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2019 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [21295] Bank::deposit{value: 10000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [49257] VulnerabilityTest::testWithdrawFromEOAReverts()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Call failed)
    │   └─ ← [Return] 
    ├─ [41720] Bank::withdraw(1000000000000000000 [1e18])
    │   ├─ [0] 0x000000000000000000000000000000000000bEEF::performWithdraw(false, 1000000000000000000 [1e18])
    │   │   └─ ← [Stop] 
    │   ├─ [0] 0x000000000000000000000000000000000000bEEF::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    └─ ← [Revert] next call did not revert as expected

Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 611.72µs (285.76µs CPU time)

Ran 1 test suite in 557.30ms (611.72µs CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/5.4-Error-in-Function-Call-vulnerability.t.sol:VulnerabilityTest
[FAIL: revert: Call failed] testExploitDrainsBank() (gas: 432003)
[FAIL: next call did not revert as expected] testWithdrawFromEOAReverts() (gas: 49257)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 5.4-Error-in-Function-Call-vulnerability.t.sol

Running forge test: 5.4-Error-in-Function-Call-vulnerability.t.sol (attempt 2)
Passed: 5.4-Error-in-Function-Call-vulnerability.t.sol
Test file not found, generating first: 5.4.1-Wrong-Function-Call-fixed.t.sol

Running forge test: 5.4.1-Wrong-Function-Call-fixed.t.sol (attempt 1)
Failed: 5.4.1-Wrong-Function-Call-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.4.1-Wrong-Function-Call-fixed.sol" not found: File not found.
 --> test/5.4.1-Wrong-Function-Call-fixed.t.sol:7:1:
  |
7 | import "../5.4.1-Wrong-Function-Call-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.4.1-Wrong-Function-Call-fixed.t.sol

Running forge test: 5.4.1-Wrong-Function-Call-fixed.t.sol (attempt 2)
Failed: 5.4.1-Wrong-Function-Call-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 387.41ms
Compiler run successful!

Ran 2 tests for test/5.4.1-Wrong-Function-Call-fixed.t.sol:WrongFunctionCallFixedTest
[FAIL: Attacker should not have extra balance gained: 1000000000000000000 != 0] testAttackAttemptDoesNotExploitWrongCall() (gas: 591776)
Traces:
  [126814] WrongFunctionCallFixedTest::setUp()
    ├─ [0] VM::etch(0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2, 0x6080604052600436106100225760003560e01c8063819b25ba1461002e57610029565b3661002957005b600080fd5b610048600480360381019061004391906100fc565b61004a565b005b670de0b6b3a76400003414610094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161008b90610174565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f5543d7db23a253d3c874d105cd780abd280b05b43be704ab6928aa91d36e2a5382346040516100dc929190610194565b60405180910390a250565b6000813590506100f6816101d8565b92915050565b60006020828403121561010e57600080fd5b600061011c848285016100e7565b91505092915050565b60006101326010836101bd565b91507f496e636f727265637420616d6f756e74000000000000000000000000000000006000830152602082019050919050565b61016e816101ce565b82525050565b6000602082019050818103600083015261018d81610125565b9050919050565b60006040820190506101a96000830185610165565b6101b66020830184610165565b9392505050565b600082825260208201905092915050565b6000819050919050565b6101e1816101ce565b81146101ec57600080fd5b5056fea264697066735822122057f468ce23de5fbeceef4c435545326adefa05868326de204bc5a5d735eb570c64736f6c63430008000033)
    │   └─ ← [Return] 
    ├─ [84711] → new FoodBudgetWallet_Fixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 423 bytes of code
    └─ ← [Stop] 

  [591776] WrongFunctionCallFixedTest::testAttackAttemptDoesNotExploitWrongCall()
    ├─ [493929] → new AttackAttempt_Fixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   ├─ [109959] → new RealRestaurant@0xffD4505B3452Dc22f8473616d50503bA9E1710Ac
    │   │   └─ ← [Return] 549 bytes of code
    │   ├─ [84711] → new FoodBudgetWallet_Fixed@0x8d2C17FAd02B7bb64139109c6533b7C2b9CADb81
    │   │   └─ ← [Return] 423 bytes of code
    │   └─ ← [Return] 965 bytes of code
    ├─ [0] VM::etch(0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2, 0x6080604052600436106100225760003560e01c8063819b25ba1461002e57610029565b3661002957005b600080fd5b610048600480360381019061004391906100fc565b61004a565b005b670de0b6b3a76400003414610094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161008b90610174565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f5543d7db23a253d3c874d105cd780abd280b05b43be704ab6928aa91d36e2a5382346040516100dc929190610194565b60405180910390a250565b6000813590506100f6816101d8565b92915050565b60006020828403121561010e57600080fd5b600061011c848285016100e7565b91505092915050565b60006101326010836101bd565b91507f496e636f727265637420616d6f756e74000000000000000000000000000000006000830152602082019050919050565b61016e816101ce565b82525050565b6000602082019050818103600083015261018d81610125565b9050919050565b60006040820190506101a96000830185610165565b6101b66020830184610165565b9392505050565b600082825260208201905092915050565b6000819050919050565b6101e1816101ce565b81146101ec57600080fd5b5056fea264697066735822122057f468ce23de5fbeceef4c435545326adefa05868326de204bc5a5d735eb570c64736f6c63430008000033)
    │   └─ ← [Return] 
    ├─ [1254] AttackAttempt_Fixed::victim() [staticcall]
    │   └─ ← [Return] FoodBudgetWallet_Fixed: [0x8d2C17FAd02B7bb64139109c6533b7C2b9CADb81]
    ├─ [0] VM::deal(FoodBudgetWallet_Fixed: [0x8d2C17FAd02B7bb64139109c6533b7C2b9CADb81], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::expectEmit(true, false, false, true, 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2)
    │   └─ ← [Return] 
    ├─ emit ReservationMade(from: FoodBudgetWallet_Fixed: [0x8d2C17FAd02B7bb64139109c6533b7C2b9CADb81], seats: 2, value: 1000000000000000000 [1e18])
    ├─ [14066] AttackAttempt_Fixed::executeAttack{value: 1000000000000000000}(2)
    │   ├─ [11110] FoodBudgetWallet_Fixed::makeReservation(2)
    │   │   ├─ [2314] 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2::reserve{value: 1000000000000000000}(2)
    │   │   │   ├─ emit ReservationMade(from: FoodBudgetWallet_Fixed: [0x8d2C17FAd02B7bb64139109c6533b7C2b9CADb81], seats: 2, value: 1000000000000000000 [1e18])
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Restaurant should have received 1 ether after attack attempt") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 0, "Attacker should not have extra balance gained") [staticcall]
    │   └─ ← [Revert] Attacker should not have extra balance gained: 1000000000000000000 != 0
    └─ ← [Revert] Attacker should not have extra balance gained: 1000000000000000000 != 0

[PASS] testMakeReservation_CallsCorrectContract() (gas: 26194)
Traces:
  [26194] WrongFunctionCallFixedTest::testMakeReservation_CallsCorrectContract()
    ├─ [0] VM::expectEmit(true, false, false, true, 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2)
    │   └─ ← [Return] 
    ├─ emit ReservationMade(from: FoodBudgetWallet_Fixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], seats: 4, value: 1000000000000000000 [1e18])
    ├─ [11110] FoodBudgetWallet_Fixed::makeReservation(4)
    │   ├─ [2314] 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2::reserve{value: 1000000000000000000}(4)
    │   │   ├─ emit ReservationMade(from: FoodBudgetWallet_Fixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], seats: 4, value: 1000000000000000000 [1e18])
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(500000000000000000 [5e17], 500000000000000000 [5e17], "Victim wallet should have 0.5 ether left") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Restaurant should have received 1 ether") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 4.05ms (3.33ms CPU time)

Ran 1 test suite in 746.75ms (4.05ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/5.4.1-Wrong-Function-Call-fixed.t.sol:WrongFunctionCallFixedTest
[FAIL: Attacker should not have extra balance gained: 1000000000000000000 != 0] testAttackAttemptDoesNotExploitWrongCall() (gas: 591776)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 5.4.1-Wrong-Function-Call-fixed.t.sol

Running forge test: 5.4.1-Wrong-Function-Call-fixed.t.sol (attempt 3)
Failed: 5.4.1-Wrong-Function-Call-fixed.t.sol
Error:
Compiler run failed:
Error (9582): Member "ReservationMade" not found or not visible after argument-dependent lookup in type(contract RealRestaurant).
  --> test/5.4.1-Wrong-Function-Call-fixed.t.sol:91:14:
   |
91 |         emit RealRestaurant.ReservationMade(address(wallet), 4, 1 ether);
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.4.1-Wrong-Function-Call-fixed.t.sol

Running forge test: 5.4.1-Wrong-Function-Call-fixed.t.sol (attempt 4)
Failed: 5.4.1-Wrong-Function-Call-fixed.t.sol
Error:
Compiler run failed:
Error (9582): Member "ReservationMade" not found or not visible after argument-dependent lookup in type(contract RealRestaurant).
  --> test/5.4.1-Wrong-Function-Call-fixed.t.sol:93:14:
   |
93 |         emit RealRestaurant.ReservationMade(address(wallet), seats, 1 ether);
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.4.1-Wrong-Function-Call-fixed.t.sol

Running forge test: 5.4.1-Wrong-Function-Call-fixed.t.sol (attempt 5)
Failed: 5.4.1-Wrong-Function-Call-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 342.15ms
Compiler run successful!

Ran 2 tests for test/5.4.1-Wrong-Function-Call-fixed.t.sol:FoodBudgetWalletFixedTest
[FAIL: log != expected log] testAttackAttemptDoesNotExploitWrongFunctionCall() (gas: 582307)
Traces:
  [291965] FoodBudgetWalletFixedTest::setUp()
    ├─ [109959] → new RealRestaurant@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 549 bytes of code
    ├─ [0] VM::etch(0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2, 0x6080604052600436106100225760003560e01c8063819b25ba1461002e57610029565b3661002957005b600080fd5b610048600480360381019061004391906100fc565b61004a565b005b670de0b6b3a76400003414610094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161008b90610174565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f5543d7db23a253d3c874d105cd780abd280b05b43be704ab6928aa91d36e2a5382346040516100dc929190610194565b60405180910390a250565b6000813590506100f6816101d8565b92915050565b60006020828403121561010e57600080fd5b600061011c848285016100e7565b91505092915050565b60006101326010836101bd565b91507f496e636f727265637420616d6f756e74000000000000000000000000000000006000830152602082019050919050565b61016e816101ce565b82525050565b6000602082019050818103600083015261018d81610125565b9050919050565b60006040820190506101a96000830185610165565b6101b66020830184610165565b9392505050565b600082825260208201905092915050565b6000819050919050565b6101e1816101ce565b81146101ec57600080fd5b5056fea2646970667358221220739337d443d8e869af62797a316277e1ff301bc3241d467d831f2ada45a9dfab64736f6c63430008000033)
    │   └─ ← [Return] 
    ├─ [84711] → new FoodBudgetWallet_Fixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 423 bytes of code
    └─ ← [Stop] 

  [582307] FoodBudgetWalletFixedTest::testAttackAttemptDoesNotExploitWrongFunctionCall()
    ├─ [493929] → new AttackAttempt_Fixed@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   ├─ [109959] → new RealRestaurant@0x4f81992FCe2E1846dD528eC0102e6eE1f61ed3e2
    │   │   └─ ← [Return] 549 bytes of code
    │   ├─ [84711] → new FoodBudgetWallet_Fixed@0xCB6f5076b5bbae81D7643BfBf57897E8E3FB1db9
    │   │   └─ ← [Return] 423 bytes of code
    │   └─ ← [Return] 965 bytes of code
    ├─ [1235] AttackAttempt_Fixed::realRestaurant() [staticcall]
    │   └─ ← [Return] RealRestaurant: [0x4f81992FCe2E1846dD528eC0102e6eE1f61ed3e2]
    ├─ [0] VM::etch(0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2, 0x6080604052600436106100225760003560e01c8063819b25ba1461002e57610029565b3661002957005b600080fd5b610048600480360381019061004391906100fc565b61004a565b005b670de0b6b3a76400003414610094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161008b90610174565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f5543d7db23a253d3c874d105cd780abd280b05b43be704ab6928aa91d36e2a5382346040516100dc929190610194565b60405180910390a250565b6000813590506100f6816101d8565b92915050565b60006020828403121561010e57600080fd5b600061011c848285016100e7565b91505092915050565b60006101326010836101bd565b91507f496e636f727265637420616d6f756e74000000000000000000000000000000006000830152602082019050919050565b61016e816101ce565b82525050565b6000602082019050818103600083015261018d81610125565b9050919050565b60006040820190506101a96000830185610165565b6101b66020830184610165565b9392505050565b600082825260208201905092915050565b6000819050919050565b6101e1816101ce565b81146101ec57600080fd5b5056fea2646970667358221220739337d443d8e869af62797a316277e1ff301bc3241d467d831f2ada45a9dfab64736f6c63430008000033)
    │   └─ ← [Return] 
    ├─ [0] VM::expectEmit(true, false, false, true)
    │   └─ ← [Return] 
    ├─ emit ReservationMade(from: AttackAttempt_Fixed: [0xF62849F9A0B5Bf2913b396098F7c7019b51A820a], seats: 2, value: 1000000000000000000 [1e18])
    ├─ [11740] AttackAttempt_Fixed::executeAttack{value: 1000000000000000000}(2)
    │   ├─ [8788] FoodBudgetWallet_Fixed::makeReservation(2)
    │   │   ├─ [0] 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2::reserve{value: 1000000000000000000}(2)
    │   │   │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] log != expected log

[FAIL: log != expected log] testMakeReservationEmitsReservationMade() (gas: 17838)
Traces:
  [291965] FoodBudgetWalletFixedTest::setUp()
    ├─ [109959] → new RealRestaurant@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 549 bytes of code
    ├─ [0] VM::etch(0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2, 0x6080604052600436106100225760003560e01c8063819b25ba1461002e57610029565b3661002957005b600080fd5b610048600480360381019061004391906100fc565b61004a565b005b670de0b6b3a76400003414610094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161008b90610174565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f5543d7db23a253d3c874d105cd780abd280b05b43be704ab6928aa91d36e2a5382346040516100dc929190610194565b60405180910390a250565b6000813590506100f6816101d8565b92915050565b60006020828403121561010e57600080fd5b600061011c848285016100e7565b91505092915050565b60006101326010836101bd565b91507f496e636f727265637420616d6f756e74000000000000000000000000000000006000830152602082019050919050565b61016e816101ce565b82525050565b6000602082019050818103600083015261018d81610125565b9050919050565b60006040820190506101a96000830185610165565b6101b66020830184610165565b9392505050565b600082825260208201905092915050565b6000819050919050565b6101e1816101ce565b81146101ec57600080fd5b5056fea2646970667358221220739337d443d8e869af62797a316277e1ff301bc3241d467d831f2ada45a9dfab64736f6c63430008000033)
    │   └─ ← [Return] 
    ├─ [84711] → new FoodBudgetWallet_Fixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 423 bytes of code
    └─ ← [Stop] 

  [17838] FoodBudgetWalletFixedTest::testMakeReservationEmitsReservationMade()
    ├─ [0] VM::expectEmit(true, false, false, true)
    │   └─ ← [Return] 
    ├─ emit ReservationMade(from: FoodBudgetWalletFixedTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], seats: 3, value: 1000000000000000000 [1e18])
    ├─ [11110] FoodBudgetWallet_Fixed::makeReservation(3)
    │   ├─ [2314] 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2::reserve{value: 1000000000000000000}(3)
    │   │   ├─ emit ReservationMade(from: FoodBudgetWallet_Fixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], seats: 3, value: 1000000000000000000 [1e18])
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    └─ ← [Revert] log != expected log

Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 2.49ms (3.79ms CPU time)

Ran 1 test suite in 672.86ms (2.49ms CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/5.4.1-Wrong-Function-Call-fixed.t.sol:FoodBudgetWalletFixedTest
[FAIL: log != expected log] testAttackAttemptDoesNotExploitWrongFunctionCall() (gas: 582307)
[FAIL: log != expected log] testMakeReservationEmitsReservationMade() (gas: 17838)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 5.4.1-Wrong-Function-Call-fixed.t.sol
Failed after 5 attempts: 5.4.1-Wrong-Function-Call-fixed.t.sol
Deleted test file due to repeated failure: 5.4.1-Wrong-Function-Call-fixed.t.sol
Test file not found, generating first: 5.4.1-Wrong-Function-Call-vulnerability.t.sol

Running forge test: 5.4.1-Wrong-Function-Call-vulnerability.t.sol (attempt 1)
Failed: 5.4.1-Wrong-Function-Call-vulnerability.t.sol
Error:
Compiler run failed:
Error (9553): Invalid type for argument in function call. Invalid implicit conversion from contract FoodBudgetWallet_Vulnerable to address requested.
   --> test/5.4.1-Wrong-Function-Call-vulnerability.t.sol:127:34:
    |
127 |         emit ReceivedReservation(AttackDemo(attackDemo).victim(), 3, 1 ether);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.4.1-Wrong-Function-Call-vulnerability.t.sol

Running forge test: 5.4.1-Wrong-Function-Call-vulnerability.t.sol (attempt 2)
Passed: 5.4.1-Wrong-Function-Call-vulnerability.t.sol
Test file not found, generating first: 5.4.2-Wrong-Selection-of-Guard-Function-fixed.t.sol

Running forge test: 5.4.2-Wrong-Selection-of-Guard-Function-fixed.t.sol (attempt 1)
Failed: 5.4.2-Wrong-Selection-of-Guard-Function-fixed.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.4.2-Wrong-Selection-of-Guard-Function-fixed.sol" not found: File not found.
 --> test/5.4.2-Wrong-Selection-of-Guard-Function-fixed.t.sol:7:1:
  |
7 | import "../5.4.2-Wrong-Selection-of-Guard-Function-fixed.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.4.2-Wrong-Selection-of-Guard-Function-fixed.t.sol

Running forge test: 5.4.2-Wrong-Selection-of-Guard-Function-fixed.t.sol (attempt 2)
Passed: 5.4.2-Wrong-Selection-of-Guard-Function-fixed.t.sol
Test file not found, generating first: 5.4.2-Wrong-Selection-of-Guard-Function-vulnerability.t.sol

Running forge test: 5.4.2-Wrong-Selection-of-Guard-Function-vulnerability.t.sol (attempt 1)
Passed: 5.4.2-Wrong-Selection-of-Guard-Function-vulnerability.t.sol
Test file not found, generating first: 5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol

Running forge test: 5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol (attempt 1)
Failed: 5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol
Error:
Compiler run failed:
Warning (2519): This declaration shadows an existing declaration.
  --> test/5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol:73:10:
   |
73 |         (bool success, ) = address(guessContract).call{value: 10 ether}("");
   |          ^^^^^^^^^^^^
Note: The shadowed declaration is here:
   --> test/5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol:156:5:
    |
156 |     event success(string message);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2519): This declaration shadows an existing declaration.
   --> test/5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol:102:10:
    |
102 |         (bool success, ) = address(guessContract).call{value: 10 ether}("");
    |          ^^^^^^^^^^^^
Note: The shadowed declaration is here:
   --> test/5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol:156:5:
    |
156 |     event success(string message);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2519): This declaration shadows an existing declaration.
   --> test/5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol:133:10:
    |
133 |         (bool success, ) = address(guessContract).call{value: 5 ether}("");
    |          ^^^^^^^^^^^^
Note: The shadowed declaration is here:
   --> test/5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol:156:5:
    |
156 |     event success(string message);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (9582): Member "wrongNumber" not found or not visible after argument-dependent lookup in type(contract GuessTheNumber).
   --> test/5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol:110:14:
    |
110 |         emit GuessTheNumber.wrongNumber("Youve made an incorrect guess!");
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol

Running forge test: 5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol (attempt 2)
Failed: 5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 336.74ms
Compiler run successful!

Ran 3 tests for test/5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol:GuessTheNumberTest
[PASS] testAttackFixedNoPrizeAwarded() (gas: 494342)
Traces:
  [494342] GuessTheNumberTest::testAttackFixedNoPrizeAwarded()
    ├─ [186929] → new GuessTheNumber@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 832 bytes of code
    ├─ [55] GuessTheNumber::receive{value: 3000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(Attacker: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [194643] → new AttackFixed@0xE536720791A7DaDBeBdBCD8c8546fb0791a11901
    │   └─ ← [Return] 866 bytes of code
    ├─ [0] VM::prank(Attacker: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [13640] AttackFixed::attack{value: 1000000000000000000}()
    │   ├─ [3054] GuessTheNumber::guess{value: 1000000000000000000}(123)
    │   │   ├─ emit wrongNumber(message: "Youve made an incorrect guess!")
    │   │   └─ ← [Stop] 
    │   ├─ emit AttackResult(success: true)
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(4000000000000000000 [4e18], 4000000000000000000 [4e18], "Prize pool should increase by 1 ether") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(0, 0, "Attack contract should not receive any prize") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(99000000000000000000 [9.9e19], 99000000000000000000 [9.9e19], "Attacker balance should decrease by 1 ether") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testCorrectGuessTransfersPrize() (gas: 26341)
Traces:
  [245051] GuessTheNumberTest::setUp()
    ├─ [0] VM::label(User: [0x0000000000000000000000000000000000000001], "User")
    │   └─ ← [Return] 
    ├─ [0] VM::label(Attacker: [0x0000000000000000000000000000000000000002], "Attacker")
    │   └─ ← [Return] 
    ├─ [0] VM::deal(User: [0x0000000000000000000000000000000000000001], 100000000000000000000 [1e20])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(Attacker: [0x0000000000000000000000000000000000000002], 100000000000000000000 [1e20])
    │   └─ ← [Return] 
    ├─ [186929] → new GuessTheNumber@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 832 bytes of code
    ├─ [55] GuessTheNumber::receive{value: 5000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [26341] GuessTheNumberTest::testCorrectGuessTransfersPrize()
    ├─ [0] VM::prank(User: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [11052] GuessTheNumber::guess{value: 1000000000000000000}(777)
    │   ├─ [0] User::fallback{value: 6000000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] testIncorrectGuessDoesNotTransferPrize() (gas: 26696)
Traces:
  [26696] GuessTheNumberTest::testIncorrectGuessDoesNotTransferPrize()
    ├─ [0] VM::prank(User: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [3054] GuessTheNumber::guess{value: 1000000000000000000}(123)
    │   ├─ emit wrongNumber(message: "Youve made an incorrect guess!")
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(6000000000000000000 [6e18], 6000000000000000000 [6e18], "Contract balance should increase by 1 ether") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(99000000000000000000 [9.9e19], 99000000000000000000 [9.9e19], "User balance should decrease by 1 ether") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 694.55µs (521.43µs CPU time)

Ran 1 test suite in 649.81ms (694.55µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol:GuessTheNumberTest
[FAIL: EvmError: Revert] testCorrectGuessTransfersPrize() (gas: 26341)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol

Running forge test: 5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol (attempt 3)
Passed: 5.4.3-Function-Call-with-Wrong-Arguments-fixed.t.sol
Test file not found, generating first: 5.4.3-Function-Call-with-Wrong-Arguments-vulnerability.t.sol

Running forge test: 5.4.3-Function-Call-with-Wrong-Arguments-vulnerability.t.sol (attempt 1)
Passed: 5.4.3-Function-Call-with-Wrong-Arguments-vulnerability.t.sol
Test file not found, generating first: 5.5-Wrong-class-inheritance-order-fixed.t.sol

Running forge test: 5.5-Wrong-class-inheritance-order-fixed.t.sol (attempt 1)
Passed: 5.5-Wrong-class-inheritance-order-fixed.t.sol
Test file not found, generating first: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol

Running forge test: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol (attempt 1)
Failed: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 362.85ms
Compiler run successful!

Ran 2 tests for test/5.5-Wrong-class-inheritance-order-vulnerability.t.sol:WrongInheritanceOrderTest
[FAIL: call didn't revert at a lower depth than cheatcode call depth] testAttackBypassingCapWithWhitelist() (gas: 54441)
Traces:
  [399646] WrongInheritanceOrderTest::setUp()
    ├─ [353928] → new Sales@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1358 bytes of code
    ├─ [1589] Sales::whitelist(0x000000000000000000000000000000000000bEEF) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertEq(false, false) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [54441] WrongInheritanceOrderTest::testAttackBypassingCapWithWhitelist()
    ├─ [1174] Sales::cap() [staticcall]
    │   └─ ← [Return] 100000000000000000000 [1e20]
    ├─ [0] VM::deal(0x000000000000000000000000000000000000FEeD, 100000000000000000000 [1e20])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000FEeD)
    │   └─ ← [Return] 
    ├─ [24934] Sales::buy{value: 100000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000FEeD)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Purchase not valid)
    │   └─ ← [Return] 
    ├─ [0] Sales::buy{value: 1000000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] call didn't revert at a lower depth than cheatcode call depth

[PASS] testNonWhitelistedPurchaseExceedingCapFails() (gas: 64686)
Traces:
  [64686] WrongInheritanceOrderTest::testNonWhitelistedPurchaseExceedingCapFails()
    ├─ [1174] Sales::cap() [staticcall]
    │   └─ ← [Return] 100000000000000000000 [1e20]
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 100000000000000000000 [1e20])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [24934] Sales::buy{value: 100000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Purchase not valid)
    │   └─ ← [Return] 
    ├─ [5124] Sales::buy{value: 1000000000000000000}()
    │   └─ ← [Revert] revert: Purchase not valid
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 747.30µs (273.94µs CPU time)

Ran 1 test suite in 539.41ms (747.30µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/5.5-Wrong-class-inheritance-order-vulnerability.t.sol:WrongInheritanceOrderTest
[FAIL: call didn't revert at a lower depth than cheatcode call depth] testAttackBypassingCapWithWhitelist() (gas: 54441)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol

Running forge test: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol (attempt 2)
Failed: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.5-Wrong-class-inheritance-order-vulnerability.sol" not found: File not found.
 --> test/5.5-Wrong-class-inheritance-order-vulnerability.t.sol:4:1:
  |
4 | import "../5.5-Wrong-class-inheritance-order-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol

Running forge test: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol (attempt 3)
Failed: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 346.62ms
Compiler run successful!

Ran 1 test for test/5.5-Wrong-class-inheritance-order-vulnerability.t.sol:WrongInheritanceTest
[FAIL: revert: Purchase not valid] testAttackBypassesCap() (gas: 78212)
Traces:
  [563992] WrongInheritanceTest::setUp()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 200000000000000000000 [2e20])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [353928] → new Sales@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 1358 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [109558] → new Attack@0x657Da1235e7DA3ADCAB6B43Fbb4358c06FEeBe1c
    │   └─ ← [Return] 441 bytes of code
    └─ ← [Stop] 

  [78212] WrongInheritanceTest::testAttackBypassesCap()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [34108] Attack::attack{value: 50000000000000000000}()
    │   ├─ [24934] Sales::buy{value: 50000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1129] Sales::weiRaised() [staticcall]
    │   └─ ← [Return] 50000000000000000000 [5e19]
    ├─ [0] VM::assertEq(50000000000000000000 [5e19], 50000000000000000000 [5e19], "First purchase did not update weiRaised correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [14306] Attack::attack{value: 60000000000000000000}()
    │   ├─ [5124] Sales::buy{value: 60000000000000000000}()
    │   │   └─ ← [Revert] revert: Purchase not valid
    │   └─ ← [Revert] revert: Purchase not valid
    └─ ← [Revert] revert: Purchase not valid

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 350.74µs (73.50µs CPU time)

Ran 1 test suite in 519.82ms (350.74µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/5.5-Wrong-class-inheritance-order-vulnerability.t.sol:WrongInheritanceTest
[FAIL: revert: Purchase not valid] testAttackBypassesCap() (gas: 78212)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol

Running forge test: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol (attempt 4)
Failed: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.5-Wrong-class-inheritance-order-vulnerability.sol" not found: File not found.
 --> test/5.5-Wrong-class-inheritance-order-vulnerability.t.sol:5:1:
  |
5 | import "../5.5-Wrong-class-inheritance-order-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol

Running forge test: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol (attempt 5)
Failed: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "5.5-Wrong-class-inheritance-order-vulnerability.sol" not found: File not found.
 --> test/5.5-Wrong-class-inheritance-order-vulnerability.t.sol:5:1:
  |
5 | import "../5.5-Wrong-class-inheritance-order-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol
Failed after 5 attempts: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol
Deleted test file due to repeated failure: 5.5-Wrong-class-inheritance-order-vulnerability.t.sol
Test file not found, generating first: 5.6-Improper-Type-Usage-fixed.t.sol

Running forge test: 5.6-Improper-Type-Usage-fixed.t.sol (attempt 1)
Failed: 5.6-Improper-Type-Usage-fixed.t.sol
Error:
No tests match the provided pattern:
	match-path: `test/5.6-Improper-Type-Usage-fixed.t.sol`
Error: No tests to run
Regenerating: 5.6-Improper-Type-Usage-fixed.t.sol
Test file not found, generating first: 5.6-Improper-Type-Usage-fixed.t.sol

Running forge test: 5.6-Improper-Type-Usage-fixed.t.sol (attempt 2)
Failed: 5.6-Improper-Type-Usage-fixed.t.sol
Error:
No tests match the provided pattern:
	match-path: `test/5.6-Improper-Type-Usage-fixed.t.sol`
Error: No tests to run
Regenerating: 5.6-Improper-Type-Usage-fixed.t.sol
Test file not found, generating first: 5.6-Improper-Type-Usage-fixed.t.sol

Running forge test: 5.6-Improper-Type-Usage-fixed.t.sol (attempt 3)
Failed: 5.6-Improper-Type-Usage-fixed.t.sol
Error:
No tests match the provided pattern:
	match-path: `test/5.6-Improper-Type-Usage-fixed.t.sol`
Error: No tests to run
Regenerating: 5.6-Improper-Type-Usage-fixed.t.sol
Test file not found, generating first: 5.6-Improper-Type-Usage-fixed.t.sol

Running forge test: 5.6-Improper-Type-Usage-fixed.t.sol (attempt 4)
Failed: 5.6-Improper-Type-Usage-fixed.t.sol
Error:
No tests match the provided pattern:
	match-path: `test/5.6-Improper-Type-Usage-fixed.t.sol`
Error: No tests to run
Regenerating: 5.6-Improper-Type-Usage-fixed.t.sol
Test file not found, generating first: 5.6-Improper-Type-Usage-fixed.t.sol

Running forge test: 5.6-Improper-Type-Usage-fixed.t.sol (attempt 5)
Failed: 5.6-Improper-Type-Usage-fixed.t.sol
Error:
No tests match the provided pattern:
	match-path: `test/5.6-Improper-Type-Usage-fixed.t.sol`
Error: No tests to run
Regenerating: 5.6-Improper-Type-Usage-fixed.t.sol
Failed after 5 attempts: 5.6-Improper-Type-Usage-fixed.t.sol
Test file not found, generating first: 5.6-Improper-Type-Usage-vulnerability.t.sol

Running forge test: 5.6-Improper-Type-Usage-vulnerability.t.sol (attempt 1)
Failed: 5.6-Improper-Type-Usage-vulnerability.t.sol
Error:
No tests match the provided pattern:
	match-path: `test/5.6-Improper-Type-Usage-vulnerability.t.sol`
Error: No tests to run
Regenerating: 5.6-Improper-Type-Usage-vulnerability.t.sol
Test file not found, generating first: 5.6-Improper-Type-Usage-vulnerability.t.sol

Running forge test: 5.6-Improper-Type-Usage-vulnerability.t.sol (attempt 2)

===== Test run started: 2025-04-10 16:32:53.851879 =====

Test file not found, generating first: 6.1-Incorrect-Sequencing-of-Behavior-fixed.t.sol

Running forge test: 6.1-Incorrect-Sequencing-of-Behavior-fixed.t.sol (attempt 1)
Passed: 6.1-Incorrect-Sequencing-of-Behavior-fixed.t.sol
Test file not found, generating first: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol

Running forge test: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol (attempt 1)
Failed: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 343.40ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> src/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.sol:32:1:
   |
32 | contract Attacker {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> src/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.sol:55:5:
   |
55 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2072): Unused local variable.
   --> test/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol:105:9:
    |
105 |         uint ownerBalanceBefore = owner.balance;
    |         ^^^^^^^^^^^^^^^^^^^^^^^


Ran 3 tests for test/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol:VulnerableBankTest
[FAIL: EvmError: Revert] testCollectEther() (gas: 461052)
Traces:
  [330006] VulnerableBankTest::setUp()
    ├─ [291531] → new VulnerableBank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1456 bytes of code
    └─ ← [Stop] 

  [461052] VulnerableBankTest::testCollectEther()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [392106] → new Attacker@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1648 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [0] Attacker::deposit{value: 1000000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testReentrancyAttackWithVictimFunds() (gas: 11894)
Traces:
  [330006] VulnerableBankTest::setUp()
    ├─ [291531] → new VulnerableBank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1456 bytes of code
    └─ ← [Stop] 

  [11894] VulnerableBankTest::testReentrancyAttackWithVictimFunds()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VulnerableBank::deposit{value: 1000000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testWithdrawalWithoutExtraFunds() (gas: 461006)
Traces:
  [330006] VulnerableBankTest::setUp()
    ├─ [291531] → new VulnerableBank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1456 bytes of code
    └─ ← [Stop] 

  [461006] VulnerableBankTest::testWithdrawalWithoutExtraFunds()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [392106] → new Attacker@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1648 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [0] Attacker::deposit{value: 1000000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 0 passed; 3 failed; 0 skipped; finished in 698.91µs (628.77µs CPU time)

Ran 1 test suite in 526.35ms (698.91µs CPU time): 0 tests passed, 3 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 3 failing tests in test/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol:VulnerableBankTest
[FAIL: EvmError: Revert] testCollectEther() (gas: 461052)
[FAIL: EvmError: Revert] testReentrancyAttackWithVictimFunds() (gas: 11894)
[FAIL: EvmError: Revert] testWithdrawalWithoutExtraFunds() (gas: 461006)

Encountered a total of 3 failing tests, 0 tests succeeded
Regenerating: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol

Running forge test: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol (attempt 2)
Failed: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 350.81ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> src/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.sol:32:1:
   |
32 | contract Attacker {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> src/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.sol:55:5:
   |
55 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 3 tests for test/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol:VulnerableBankTest
[FAIL: revert: Transfer failed] testCollectEther() (gas: 141262)
Traces:
  [815759] VulnerableBankTest::setUp()
    ├─ [291531] → new VulnerableBank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1456 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [392106] → new Attacker@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1648 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [21251] VulnerableBank::deposit{value: 5000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [141262] VulnerableBankTest::testCollectEther()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [31313] Attacker::deposit{value: 1000000000000000000}()
    │   ├─ [21251] VulnerableBank::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [93101] Attacker::attack()
    │   ├─ [89598] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [80245] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   ├─ [74483] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   ├─ [65130] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   ├─ [59368] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   ├─ [50015] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   ├─ [44253] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   ├─ [34912] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   ├─ [29156] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   ├─ [19072] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   ├─ [13326] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   │   │   ├─ [2419] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    │   │   │   │   │   │   │   │   │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   └─ ← [Revert] revert: Transfer failed
    │   └─ ← [Revert] revert: Transfer failed
    └─ ← [Revert] revert: Transfer failed

[FAIL: revert: Transfer failed] testReentrancyAttackWithVictimFunds() (gas: 144634)
Traces:
  [815759] VulnerableBankTest::setUp()
    ├─ [291531] → new VulnerableBank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1456 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [392106] → new Attacker@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1648 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [21251] VulnerableBank::deposit{value: 5000000000000000000}()
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [144634] VulnerableBankTest::testReentrancyAttackWithVictimFunds()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [31313] Attacker::deposit{value: 1000000000000000000}()
    │   ├─ [21251] VulnerableBank::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(6000000000000000000 [6e18], 6000000000000000000 [6e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [93101] Attacker::attack()
    │   ├─ [89598] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [80245] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   ├─ [74483] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   ├─ [65130] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   ├─ [59368] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   ├─ [50015] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   ├─ [44253] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   ├─ [34912] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   ├─ [29156] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   ├─ [19072] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   ├─ [13326] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   │   │   ├─ [2419] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    │   │   │   │   │   │   │   │   │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   └─ ← [Revert] revert: Transfer failed
    │   └─ ← [Revert] revert: Transfer failed
    └─ ← [Revert] revert: Transfer failed

[PASS] testWithdrawalWithoutExtraFunds() (gas: 812421)
Traces:
  [831621] VulnerableBankTest::testWithdrawalWithoutExtraFunds()
    ├─ [291531] → new VulnerableBank@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1456 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000c0DE, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000c0DE)
    │   └─ ← [Return] 
    ├─ [392106] → new Attacker@0x8bBC3514477d75EC797BBe4e19d7961660Bb849c
    │   └─ ← [Return] 1648 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000c0DE)
    │   └─ ← [Return] 
    ├─ [31313] Attacker::deposit{value: 1000000000000000000}()
    │   ├─ [21251] VulnerableBank::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000c0DE)
    │   └─ ← [Return] 
    ├─ [16819] Attacker::attack()
    │   ├─ [13326] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [2419] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000c0DE)
    │   └─ ← [Return] 
    ├─ [9444] Attacker::collectEther()
    │   ├─ [0] 0x000000000000000000000000000000000000c0DE::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 807.31µs (668.69µs CPU time)

Ran 1 test suite in 525.09ms (807.31µs CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol:VulnerableBankTest
[FAIL: revert: Transfer failed] testCollectEther() (gas: 141262)
[FAIL: revert: Transfer failed] testReentrancyAttackWithVictimFunds() (gas: 144634)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol

Running forge test: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol (attempt 3)
Failed: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol
Error:
Compiler run failed:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> src/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.sol:32:1:
   |
32 | contract Attacker {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> src/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.sol:55:5:
   |
55 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
  --> test/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol:78:13:
   |
78 |             fail("Attack did not revert as expected");
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol

Running forge test: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol (attempt 4)
Failed: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 356.47ms
Compiler run successful with warnings:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> src/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.sol:32:1:
   |
32 | contract Attacker {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> src/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.sol:55:5:
   |
55 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 2 tests for test/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol:VulnerableBankTest
[PASS] testCollectEtherRevert() (gas: 7429)
Traces:
  [7429] VulnerableBankTest::testCollectEtherRevert()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001234)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  	Not owner)
    │   └─ ← [Return] 
    ├─ [1362] Attacker::collectEther()
    │   └─ ← [Revert] revert: Not owner
    └─ ← [Stop] 

[FAIL: revert: Transfer failed] testReentrancyAttack() (gas: 178136)
Traces:
  [881506] VulnerableBankTest::setUp()
    ├─ [291531] → new VulnerableBank@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1456 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [21251] VulnerableBank::deposit{value: 10000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [392106] → new Attacker@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1648 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [31313] Attacker::deposit{value: 1000000000000000000}()
    │   ├─ [21251] VulnerableBank::deposit{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [178136] VulnerableBankTest::testReentrancyAttack()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [172876] Attacker::attack()
    │   ├─ [169373] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   ├─ [160020] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   ├─ [154258] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   ├─ [144905] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   ├─ [139143] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   ├─ [129790] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   ├─ [124028] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   ├─ [114675] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   ├─ [108913] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   ├─ [99560] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   ├─ [93798] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   │   │   ├─ [84445] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   │   │   ├─ [78683] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─ [69330] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─ [63568] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─ [54215] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─ [48453] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─ [39112] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─ [33356] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─ [23272] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─ [17526] VulnerableBank::withdraw(1000000000000000000 [1e18])
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─ [2419] Attacker::fallback{value: 1000000000000000000}()
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   │   └─ ← [Revert] revert: Transfer failed
    │   │   └─ ← [Revert] revert: Transfer failed
    │   └─ ← [Revert] revert: Transfer failed
    └─ ← [Revert] revert: Transfer failed

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 1.25ms (501.28µs CPU time)

Ran 1 test suite in 794.84ms (1.25ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol:VulnerableBankTest
[FAIL: revert: Transfer failed] testReentrancyAttack() (gas: 178136)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol

Running forge test: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol (attempt 5)
Failed: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol
Error:
Compiler run failed:
Warning (3628): This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> src/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.sol:32:1:
   |
32 | contract Attacker {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> src/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.sol:55:5:
   |
55 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Error (9429): This looks like an address but has an invalid checksum. Correct checksummed address: "0xbeeF000000000000000000000000000000000000". If this is not used as an address, please prepend '00'. For more information please see https://docs.soliditylang.org/en/develop/types.html#address-literals
SyntaxError: This looks like an address but has an invalid checksum. Correct checksummed address: "0xbeeF000000000000000000000000000000000000". If this is not used as an address, please prepend '00'. For more information please see https://docs.soliditylang.org/en/develop/types.html#address-literals
  --> test/6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol:12:29:
   |
12 |     address constant user = 0xBEEF000000000000000000000000000000000000;
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol
Failed after 5 attempts: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol
Deleted test file due to repeated failure: 6.1-Incorrect-Sequencing-of-Behavior-vulnerability.t.sol
Test file not found, generating first: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol

Running forge test: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol (attempt 1)
Failed: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 362.35ms
Compiler run successful!

Ran 5 tests for test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol:TestFixedTest
[FAIL: EvmError: Revert] testAttackFixedEvenTimestamp() (gas: 15248)
Traces:
  [271683] TestFixedTest::setUp()
    ├─ [58511] → new TestFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 292 bytes of code
    ├─ [0] VM::warp(1000)
    │   └─ ← [Return] 
    ├─ [317] TestFixed::pay{value: 200}()
    │   └─ ← [Stop] 
    ├─ [109558] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 441 bytes of code
    └─ ← [Stop] 

  [15248] TestFixedTest::testAttackFixedEvenTimestamp()
    ├─ [0] VM::warp(3000)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [0] AttackFixed::attack{value: 1}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testAttackFixedOddTimestamp() (gas: 15225)
Traces:
  [271683] TestFixedTest::setUp()
    ├─ [58511] → new TestFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 292 bytes of code
    ├─ [0] VM::warp(1000)
    │   └─ ← [Return] 
    ├─ [317] TestFixed::pay{value: 200}()
    │   └─ ← [Stop] 
    ├─ [109558] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 441 bytes of code
    └─ ← [Stop] 

  [15225] TestFixedTest::testAttackFixedOddTimestamp()
    ├─ [0] VM::warp(3001)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [0] AttackFixed::attack{value: 1}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[PASS] testFixed() (gas: 1374)
Traces:
  [1374] TestFixedTest::testFixed()
    └─ ← [Return] TestFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]

[FAIL: EvmError: Revert] testPayEvenTimestamp() (gas: 15274)
Traces:
  [271683] TestFixedTest::setUp()
    ├─ [58511] → new TestFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 292 bytes of code
    ├─ [0] VM::warp(1000)
    │   └─ ← [Return] 
    ├─ [317] TestFixed::pay{value: 200}()
    │   └─ ← [Stop] 
    ├─ [109558] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 441 bytes of code
    └─ ← [Stop] 

  [15274] TestFixedTest::testPayEvenTimestamp()
    ├─ [0] VM::warp(2000)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [0] TestFixed::pay{value: 1}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testPayOddTimestamp() (gas: 15210)
Traces:
  [271683] TestFixedTest::setUp()
    ├─ [58511] → new TestFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 292 bytes of code
    ├─ [0] VM::warp(1000)
    │   └─ ← [Return] 
    ├─ [317] TestFixed::pay{value: 200}()
    │   └─ ← [Stop] 
    ├─ [109558] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 441 bytes of code
    └─ ← [Stop] 

  [15210] TestFixedTest::testPayOddTimestamp()
    ├─ [0] VM::warp(2001)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [0] TestFixed::pay{value: 1}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 1 passed; 4 failed; 0 skipped; finished in 771.66µs (656.79µs CPU time)

Ran 1 test suite in 523.99ms (771.66µs CPU time): 1 tests passed, 4 failed, 0 skipped (5 total tests)

Failing tests:
Encountered 4 failing tests in test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol:TestFixedTest
[FAIL: EvmError: Revert] testAttackFixedEvenTimestamp() (gas: 15248)
[FAIL: EvmError: Revert] testAttackFixedOddTimestamp() (gas: 15225)
[FAIL: EvmError: Revert] testPayEvenTimestamp() (gas: 15274)
[FAIL: EvmError: Revert] testPayOddTimestamp() (gas: 15210)

Encountered a total of 4 failing tests, 1 tests succeeded
Regenerating: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol

Running forge test: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol (attempt 2)
Failed: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 333.97ms
Compiler run successful with warnings:
Warning (2018): Function state mutability can be restricted to view
  --> test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol:26:5:
   |
26 |     function testFixedInitialBalance() public {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 5 tests for test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol:TestFixedTest
[FAIL: EvmError: Revert] testAttackFixedEvenTimestamp() (gas: 15176)
Traces:
  [271661] TestFixedTest::setUp()
    ├─ [58511] → new TestFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 292 bytes of code
    ├─ [0] VM::warp(1000)
    │   └─ ← [Return] 
    ├─ [317] TestFixed::pay{value: 200}()
    │   └─ ← [Stop] 
    ├─ [109558] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 441 bytes of code
    └─ ← [Stop] 

  [15176] TestFixedTest::testAttackFixedEvenTimestamp()
    ├─ [0] VM::warp(3000)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [0] AttackFixed::attack{value: 1}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testAttackFixedOddTimestamp() (gas: 15153)
Traces:
  [271661] TestFixedTest::setUp()
    ├─ [58511] → new TestFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 292 bytes of code
    ├─ [0] VM::warp(1000)
    │   └─ ← [Return] 
    ├─ [317] TestFixed::pay{value: 200}()
    │   └─ ← [Stop] 
    ├─ [109558] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 441 bytes of code
    └─ ← [Stop] 

  [15153] TestFixedTest::testAttackFixedOddTimestamp()
    ├─ [0] VM::warp(3001)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [0] AttackFixed::attack{value: 100}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[PASS] testFixedInitialBalance() (gas: 3593)
Traces:
  [3593] TestFixedTest::testFixedInitialBalance()
    ├─ [0] VM::assertEq(200, 200) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testPayEvenTimestampDirect() (gas: 21896)
Traces:
  [21896] TestFixedTest::testPayEvenTimestampDirect()
    ├─ [0] VM::warp(4000)
    │   └─ ← [Return] 
    ├─ [0] VM::deal(SHA-256: [0x0000000000000000000000000000000000000002], 1000)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [317] TestFixed::pay{value: 1}()
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(201, 201) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testPayOddTimestampDirect() (gas: 30027)
Traces:
  [30027] TestFixedTest::testPayOddTimestampDirect()
    ├─ [0] VM::warp(4001)
    │   └─ ← [Return] 
    ├─ [0] VM::deal(RIPEMD-160: [0x0000000000000000000000000000000000000003], 1000)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(RIPEMD-160: [0x0000000000000000000000000000000000000003])
    │   └─ ← [Return] 
    ├─ [8420] TestFixed::pay{value: 1}()
    │   ├─ [600] PRECOMPILES::ripemd{value: 100}(0x)
    │   │   └─ ← [Return] 0x0000000000000000000000009c1185a5c5e9fc54612808977ee8f548b2258d31
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(1099, 1099) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(101, 101) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 3 passed; 2 failed; 0 skipped; finished in 679.26µs (445.82µs CPU time)

Ran 1 test suite in 537.84ms (679.26µs CPU time): 3 tests passed, 2 failed, 0 skipped (5 total tests)

Failing tests:
Encountered 2 failing tests in test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol:TestFixedTest
[FAIL: EvmError: Revert] testAttackFixedEvenTimestamp() (gas: 15176)
[FAIL: EvmError: Revert] testAttackFixedOddTimestamp() (gas: 15153)

Encountered a total of 2 failing tests, 3 tests succeeded
Regenerating: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol

Running forge test: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol (attempt 3)
Passed: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-fixed.t.sol
Test file not found, generating first: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol

Running forge test: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol (attempt 1)
Failed: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol
Error:
Compiler run failed:
Error (2333): Identifier already declared.
 --> test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol:4:1:
  |
4 | import "../src/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The previous declaration is here:
  --> lib/forge-std/src/Test.sol:30:1:
   |
30 | abstract contract Test is TestBase, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils {
   | ^ (Relevant source part starts here and spans across multiple lines).

Error: Compilation failed
Regenerating: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol

Running forge test: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol (attempt 2)
Failed: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 334.67ms
Compiler run successful!

Ran 4 tests for test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol:VulnerabilityTest
[PASS] testAttackWithOddTimestamp() (gas: 297753)
Traces:
  [297753] VulnerabilityTest::testAttackWithOddTimestamp()
    ├─ [0] VM::warp(1)
    │   └─ ← [Return] 
    ├─ [101134] → new Test@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 405 bytes of code
    ├─ [0] VM::deal(Test: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 200)
    │   └─ ← [Return] 
    ├─ [109558] → new Attack@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 441 bytes of code
    ├─ [0] VM::deal(Attack: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [11159] Attack::attack()
    │   ├─ [8685] Test::pay()
    │   │   ├─ [55] Attack::receive{value: 100}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(1000000000000000100 [1e18], 1000000000000000100 [1e18], "Attacker did not receive 100 wei when timestamp was odd") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testDirectPayNoFundsWithEvenTimestamp() (gas: 142219)
Traces:
  [142219] VulnerabilityTest::testDirectPayNoFundsWithEvenTimestamp()
    ├─ [0] VM::warp(4)
    │   └─ ← [Return] 
    ├─ [101134] → new Test@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 405 bytes of code
    ├─ [0] VM::deal(Test: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 200)
    │   └─ ← [Return] 
    ├─ [1127] Test::pay()
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(79228162514264337593543950335 [7.922e28], 79228162514264337593543950335 [7.922e28], "Direct pay wrongly transferred funds when timestamp was even") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testDirectPayReceivesFundsWithOddTimestamp() (gas: 147306)
Traces:
  [147306] VulnerabilityTest::testDirectPayReceivesFundsWithOddTimestamp()
    ├─ [0] VM::warp(3)
    │   └─ ← [Return] 
    ├─ [101134] → new Test@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 405 bytes of code
    ├─ [0] VM::deal(Test: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 200)
    │   └─ ← [Return] 
    ├─ [8678] Test::pay()
    │   ├─ [45] VulnerabilityTest::fallback{value: 100}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] testNoAttackWithEvenTimestamp() (gas: 289979)
Traces:
  [289979] VulnerabilityTest::testNoAttackWithEvenTimestamp()
    ├─ [0] VM::warp(2)
    │   └─ ← [Return] 
    ├─ [101134] → new Test@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 405 bytes of code
    ├─ [0] VM::deal(Test: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 200)
    │   └─ ← [Return] 
    ├─ [109558] → new Attack@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 441 bytes of code
    ├─ [0] VM::deal(Attack: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [3601] Attack::attack()
    │   ├─ [1127] Test::pay()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Attacker wrongly received funds when timestamp was even") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 3 passed; 1 failed; 0 skipped; finished in 580.76µs (433.80µs CPU time)

Ran 1 test suite in 564.02ms (580.76µs CPU time): 3 tests passed, 1 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 1 failing test in test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol:VulnerabilityTest
[FAIL: EvmError: Revert] testDirectPayReceivesFundsWithOddTimestamp() (gas: 147306)

Encountered a total of 1 failing tests, 3 tests succeeded
Regenerating: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol

Running forge test: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol (attempt 3)
Failed: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol
Error:
Compiler run failed:
Error (2333): Identifier already declared.
 --> test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol:4:1:
  |
4 | import "../src/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The previous declaration is here:
  --> lib/forge-std/src/Test.sol:30:1:
   |
30 | abstract contract Test is TestBase, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils {
   | ^ (Relevant source part starts here and spans across multiple lines).

Error: Compilation failed
Regenerating: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol

Running forge test: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol (attempt 4)
Failed: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 422.08ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
  --> test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol:89:9:
   |
89 |         uint initialBalance = USER.balance;
   |         ^^^^^^^^^^^^^^^^^^^


Ran 4 tests for test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol:VulnerabilityTest
[FAIL: EvmError: Revert] testAttackExploit() (gas: 325502)
Traces:
  [325502] VulnerabilityTest::testAttackExploit()
    ├─ [0] VM::warp(3)
    │   └─ ← [Return] 
    ├─ [101134] → new Test@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 405 bytes of code
    ├─ [0] VM::deal(Test: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 200)
    │   └─ ← [Return] 
    ├─ [109558] → new Attack@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 441 bytes of code
    ├─ [1107] Test::time() [staticcall]
    │   └─ ← [Return] 3
    ├─ [0] VM::assertEq(1, 1, "Deployed time should be odd") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] Attack::attack{value: 10}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testExploitWithOddTimestamp() (gas: 161905)
Traces:
  [161905] VulnerabilityTest::testExploitWithOddTimestamp()
    ├─ [0] VM::warp(1)
    │   └─ ← [Return] 
    ├─ [101134] → new Test@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 405 bytes of code
    ├─ [0] VM::deal(Test: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 200)
    │   └─ ← [Return] 
    ├─ [1107] Test::time() [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1, "Deployed time should be odd") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] Test::pay{value: 10}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testNoExploitWithEvenTimestamp() (gas: 161862)
Traces:
  [161862] VulnerabilityTest::testNoExploitWithEvenTimestamp()
    ├─ [0] VM::warp(2)
    │   └─ ← [Return] 
    ├─ [101134] → new Test@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 405 bytes of code
    ├─ [0] VM::deal(Test: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 200)
    │   └─ ← [Return] 
    ├─ [1107] Test::time() [staticcall]
    │   └─ ← [Return] 2
    ├─ [0] VM::assertEq(0, 0, "Deployed time should be even") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] Test::pay{value: 10}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: call didn't revert at a lower depth than cheatcode call depth] testRevertWhenInsufficientFunds() (gas: 153554)
Traces:
  [153554] VulnerabilityTest::testRevertWhenInsufficientFunds()
    ├─ [0] VM::warp(5)
    │   └─ ← [Return] 
    ├─ [101134] → new Test@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 405 bytes of code
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] Test::pay{value: 10}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] call didn't revert at a lower depth than cheatcode call depth

Suite result: FAILED. 0 passed; 4 failed; 0 skipped; finished in 568.70µs (440.33µs CPU time)

Ran 1 test suite in 532.03ms (568.70µs CPU time): 0 tests passed, 4 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 4 failing tests in test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol:VulnerabilityTest
[FAIL: EvmError: Revert] testAttackExploit() (gas: 325502)
[FAIL: EvmError: Revert] testExploitWithOddTimestamp() (gas: 161905)
[FAIL: EvmError: Revert] testNoExploitWithEvenTimestamp() (gas: 161862)
[FAIL: call didn't revert at a lower depth than cheatcode call depth] testRevertWhenInsufficientFunds() (gas: 153554)

Encountered a total of 4 failing tests, 0 tests succeeded
Regenerating: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol

Running forge test: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol (attempt 5)
Failed: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol
Error:
Compiler run failed:
Error (2333): Identifier already declared.
 --> test/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol:4:1:
  |
4 | import "../src/6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The previous declaration is here:
  --> lib/forge-std/src/Test.sol:30:1:
   |
30 | abstract contract Test is TestBase, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils {
   | ^ (Relevant source part starts here and spans across multiple lines).

Error: Compilation failed
Regenerating: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol
Failed after 5 attempts: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol
Deleted test file due to repeated failure: 6.1.1-Incorrect-Use-of-Event-Blockchain-variables-for-Time-vulnerability.t.sol
Test file not found, generating first: 6.1.2-Incorrect-Function-Call-Order-fixed.t.sol

Running forge test: 6.1.2-Incorrect-Function-Call-Order-fixed.t.sol (attempt 1)
Failed: 6.1.2-Incorrect-Function-Call-Order-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 362.68ms
Compiler run successful!

Ran 4 tests for test/6.1.2-Incorrect-Function-Call-Order-fixed.t.sol:EthTxOrderDependenceMinimalTest
[PASS] testAttackExploitFails() (gas: 224759)
Traces:
  [224759] EthTxOrderDependenceMinimalTest::testAttackExploitFails()
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [142988] → new AttackExploitFixed@0xE536720791A7DaDBeBdBCD8c8546fb0791a11901
    │   └─ ← [Return] 608 bytes of code
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Only owner can call claimReward)
    │   └─ ← [Return] 
    ├─ [11149] AttackExploitFixed::attack{value: 1000000000000000000}(12)
    │   ├─ [1552] EthTxOrderDependenceMinimal::claimReward{value: 1000000000000000000}(12)
    │   │   └─ ← [Revert] revert: Only owner can call claimReward
    │   └─ ← [Revert] revert: Only owner can call claimReward
    └─ ← [Stop] 

[PASS] testNonOwnerCannotClaimReward() (gas: 15432)
Traces:
  [15432] EthTxOrderDependenceMinimalTest::testNonOwnerCannotClaimReward()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Only owner can call claimReward)
    │   └─ ← [Return] 
    ├─ [1552] EthTxOrderDependenceMinimal::claimReward{value: 1000000000000000000}(11)
    │   └─ ← [Revert] revert: Only owner can call claimReward
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testOwnerCanClaimReward() (gas: 41558)
Traces:
  [293828] EthTxOrderDependenceMinimalTest::setUp()
    ├─ [229117] → new EthTxOrderDependenceMinimal@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1040 bytes of code
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(SHA-256: [0x0000000000000000000000000000000000000002], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [41558] EthTxOrderDependenceMinimalTest::testOwnerCanClaimReward()
    ├─ [30491] EthTxOrderDependenceMinimal::claimReward{value: 2000000000000000000}(15)
    │   ├─ [45] EthTxOrderDependenceMinimalTest::fallback{value: 2000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] testSubmissionThresholdRevert() (gas: 11968)
Traces:
  [11968] EthTxOrderDependenceMinimalTest::testSubmissionThresholdRevert()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Submission must be > 10)
    │   └─ ← [Return] 
    ├─ [685] EthTxOrderDependenceMinimal::claimReward{value: 1000000000000000000}(10)
    │   └─ ← [Revert] revert: Submission must be > 10
    └─ ← [Stop] 

Suite result: FAILED. 3 passed; 1 failed; 0 skipped; finished in 546.63µs (230.41µs CPU time)

Ran 1 test suite in 532.32ms (546.63µs CPU time): 3 tests passed, 1 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 1 failing test in test/6.1.2-Incorrect-Function-Call-Order-fixed.t.sol:EthTxOrderDependenceMinimalTest
[FAIL: EvmError: Revert] testOwnerCanClaimReward() (gas: 41558)

Encountered a total of 1 failing tests, 3 tests succeeded
Regenerating: 6.1.2-Incorrect-Function-Call-Order-fixed.t.sol

Running forge test: 6.1.2-Incorrect-Function-Call-Order-fixed.t.sol (attempt 2)
Passed: 6.1.2-Incorrect-Function-Call-Order-fixed.t.sol
Test file not found, generating first: 6.1.2-Incorrect-Function-Call-Order-vulnerability.t.sol

Running forge test: 6.1.2-Incorrect-Function-Call-Order-vulnerability.t.sol (attempt 1)
Passed: 6.1.2-Incorrect-Function-Call-Order-vulnerability.t.sol
Test file not found, generating first: 6.1.3-Improper-Locking-fixed.t.sol

Running forge test: 6.1.3-Improper-Locking-fixed.t.sol (attempt 1)
Failed: 6.1.3-Improper-Locking-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 351.84ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:54:18:
   |
54 |                 (address owner, uint256 amount, Lock lockAddr, bytes memory edAddr, bool val, uint256 ts) = abi.decode(
   |                  ^^^^^^^^^^^^^

Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:54:33:
   |
54 |                 (address owner, uint256 amount, Lock lockAddr, bytes memory edAddr, bool val, uint256 ts) = abi.decode(
   |                                 ^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:54:64:
   |
54 |                 (address owner, uint256 amount, Lock lockAddr, bytes memory edAddr, bool val, uint256 ts) = abi.decode(
   |                                                                ^^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:54:85:
   |
54 |                 (address owner, uint256 amount, Lock lockAddr, bytes memory edAddr, bool val, uint256 ts) = abi.decode(
   |                                                                                     ^^^^^^^^

Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:54:95:
   |
54 |                 (address owner, uint256 amount, Lock lockAddr, bytes memory edAddr, bool val, uint256 ts) = abi.decode(
   |                                                                                               ^^^^^^^^^^

Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:90:18:
   |
90 |                 (address owner, uint256 amount, Lock lockAddr, bytes memory edAddr, bool val, uint256 ts) = abi.decode(
   |                  ^^^^^^^^^^^^^

Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:90:33:
   |
90 |                 (address owner, uint256 amount, Lock lockAddr, bytes memory edAddr, bool val, uint256 ts) = abi.decode(
   |                                 ^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:90:64:
   |
90 |                 (address owner, uint256 amount, Lock lockAddr, bytes memory edAddr, bool val, uint256 ts) = abi.decode(
   |                                                                ^^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:90:85:
   |
90 |                 (address owner, uint256 amount, Lock lockAddr, bytes memory edAddr, bool val, uint256 ts) = abi.decode(
   |                                                                                     ^^^^^^^^

Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:90:95:
   |
90 |                 (address owner, uint256 amount, Lock lockAddr, bytes memory edAddr, bool val, uint256 ts) = abi.decode(
   |                                                                                               ^^^^^^^^^^


Ran 2 tests for test/6.1.3-Improper-Locking-fixed.t.sol:ImproperLockingTest
[FAIL: revert: Locked event not found] testForceSendAttack() (gas: 173556)
Traces:
  [657480] ImproperLockingTest::setUp()
    ├─ [414249] → new LockContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2069 bytes of code
    ├─ [151596] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 757 bytes of code
    └─ ← [Stop] 

  [173556] ImproperLockingTest::testForceSendAttack()
    ├─ [0] VM::recordLogs()
    │   └─ ← [Return] 
    ├─ [156292] LockContract::lock{value: 1000000000000000000}(100, 0x30786465616462656566, false)
    │   ├─ [118112] → new Lock@0x104fBc016F4bb334D775a19E8A6510109AC63E00
    │   │   └─ ← [Return] 383 bytes of code
    │   ├─ emit Locked(owner: ImproperLockingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], amount: 1000000000000000000 [1e18], lockAddr: Lock: [0x104fBc016F4bb334D775a19E8A6510109AC63E00], edgewareAddr: 0x30786465616462656566, isValidator: false, timestamp: 1)
    │   └─ ← [Stop] 
    ├─ [0] VM::getRecordedLogs()
    │   └─ ← [Return] [([0x6e0ed1c56084c3f03b3b4352f517072a794da3cd18c46f83ed8c43fafe157e11, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496], 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000104fbc016f4bb334d775a19e8a6510109ac63e0000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a3078646561646265656600000000000000000000000000000000000000000000, 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f)]
    └─ ← [Revert] revert: Locked event not found

[FAIL: revert: Locked event not found] testNormalLocking() (gas: 173585)
Traces:
  [657480] ImproperLockingTest::setUp()
    ├─ [414249] → new LockContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2069 bytes of code
    ├─ [151596] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 757 bytes of code
    └─ ← [Stop] 

  [173585] ImproperLockingTest::testNormalLocking()
    ├─ [0] VM::recordLogs()
    │   └─ ← [Return] 
    ├─ [156292] LockContract::lock{value: 1000000000000000000}(100, 0x307831323334, true)
    │   ├─ [118112] → new Lock@0x104fBc016F4bb334D775a19E8A6510109AC63E00
    │   │   └─ ← [Return] 383 bytes of code
    │   ├─ emit Locked(owner: ImproperLockingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], amount: 1000000000000000000 [1e18], lockAddr: Lock: [0x104fBc016F4bb334D775a19E8A6510109AC63E00], edgewareAddr: 0x307831323334, isValidator: true, timestamp: 1)
    │   └─ ← [Stop] 
    ├─ [0] VM::getRecordedLogs()
    │   └─ ← [Return] [([0x6e0ed1c56084c3f03b3b4352f517072a794da3cd18c46f83ed8c43fafe157e11, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496], 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000104fbc016f4bb334d775a19e8a6510109ac63e0000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000063078313233340000000000000000000000000000000000000000000000000000, 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f)]
    └─ ← [Revert] revert: Locked event not found

Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 474.53µs (262.94µs CPU time)

Ran 1 test suite in 659.31ms (474.53µs CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/6.1.3-Improper-Locking-fixed.t.sol:ImproperLockingTest
[FAIL: revert: Locked event not found] testForceSendAttack() (gas: 173556)
[FAIL: revert: Locked event not found] testNormalLocking() (gas: 173585)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 6.1.3-Improper-Locking-fixed.t.sol

Running forge test: 6.1.3-Improper-Locking-fixed.t.sol (attempt 2)
Failed: 6.1.3-Improper-Locking-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 397.03ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
  --> test/6.1.3-Improper-Locking-fixed.t.sol:40:34:
   |
40 |                 (uint256 amount, address lockAddrAddr, bytes memory edgewareAddr, bool i ...
   |                                  ^^^^^^^^^^^^^^^^^^^^


Ran 2 tests for test/6.1.3-Improper-Locking-fixed.t.sol:ImproperLockingTest
[FAIL: revert: Locked event not found] testForceSendAttack() (gas: 173221)
Traces:
  [657480] ImproperLockingTest::setUp()
    ├─ [414249] → new LockContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2069 bytes of code
    ├─ [151596] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 757 bytes of code
    └─ ← [Stop] 

  [173221] ImproperLockingTest::testForceSendAttack()
    ├─ [0] VM::recordLogs()
    │   └─ ← [Return] 
    ├─ [156292] LockContract::lock{value: 1000000000000000000}(100, 0x61626364, false)
    │   ├─ [118112] → new Lock@0x104fBc016F4bb334D775a19E8A6510109AC63E00
    │   │   └─ ← [Return] 383 bytes of code
    │   ├─ emit Locked(owner: ImproperLockingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], amount: 1000000000000000000 [1e18], lockAddr: Lock: [0x104fBc016F4bb334D775a19E8A6510109AC63E00], edgewareAddr: 0x61626364, isValidator: false, timestamp: 1)
    │   └─ ← [Stop] 
    ├─ [0] VM::getRecordedLogs()
    │   └─ ← [Return] [([0x6e0ed1c56084c3f03b3b4352f517072a794da3cd18c46f83ed8c43fafe157e11, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496], 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000104fbc016f4bb334d775a19e8a6510109ac63e0000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000046162636400000000000000000000000000000000000000000000000000000000, 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f)]
    └─ ← [Revert] revert: Locked event not found

[FAIL: Locked event not found] testNormalLocking() (gas: 175214)
Traces:
  [657480] ImproperLockingTest::setUp()
    ├─ [414249] → new LockContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2069 bytes of code
    ├─ [151596] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 757 bytes of code
    └─ ← [Stop] 

  [175214] ImproperLockingTest::testNormalLocking()
    ├─ [0] VM::recordLogs()
    │   └─ ← [Return] 
    ├─ [156292] LockContract::lock{value: 1000000000000000000}(100, 0x3031323334, true)
    │   ├─ [118112] → new Lock@0x104fBc016F4bb334D775a19E8A6510109AC63E00
    │   │   └─ ← [Return] 383 bytes of code
    │   ├─ emit Locked(owner: ImproperLockingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], amount: 1000000000000000000 [1e18], lockAddr: Lock: [0x104fBc016F4bb334D775a19E8A6510109AC63E00], edgewareAddr: 0x3031323334, isValidator: true, timestamp: 1)
    │   └─ ← [Stop] 
    ├─ [0] VM::getRecordedLogs()
    │   └─ ← [Return] [([0x6e0ed1c56084c3f03b3b4352f517072a794da3cd18c46f83ed8c43fafe157e11, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496], 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000104fbc016f4bb334d775a19e8a6510109ac63e0000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000053031323334000000000000000000000000000000000000000000000000000000, 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f)]
    ├─ [0] VM::assertTrue(false, "Locked event not found") [staticcall]
    │   └─ ← [Revert] Locked event not found
    └─ ← [Revert] Locked event not found

Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 986.55µs (351.49µs CPU time)

Ran 1 test suite in 673.05ms (986.55µs CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/6.1.3-Improper-Locking-fixed.t.sol:ImproperLockingTest
[FAIL: revert: Locked event not found] testForceSendAttack() (gas: 173221)
[FAIL: Locked event not found] testNormalLocking() (gas: 175214)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 6.1.3-Improper-Locking-fixed.t.sol

Running forge test: 6.1.3-Improper-Locking-fixed.t.sol (attempt 3)
Failed: 6.1.3-Improper-Locking-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 420.02ms
Compiler run successful!

Ran 2 tests for test/6.1.3-Improper-Locking-fixed.t.sol:ImproperLockingTest
[FAIL: revert: Locked event not found] testForceSendAttack() (gas: 173576)
Traces:
  [657480] ImproperLockingTest::setUp()
    ├─ [414249] → new LockContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2069 bytes of code
    ├─ [151596] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 757 bytes of code
    └─ ← [Stop] 

  [173576] ImproperLockingTest::testForceSendAttack()
    ├─ [0] VM::recordLogs()
    │   └─ ← [Return] 
    ├─ [156292] LockContract::lock{value: 1000000000000000000}(100, 0x61626364, false)
    │   ├─ [118112] → new Lock@0x104fBc016F4bb334D775a19E8A6510109AC63E00
    │   │   └─ ← [Return] 383 bytes of code
    │   ├─ emit Locked(owner: ImproperLockingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], amount: 1000000000000000000 [1e18], lockAddr: Lock: [0x104fBc016F4bb334D775a19E8A6510109AC63E00], edgewareAddr: 0x61626364, isValidator: false, timestamp: 1)
    │   └─ ← [Stop] 
    ├─ [0] VM::getRecordedLogs()
    │   └─ ← [Return] [([0x6e0ed1c56084c3f03b3b4352f517072a794da3cd18c46f83ed8c43fafe157e11, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496], 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000104fbc016f4bb334d775a19e8a6510109ac63e0000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000046162636400000000000000000000000000000000000000000000000000000000, 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f)]
    └─ ← [Revert] revert: Locked event not found

[FAIL: revert: Locked event not found] testNormalLocking() (gas: 173617)
Traces:
  [657480] ImproperLockingTest::setUp()
    ├─ [414249] → new LockContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2069 bytes of code
    ├─ [151596] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 757 bytes of code
    └─ ← [Stop] 

  [173617] ImproperLockingTest::testNormalLocking()
    ├─ [0] VM::recordLogs()
    │   └─ ← [Return] 
    ├─ [156292] LockContract::lock{value: 1000000000000000000}(100, 0x3031323334, true)
    │   ├─ [118112] → new Lock@0x104fBc016F4bb334D775a19E8A6510109AC63E00
    │   │   └─ ← [Return] 383 bytes of code
    │   ├─ emit Locked(owner: ImproperLockingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], amount: 1000000000000000000 [1e18], lockAddr: Lock: [0x104fBc016F4bb334D775a19E8A6510109AC63E00], edgewareAddr: 0x3031323334, isValidator: true, timestamp: 1)
    │   └─ ← [Stop] 
    ├─ [0] VM::getRecordedLogs()
    │   └─ ← [Return] [([0x6e0ed1c56084c3f03b3b4352f517072a794da3cd18c46f83ed8c43fafe157e11, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496], 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000104fbc016f4bb334d775a19e8a6510109ac63e0000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000053031323334000000000000000000000000000000000000000000000000000000, 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f)]
    └─ ← [Revert] revert: Locked event not found

Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 626.48µs (264.89µs CPU time)

Ran 1 test suite in 677.92ms (626.48µs CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/6.1.3-Improper-Locking-fixed.t.sol:ImproperLockingTest
[FAIL: revert: Locked event not found] testForceSendAttack() (gas: 173576)
[FAIL: revert: Locked event not found] testNormalLocking() (gas: 173617)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 6.1.3-Improper-Locking-fixed.t.sol

Running forge test: 6.1.3-Improper-Locking-fixed.t.sol (attempt 4)
Failed: 6.1.3-Improper-Locking-fixed.t.sol
Error:
Compiler run failed:
Error (9640): Explicit type conversion not allowed from "bytes memory" to "bytes32".
  --> test/6.1.3-Improper-Locking-fixed.t.sol:50:34:
   |
50 |                 assertEq(uint256(bytes32(edgewareAddr)), uint256(bytes32(edge)), "Edgeware address param mismatch");
   |                                  ^^^^^^^^^^^^^^^^^^^^^

Error (9640): Explicit type conversion not allowed from "bytes memory" to "bytes32".
  --> test/6.1.3-Improper-Locking-fixed.t.sol:50:66:
   |
50 |                 assertEq(uint256(bytes32(edgewareAddr)), uint256(bytes32(edge)), "Edgeware address param mismatch");
   |                                                                  ^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 6.1.3-Improper-Locking-fixed.t.sol

Running forge test: 6.1.3-Improper-Locking-fixed.t.sol (attempt 5)
Failed: 6.1.3-Improper-Locking-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 374.93ms
Compiler run successful!

Ran 2 tests for test/6.1.3-Improper-Locking-fixed.t.sol:LockContractTest
[FAIL: revert: Locked event not found] testLockAllowsExtraETHForceSend() (gas: 173558)
Traces:
  [657480] LockContractTest::setUp()
    ├─ [414249] → new LockContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2069 bytes of code
    ├─ [151596] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 757 bytes of code
    └─ ← [Stop] 

  [173558] LockContractTest::testLockAllowsExtraETHForceSend()
    ├─ [0] VM::recordLogs()
    │   └─ ← [Return] 
    ├─ [156292] LockContract::lock{value: 1000000000000000000}(100, 0xdeadbeef, false)
    │   ├─ [118112] → new Lock@0x104fBc016F4bb334D775a19E8A6510109AC63E00
    │   │   └─ ← [Return] 383 bytes of code
    │   ├─ emit Locked(owner: LockContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], amount: 1000000000000000000 [1e18], lockAddr: Lock: [0x104fBc016F4bb334D775a19E8A6510109AC63E00], edgewareAddr: 0xdeadbeef, isValidator: false, timestamp: 1)
    │   └─ ← [Stop] 
    ├─ [0] VM::getRecordedLogs()
    │   └─ ← [Return] [([0x6e0ed1c56084c3f03b3b4352f517072a794da3cd18c46f83ed8c43fafe157e11, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496], 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000104fbc016f4bb334d775a19e8a6510109ac63e0000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004deadbeef00000000000000000000000000000000000000000000000000000000, 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f)]
    └─ ← [Revert] revert: Locked event not found

[FAIL: revert: Locked event not found] testLockEmitsLockedEventAndSetsUpLockProperly() (gas: 173602)
Traces:
  [657480] LockContractTest::setUp()
    ├─ [414249] → new LockContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2069 bytes of code
    ├─ [151596] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 757 bytes of code
    └─ ← [Stop] 

  [173602] LockContractTest::testLockEmitsLockedEventAndSetsUpLockProperly()
    ├─ [0] VM::recordLogs()
    │   └─ ← [Return] 
    ├─ [156292] LockContract::lock{value: 1000000000000000000}(100, 0x00112233, true)
    │   ├─ [118112] → new Lock@0x104fBc016F4bb334D775a19E8A6510109AC63E00
    │   │   └─ ← [Return] 383 bytes of code
    │   ├─ emit Locked(owner: LockContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], amount: 1000000000000000000 [1e18], lockAddr: Lock: [0x104fBc016F4bb334D775a19E8A6510109AC63E00], edgewareAddr: 0x00112233, isValidator: true, timestamp: 1)
    │   └─ ← [Stop] 
    ├─ [0] VM::getRecordedLogs()
    │   └─ ← [Return] [([0x6e0ed1c56084c3f03b3b4352f517072a794da3cd18c46f83ed8c43fafe157e11, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496], 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000104fbc016f4bb334d775a19e8a6510109ac63e0000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040011223300000000000000000000000000000000000000000000000000000000, 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f)]
    └─ ← [Revert] revert: Locked event not found

Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 619.62µs (338.98µs CPU time)

Ran 1 test suite in 670.48ms (619.62µs CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/6.1.3-Improper-Locking-fixed.t.sol:LockContractTest
[FAIL: revert: Locked event not found] testLockAllowsExtraETHForceSend() (gas: 173558)
[FAIL: revert: Locked event not found] testLockEmitsLockedEventAndSetsUpLockProperly() (gas: 173602)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 6.1.3-Improper-Locking-fixed.t.sol
Failed after 5 attempts: 6.1.3-Improper-Locking-fixed.t.sol
Deleted test file due to repeated failure: 6.1.3-Improper-Locking-fixed.t.sol
Test file not found, generating first: 6.1.3-Improper-Locking-vulnerability.t.sol

Running forge test: 6.1.3-Improper-Locking-vulnerability.t.sol (attempt 1)
Failed: 6.1.3-Improper-Locking-vulnerability.t.sol
Error:
Compiler run failed:
Error (4487): No unique declaration found after argument-dependent lookup.
  --> test/6.1.3-Improper-Locking-vulnerability.t.sol:59:33:
   |
59 |         address predictedLock = computeCreateAddress(address(lockContract), 2);
   |                                 ^^^^^^^^^^^^^^^^^^^^
Note: Candidate:
  --> test/6.1.3-Improper-Locking-vulnerability.t.sol:18:5:
   |
18 |     function computeCreateAddress(address creator, uint8 nonce) public pure returns (address) {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdUtils.sol:99:5:
   |
99 |     function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Error: Compilation failed
Regenerating: 6.1.3-Improper-Locking-vulnerability.t.sol

Running forge test: 6.1.3-Improper-Locking-vulnerability.t.sol (attempt 2)
Failed: 6.1.3-Improper-Locking-vulnerability.t.sol
Error:
Compiler run failed:
Error (7576): Undeclared identifier.
  --> test/6.1.3-Improper-Locking-vulnerability.t.sol:56:48:
   |
56 |         vm.expectRevert(abi.encodeWithSelector(Panic.selector, 0x01));
   |                                                ^^^^^

Error: Compilation failed
Regenerating: 6.1.3-Improper-Locking-vulnerability.t.sol

Running forge test: 6.1.3-Improper-Locking-vulnerability.t.sol (attempt 3)
Failed: 6.1.3-Improper-Locking-vulnerability.t.sol
Error:
Compiler run failed:
Error (6933): Expected primary expression.
  --> test/6.1.3-Improper-Locking-vulnerability.t.sol:26:13:
   |
26 |             byte(0xd6),
   |             ^^^^

Error: Compilation failed
Regenerating: 6.1.3-Improper-Locking-vulnerability.t.sol

Running forge test: 6.1.3-Improper-Locking-vulnerability.t.sol (attempt 4)
Failed: 6.1.3-Improper-Locking-vulnerability.t.sol
Error:
Compiler run failed:
Error (6933): Expected primary expression.
  --> test/6.1.3-Improper-Locking-vulnerability.t.sol:17:13:
   |
17 |             byte(0xd6),
   |             ^^^^

Error: Compilation failed
Regenerating: 6.1.3-Improper-Locking-vulnerability.t.sol

Running forge test: 6.1.3-Improper-Locking-vulnerability.t.sol (attempt 5)
Passed: 6.1.3-Improper-Locking-vulnerability.t.sol
Test file not found, generating first: 6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-fixed.t.sol

Running forge test: 6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-fixed.t.sol (attempt 1)
Passed: 6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-fixed.t.sol
Test file not found, generating first: 6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-vulnerability.t.sol

Running forge test: 6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-vulnerability.t.sol (attempt 1)
Failed: 6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 347.24ms
Compiler run successful!

Ran 3 tests for test/6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-vulnerability.t.sol:VulnerableTransactionOrderingTest
[FAIL: log != expected log] testAttackAfterPriceChange() (gas: 40553)
Traces:
  [465839] VulnerableTransactionOrderingTest::setUp()
    ├─ [240525] → new VulnerableTransactionOrdering@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 997 bytes of code
    ├─ [132782] → new AttackVulnerable@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 557 bytes of code
    └─ ← [Stop] 

  [40553] VulnerableTransactionOrderingTest::testAttackAfterPriceChange()
    ├─ [1151] VulnerableTransactionOrdering::price() [staticcall]
    │   └─ ← [Return] 100
    ├─ [0] VM::assertEq(100, 100, "Initial price should be 100") [staticcall]
    │   └─ ← [Return] 
    ├─ [9501] VulnerableTransactionOrdering::setPrice(200)
    │   ├─ emit PriceChange(owner: VulnerableTransactionOrderingTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], price: 200)
    │   └─ ← [Stop] 
    ├─ [1151] VulnerableTransactionOrdering::price() [staticcall]
    │   └─ ← [Return] 200
    ├─ [0] VM::assertEq(200, 200, "Price should be updated to 200") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectEmit(true, false, false, true)
    │   └─ ← [Return] 
    ├─ emit Purchase(buyer: 0x000000000000000000000000000000000000bEEF, price: 200)
    ├─ [6337] AttackVulnerable::executeAttack()
    │   ├─ [3549] VulnerableTransactionOrdering::buy()
    │   │   ├─ emit Purchase(buyer: AttackVulnerable: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], price: 200)
    │   │   └─ ← [Return] 0x00000000000000000000000000000000000000000000000000000000000000c8
    │   └─ ← [Stop] 
    └─ ← [Revert] log != expected log

[FAIL: log != expected log] testAttackBeforePriceChange() (gas: 22198)
Traces:
  [465839] VulnerableTransactionOrderingTest::setUp()
    ├─ [240525] → new VulnerableTransactionOrdering@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 997 bytes of code
    ├─ [132782] → new AttackVulnerable@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 557 bytes of code
    └─ ← [Stop] 

  [22198] VulnerableTransactionOrderingTest::testAttackBeforePriceChange()
    ├─ [1151] VulnerableTransactionOrdering::price() [staticcall]
    │   └─ ← [Return] 100
    ├─ [0] VM::assertEq(100, 100, "Initial price should be 100") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectEmit(true, false, false, true)
    │   └─ ← [Return] 
    ├─ emit Purchase(buyer: 0x000000000000000000000000000000000000bEEF, price: 100)
    ├─ [6337] AttackVulnerable::executeAttack()
    │   ├─ [3549] VulnerableTransactionOrdering::buy()
    │   │   ├─ emit Purchase(buyer: AttackVulnerable: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], price: 100)
    │   │   └─ ← [Return] 0x0000000000000000000000000000000000000000000000000000000000000064
    │   └─ ← [Stop] 
    └─ ← [Revert] log != expected log

[PASS] testOnlyOwnerCanSetPrice() (gas: 9059)
Traces:
  [9059] VulnerableTransactionOrderingTest::testOnlyOwnerCanSetPrice()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  	Not owner)
    │   └─ ← [Return] 
    ├─ [1534] VulnerableTransactionOrdering::setPrice(300)
    │   └─ ← [Revert] revert: Not owner
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 605.20µs (344.41µs CPU time)

Ran 1 test suite in 664.53ms (605.20µs CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-vulnerability.t.sol:VulnerableTransactionOrderingTest
[FAIL: log != expected log] testAttackAfterPriceChange() (gas: 40553)
[FAIL: log != expected log] testAttackBeforePriceChange() (gas: 22198)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-vulnerability.t.sol

Running forge test: 6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-vulnerability.t.sol (attempt 2)
Passed: 6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-vulnerability.t.sol
Test file not found, generating first: 6.1.5-Transfer-Amount-Depending-on-Transaction-Order-fixed.t.sol

Running forge test: 6.1.5-Transfer-Amount-Depending-on-Transaction-Order-fixed.t.sol (attempt 1)
Failed: 6.1.5-Transfer-Amount-Depending-on-Transaction-Order-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 335.16ms
Compiler run successful with warnings:
Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> src/6.1.5-Transfer-Amount-Depending-on-Transaction-Order-fixed.sol:33:25:
   |
33 |     function isProvider(address sender) public pure returns (bool) {
   |                         ^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> src/6.1.5-Transfer-Amount-Depending-on-Transaction-Order-fixed.sol:38:26:
   |
38 |     function isRecipient(address sender) public pure returns (bool) {
   |                          ^^^^^^^^^^^^^^


Ran 3 tests for test/6.1.5-Transfer-Amount-Depending-on-Transaction-Order-fixed.t.sol:AmountSenderFixedTest
[PASS] testAttackFixedExecution() (gas: 297011)
Traces:
  [301211] AmountSenderFixedTest::testAttackFixedExecution()
    ├─ [194037] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 863 bytes of code
    ├─ [44641] AttackFixed::executeAttack()
    │   ├─ [25541] AmountSenderFixed::setAmountOp2(1000)
    │   │   └─ ← [Stop] 
    │   ├─ [2097] AmountSenderFixed::setAmountOp1(1)
    │   │   └─ ← [Stop] 
    │   ├─ [9384] AmountSenderFixed::setTransferAmount()
    │   │   ├─ [55] AttackFixed::receive{value: 1}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(1, 1, "Attack should transfer 1 wei to the attack contract") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testCorrectOrderTransfer() (gas: 44872)
Traces:
  [331143] AmountSenderFixedTest::setUp()
    ├─ [289918] → new AmountSenderFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1344 bytes of code
    ├─ [0] VM::deal(AmountSenderFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [44872] AmountSenderFixedTest::testCorrectOrderTransfer()
    ├─ [25541] AmountSenderFixed::setAmountOp2(1000)
    │   └─ ← [Stop] 
    ├─ [2097] AmountSenderFixed::setAmountOp1(1)
    │   └─ ← [Stop] 
    ├─ [9378] AmountSenderFixed::setTransferAmount()
    │   ├─ [45] AmountSenderFixedTest::fallback{value: 1}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] testRevertWithWrongOrder() (gas: 33818)
Traces:
  [33818] AmountSenderFixedTest::testRevertWithWrongOrder()
    ├─ [25541] AmountSenderFixed::setAmountOp2(1000)
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Operation order error)
    │   └─ ← [Return] 
    ├─ [1286] AmountSenderFixed::setTransferAmount()
    │   └─ ← [Revert] revert: Operation order error
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 814.06µs (359.52µs CPU time)

Ran 1 test suite in 560.14ms (814.06µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/6.1.5-Transfer-Amount-Depending-on-Transaction-Order-fixed.t.sol:AmountSenderFixedTest
[FAIL: EvmError: Revert] testCorrectOrderTransfer() (gas: 44872)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 6.1.5-Transfer-Amount-Depending-on-Transaction-Order-fixed.t.sol

Running forge test: 6.1.5-Transfer-Amount-Depending-on-Transaction-Order-fixed.t.sol (attempt 2)
Passed: 6.1.5-Transfer-Amount-Depending-on-Transaction-Order-fixed.t.sol
Test file not found, generating first: 6.1.5-Transfer-Amount-Depending-on-Transaction-Order-vulnerability.t.sol

Running forge test: 6.1.5-Transfer-Amount-Depending-on-Transaction-Order-vulnerability.t.sol (attempt 1)
Passed: 6.1.5-Transfer-Amount-Depending-on-Transaction-Order-vulnerability.t.sol
Test file not found, generating first: 6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-fixed.t.sol

Running forge test: 6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-fixed.t.sol (attempt 1)
Failed: 6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 352.84ms
Compiler run successful!

Ran 3 tests for test/6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-fixed.t.sol:WalletTest
[FAIL: next call did not revert as expected] testWithdrawRevertsOnDelegatecallFailure() (gas: 153009)
Traces:
  [297031] WalletTest::setUp()
    ├─ [104353] → new Wallet@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 521 bytes of code
    ├─ [92941] → new MockWalletLibrary@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 464 bytes of code
    ├─ [0] VM::etch(0xb794F5eA0ba39494cE839613fffBA74279579268, 0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80633ccfd60b14610030575b600080fd5b61003861003a565b005b600047905060003373ffffffffffffffffffffffffffffffffffffffff168260405161006590610149565b60006040518083038185875af1925050503d80600081146100a2576040519150601f19603f3d011682016040523d82523d6000602084013e6100a7565b606091505b50509050806100eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e29061015e565b60405180910390fd5b5050565b60006100fc600f83610189565b91507f5472616e73666572204661696c656400000000000000000000000000000000006000830152602082019050919050565b600061013c60008361017e565b9150600082019050919050565b60006101548261012f565b9150819050919050565b60006020820190508181036000830152610177816100ef565b9050919050565b600081905092915050565b60008282526020820190509291505056fea264697066735822122031a004b252e0f1216776b240f9036ea6ceb965df56330bca16d399b9aa3a8a5c64736f6c63430008000033)
    │   └─ ← [Return] 
    ├─ [0] VM::deal(Wallet: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [153009] WalletTest::testWithdrawRevertsOnDelegatecallFailure()
    ├─ [0] VM::etch(0xb794F5eA0ba39494cE839613fffBA74279579268, 0x)
    │   └─ ← [Return] 
    ├─ [104353] → new Wallet@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 521 bytes of code
    ├─ [0] VM::deal(Wallet: [0xF62849F9A0B5Bf2913b396098F7c7019b51A820a], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Delegatecall failed)
    │   └─ ← [Return] 
    ├─ [1200] Wallet::withdraw()
    │   ├─ [0] 0xb794F5eA0ba39494cE839613fffBA74279579268::withdraw() [delegatecall]
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    └─ ← [Revert] next call did not revert as expected

[PASS] testWithdrawSendsFundsToCaller() (gas: 52454)
Traces:
  [52454] WalletTest::testWithdrawSendsFundsToCaller()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [37019] Wallet::withdraw()
    │   ├─ [35819] 0xb794F5eA0ba39494cE839613fffBA74279579268::withdraw() [delegatecall]
    │   │   ├─ [3000] ECRecover::fallback{value: 10000000000000000000}()
    │   │   │   └─ ← [Return] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(10000000000000000000 [1e19], 10000000000000000000 [1e19]) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testWithdrawWorksForDifferentUsers() (gas: 396112)
Traces:
  [396112] WalletTest::testWithdrawWorksForDifferentUsers()
    ├─ [104353] → new Wallet@0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
    │   └─ ← [Return] 521 bytes of code
    ├─ [0] VM::etch(0xb794F5eA0ba39494cE839613fffBA74279579268, 0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80633ccfd60b14610030575b600080fd5b61003861003a565b005b600047905060003373ffffffffffffffffffffffffffffffffffffffff168260405161006590610149565b60006040518083038185875af1925050503d80600081146100a2576040519150601f19603f3d011682016040523d82523d6000602084013e6100a7565b606091505b50509050806100eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e29061015e565b60405180910390fd5b5050565b60006100fc600f83610189565b91507f5472616e73666572204661696c656400000000000000000000000000000000006000830152602082019050919050565b600061013c60008361017e565b9150600082019050919050565b60006101548261012f565b9150819050919050565b60006020820190508181036000830152610177816100ef565b9050919050565b600081905092915050565b60008282526020820190509291505056fea264697066735822122031a004b252e0f1216776b240f9036ea6ceb965df56330bca16d399b9aa3a8a5c64736f6c63430008000033)
    │   └─ ← [Return] 
    ├─ [0] VM::deal(Wallet: [0xF62849F9A0B5Bf2913b396098F7c7019b51A820a], 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [37019] Wallet::withdraw()
    │   ├─ [35819] 0xb794F5eA0ba39494cE839613fffBA74279579268::withdraw() [delegatecall]
    │   │   ├─ [3000] ECRecover::fallback{value: 5000000000000000000}()
    │   │   │   └─ ← [Return] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(5000000000000000000 [5e18], 5000000000000000000 [5e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [104353] → new Wallet@0x5991A2dF15A8F6A256D3Ec51E99254Cd3fb576A9
    │   └─ ← [Return] 521 bytes of code
    ├─ [0] VM::etch(0xb794F5eA0ba39494cE839613fffBA74279579268, 0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80633ccfd60b14610030575b600080fd5b61003861003a565b005b600047905060003373ffffffffffffffffffffffffffffffffffffffff168260405161006590610149565b60006040518083038185875af1925050503d80600081146100a2576040519150601f19603f3d011682016040523d82523d6000602084013e6100a7565b606091505b50509050806100eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e29061015e565b60405180910390fd5b5050565b60006100fc600f83610189565b91507f5472616e73666572204661696c656400000000000000000000000000000000006000830152602082019050919050565b600061013c60008361017e565b9150600082019050919050565b60006101548261012f565b9150819050919050565b60006020820190508181036000830152610177816100ef565b9050919050565b600081905092915050565b60008282526020820190509291505056fea264697066735822122031a004b252e0f1216776b240f9036ea6ceb965df56330bca16d399b9aa3a8a5c64736f6c63430008000033)
    │   └─ ← [Return] 
    ├─ [0] VM::deal(Wallet: [0x5991A2dF15A8F6A256D3Ec51E99254Cd3fb576A9], 3000000000000000000 [3e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [34158] Wallet::withdraw()
    │   ├─ [32958] 0xb794F5eA0ba39494cE839613fffBA74279579268::withdraw() [delegatecall]
    │   │   ├─ [60] PRECOMPILES::sha256{value: 3000000000000000000}(0x)
    │   │   │   └─ ← [Return] 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(3000000000000000000 [3e18], 3000000000000000000 [3e18]) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 864.96µs (701.76µs CPU time)

Ran 1 test suite in 713.06ms (864.96µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-fixed.t.sol:WalletTest
[FAIL: next call did not revert as expected] testWithdrawRevertsOnDelegatecallFailure() (gas: 153009)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-fixed.t.sol

Running forge test: 6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-fixed.t.sol (attempt 2)
Passed: 6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-fixed.t.sol
Test file not found, generating first: 6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-vulnerability.t.sol

Running forge test: 6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-vulnerability.t.sol (attempt 1)
Passed: 6.1.6-Transfer-Recipient-Depending-on-Transaction-Order-vulnerability.t.sol
Test file not found, generating first: 6.1.7-Exposed-state-variables-fixed.t.sol

Running forge test: 6.1.7-Exposed-state-variables-fixed.t.sol (attempt 1)
Passed: 6.1.7-Exposed-state-variables-fixed.t.sol
Test file not found, generating first: 6.1.7-Exposed-state-variables-vulnerability.t.sol

Running forge test: 6.1.7-Exposed-state-variables-vulnerability.t.sol (attempt 1)
Passed: 6.1.7-Exposed-state-variables-vulnerability.t.sol
Test file not found, generating first: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol

Running forge test: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol (attempt 1)
Failed: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/6.1.8-Wrong-Transaction-Definition-fixed.t.sol:9:19:
  |
9 |     FixedContract fixed;
  |                   ^^^^^

Error: Compilation failed
Regenerating: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol

Running forge test: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol (attempt 2)
Failed: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 455.04ms
Compiler run successful!

Ran 3 tests for test/6.1.8-Wrong-Transaction-Definition-fixed.t.sol:FixedContractTest
[PASS] testAttackFallbackFailureRecordsDeposit() (gas: 82021)
Traces:
  [82021] FixedContractTest::testAttackFallbackFailureRecordsDeposit()
    ├─ [58862] AttackerFixed::attack{value: 1000000000000000000}(FixedContract: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f])
    │   ├─ [50398] FixedContract::execute{value: 1000000000000000000}()
    │   │   ├─ [343] AttackerFixed::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Revert] revert: AttackFixed: reverting on receiving funds
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [1107] FixedContract::total() [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [1558] FixedContract::pendingWithdrawals(AttackerFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: assertion failed: 1000000000000000000 != 0] testNormalDeposit() (gas: 75257)
Traces:
  [594951] FixedContractTest::setUp()
    ├─ [299137] → new FixedContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1494 bytes of code
    ├─ [204245] → new AttackerFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1020 bytes of code
    └─ ← [Stop] 

  [75257] FixedContractTest::testNormalDeposit()
    ├─ [1107] FixedContract::total() [staticcall]
    │   └─ ← [Return] 0
    ├─ [49997] FixedContract::execute{value: 1000000000000000000}()
    │   ├─ [45] FixedContractTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Stop] 
    ├─ [1107] FixedContract::total() [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [1558] FixedContract::pendingWithdrawals(FixedContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 0) [staticcall]
    │   └─ ← [Revert] assertion failed: 1000000000000000000 != 0
    └─ ← [Revert] assertion failed: 1000000000000000000 != 0

[PASS] testWithdrawFailureForAttacker() (gas: 67562)
Traces:
  [86762] FixedContractTest::testWithdrawFailureForAttacker()
    ├─ [58862] AttackerFixed::attack{value: 1000000000000000000}(FixedContract: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f])
    │   ├─ [50398] FixedContract::execute{value: 1000000000000000000}()
    │   │   ├─ [343] AttackerFixed::receive{value: 1000000000000000000}()
    │   │   │   └─ ← [Revert] revert: AttackFixed: reverting on receiving funds
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(AttackerFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Withdrawal failed)
    │   └─ ← [Return] 
    ├─ [10353] FixedContract::withdraw()
    │   ├─ [343] AttackerFixed::receive{value: 1000000000000000000}()
    │   │   └─ ← [Revert] revert: AttackFixed: reverting on receiving funds
    │   └─ ← [Revert] revert: Withdrawal failed
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 1.32ms (1.08ms CPU time)

Ran 1 test suite in 571.41ms (1.32ms CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/6.1.8-Wrong-Transaction-Definition-fixed.t.sol:FixedContractTest
[FAIL: assertion failed: 1000000000000000000 != 0] testNormalDeposit() (gas: 75257)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol

Running forge test: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol (attempt 3)
Failed: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/6.1.8-Wrong-Transaction-Definition-fixed.t.sol:8:26:
  |
8 |     FixedContract public fixed;
  |                          ^^^^^

Error: Compilation failed
Regenerating: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol

Running forge test: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol (attempt 4)
Failed: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/6.1.8-Wrong-Transaction-Definition-fixed.t.sol:7:26:
  |
7 |     FixedContract public fixed;
  |                          ^^^^^

Error: Compilation failed
Regenerating: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol

Running forge test: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol (attempt 5)
Passed: 6.1.8-Wrong-Transaction-Definition-fixed.t.sol
Test file not found, generating first: 6.1.8-Wrong-Transaction-Definition-vulnerability.t.sol

Running forge test: 6.1.8-Wrong-Transaction-Definition-vulnerability.t.sol (attempt 1)
Passed: 6.1.8-Wrong-Transaction-Definition-vulnerability.t.sol
Test file not found, generating first: 6.2-Inadequate-Input-Validation-fixed.t.sol

===== Test run started: 2025-04-10 17:13:08.029754 =====

Test file not found, generating first: 6.2.1-Improper-Input-Validation-fixed.t.sol

Running forge test: 6.2.1-Improper-Input-Validation-fixed.t.sol (attempt 1)
Passed: 6.2.1-Improper-Input-Validation-fixed.t.sol
Test file not found, generating first: 6.2.1-Improper-Input-Validation-vulnerability.t.sol

Running forge test: 6.2.1-Improper-Input-Validation-vulnerability.t.sol (attempt 1)
Failed: 6.2.1-Improper-Input-Validation-vulnerability.t.sol
Error:
Compiler run failed:
Error (9429): This looks like an address but has an invalid checksum. Correct checksummed address: "0xCafEBAbECAFEbAbEcaFEbabECAfebAbEcAFEBaBe". If this is not used as an address, please prepend '00'. For more information please see https://docs.soliditylang.org/en/develop/types.html#address-literals
SyntaxError: This looks like an address but has an invalid checksum. Correct checksummed address: "0xCafEBAbECAFEbAbEcaFEbabECAfebAbEcAFEBaBe". If this is not used as an address, please prepend '00'. For more information please see https://docs.soliditylang.org/en/develop/types.html#address-literals
  --> test/6.2.1-Improper-Input-Validation-vulnerability.t.sol:15:31:
   |
15 |     address constant VICTIM = 0xCAFEBABECAFEBABECAFEBABECAFEBABECAFEBABE;
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 6.2.1-Improper-Input-Validation-vulnerability.t.sol

Running forge test: 6.2.1-Improper-Input-Validation-vulnerability.t.sol (attempt 2)
Failed: 6.2.1-Improper-Input-Validation-vulnerability.t.sol
Error:
Compiler run failed:
Error (8807): Contract or array type expected.
  --> test/6.2.1-Improper-Input-Validation-vulnerability.t.sol:47:83:
   |
47 |         uint256 combined = uint256(bytes32(abi.encodePacked(bytes20(attackerEOA), new bytes12(0))));
   |                                                                                   ^^^^^^^^^^^

Error: Compilation failed
Regenerating: 6.2.1-Improper-Input-Validation-vulnerability.t.sol

Running forge test: 6.2.1-Improper-Input-Validation-vulnerability.t.sol (attempt 3)
Failed: 6.2.1-Improper-Input-Validation-vulnerability.t.sol
Error:
Compiler run failed:
Error (9429): This looks like an address but has an invalid checksum. Correct checksummed address: "0xbEeF123456789012345678901234567890123456". If this is not used as an address, please prepend '00'. For more information please see https://docs.soliditylang.org/en/develop/types.html#address-literals
SyntaxError: This looks like an address but has an invalid checksum. Correct checksummed address: "0xbEeF123456789012345678901234567890123456". If this is not used as an address, please prepend '00'. For more information please see https://docs.soliditylang.org/en/develop/types.html#address-literals
  --> test/6.2.1-Improper-Input-Validation-vulnerability.t.sol:16:28:
   |
16 |         attacker = address(0xBEEF123456789012345678901234567890123456);
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 6.2.1-Improper-Input-Validation-vulnerability.t.sol

Running forge test: 6.2.1-Improper-Input-Validation-vulnerability.t.sol (attempt 4)
Failed: 6.2.1-Improper-Input-Validation-vulnerability.t.sol
Error:
Compiler run failed:
Error (9640): Explicit type conversion not allowed from "bytes memory" to "bytes32".
  --> test/6.2.1-Improper-Input-Validation-vulnerability.t.sol:67:56:
   |
67 |         address misRecipient = address(uint160(uint256(bytes32(rawTo))));
   |                                                        ^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 6.2.1-Improper-Input-Validation-vulnerability.t.sol

Running forge test: 6.2.1-Improper-Input-Validation-vulnerability.t.sol (attempt 5)
Failed: 6.2.1-Improper-Input-Validation-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 363.51ms
Compiler run successful!

Ran 3 tests for test/6.2.1-Improper-Input-Validation-vulnerability.t.sol:ImproperInputValidationTest
[FAIL: Call with malformed payload should not revert] testMalformedPayloadDoesNotRevert() (gas: 9983)
Traces:
  [602452] ImproperInputValidationTest::setUp()
    ├─ [0] VM::label(Owner: [0x000000000000000000000000000000000000ABcD], "Owner")
    │   └─ ← [Return] 
    ├─ [0] VM::label(Attacker: [0x000000000000000000000000000000000000bEEF], "Attacker")
    │   └─ ← [Return] 
    ├─ [0] VM::label(SomeUser: [0x000000000000000000000000000000000000cafE], "SomeUser")
    │   └─ ← [Return] 
    ├─ [0] VM::prank(Owner: [0x000000000000000000000000000000000000ABcD])
    │   └─ ← [Return] 
    ├─ [241366] → new NonPayloadAttackableToken@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1105 bytes of code
    ├─ [196243] → new Attack@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 874 bytes of code
    ├─ [0] VM::prank(Owner: [0x000000000000000000000000000000000000ABcD])
    │   └─ ← [Return] 
    ├─ [24558] NonPayloadAttackableToken::transfer(Attack: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 500)
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(Owner: [0x000000000000000000000000000000000000ABcD])
    │   └─ ← [Return] 
    ├─ [24558] NonPayloadAttackableToken::transfer(SomeUser: [0x000000000000000000000000000000000000cafE], 100)
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [9983] ImproperInputValidationTest::testMalformedPayloadDoesNotRevert()
    ├─ [0] VM::assertEq(4, 4, "Malformed payload length should be 4 bytes") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(Owner: [0x000000000000000000000000000000000000ABcD])
    │   └─ ← [Return] 
    ├─ [207] NonPayloadAttackableToken::transfer()
    │   └─ ← [Revert] EvmError: Revert
    ├─ [0] VM::assertTrue(false, "Call with malformed payload should not revert") [staticcall]
    │   └─ ← [Revert] Call with malformed payload should not revert
    └─ ← [Revert] Call with malformed payload should not revert

[PASS] testProperTransfer() (gas: 46407)
Traces:
  [46407] ImproperInputValidationTest::testProperTransfer()
    ├─ [1492] NonPayloadAttackableToken::balances(Owner: [0x000000000000000000000000000000000000ABcD]) [staticcall]
    │   └─ ← [Return] 400
    ├─ [1492] NonPayloadAttackableToken::balances(SomeUser: [0x000000000000000000000000000000000000cafE]) [staticcall]
    │   └─ ← [Return] 100
    ├─ [0] VM::prank(Owner: [0x000000000000000000000000000000000000ABcD])
    │   └─ ← [Return] 
    ├─ [13758] NonPayloadAttackableToken::transfer(SomeUser: [0x000000000000000000000000000000000000cafE], 50)
    │   └─ ← [Stop] 
    ├─ [1492] NonPayloadAttackableToken::balances(Owner: [0x000000000000000000000000000000000000ABcD]) [staticcall]
    │   └─ ← [Return] 350
    ├─ [1492] NonPayloadAttackableToken::balances(SomeUser: [0x000000000000000000000000000000000000cafE]) [staticcall]
    │   └─ ← [Return] 150
    ├─ [0] VM::assertEq(350, 350, "Owner balance should decrease by 50") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(150, 150, "User balance should increase by 50") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: revert: Attack failed] testShortPayloadAttack() (gas: 59672)
Traces:
  [602452] ImproperInputValidationTest::setUp()
    ├─ [0] VM::label(Owner: [0x000000000000000000000000000000000000ABcD], "Owner")
    │   └─ ← [Return] 
    ├─ [0] VM::label(Attacker: [0x000000000000000000000000000000000000bEEF], "Attacker")
    │   └─ ← [Return] 
    ├─ [0] VM::label(SomeUser: [0x000000000000000000000000000000000000cafE], "SomeUser")
    │   └─ ← [Return] 
    ├─ [0] VM::prank(Owner: [0x000000000000000000000000000000000000ABcD])
    │   └─ ← [Return] 
    ├─ [241366] → new NonPayloadAttackableToken@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 1105 bytes of code
    ├─ [196243] → new Attack@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 874 bytes of code
    ├─ [0] VM::prank(Owner: [0x000000000000000000000000000000000000ABcD])
    │   └─ ← [Return] 
    ├─ [24558] NonPayloadAttackableToken::transfer(Attack: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 500)
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(Owner: [0x000000000000000000000000000000000000ABcD])
    │   └─ ← [Return] 
    ├─ [24558] NonPayloadAttackableToken::transfer(SomeUser: [0x000000000000000000000000000000000000cafE], 100)
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [59672] ImproperInputValidationTest::testShortPayloadAttack()
    ├─ [1492] NonPayloadAttackableToken::balances(Attack: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]) [staticcall]
    │   └─ ← [Return] 500
    ├─ [1492] NonPayloadAttackableToken::balances(Attacker: [0x000000000000000000000000000000000000bEEF]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(68, 68, "Proper payload length must be 68 bytes") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(67, 67, "Short payload length must be 67 bytes") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(Attacker: [0x000000000000000000000000000000000000bEEF])
    │   └─ ← [Return] 
    ├─ [2828] Attack::attack(0xa9059cbb000000000000000000000000000000000000000000000000000000000000beef00000000000000000000000000000000000000000000000000000000000000)
    │   ├─ [207] NonPayloadAttackableToken::transfer()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] revert: Attack failed
    └─ ← [Revert] revert: Attack failed

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 1.75ms (881.53µs CPU time)

Ran 1 test suite in 562.56ms (1.75ms CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/6.2.1-Improper-Input-Validation-vulnerability.t.sol:ImproperInputValidationTest
[FAIL: Call with malformed payload should not revert] testMalformedPayloadDoesNotRevert() (gas: 9983)
[FAIL: revert: Attack failed] testShortPayloadAttack() (gas: 59672)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 6.2.1-Improper-Input-Validation-vulnerability.t.sol
Failed after 5 attempts: 6.2.1-Improper-Input-Validation-vulnerability.t.sol
Deleted test file due to repeated failure: 6.2.1-Improper-Input-Validation-vulnerability.t.sol
Test file not found, generating first: 6.2.2-Extraneous-Input-Validation-fixed.t.sol

Running forge test: 6.2.2-Extraneous-Input-Validation-fixed.t.sol (attempt 1)
Failed: 6.2.2-Extraneous-Input-Validation-fixed.t.sol
Error:
Compiler run failed:
Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
  --> test/6.2.2-Extraneous-Input-Validation-fixed.t.sol:34:13:
   |
34 |             fail("Should have reverted when x is negative");
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
  --> test/6.2.2-Extraneous-Input-Validation-fixed.t.sol:38:13:
   |
38 |             fail("Unexpected error");
   |             ^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 6.2.2-Extraneous-Input-Validation-fixed.t.sol

Running forge test: 6.2.2-Extraneous-Input-Validation-fixed.t.sol (attempt 2)
Passed: 6.2.2-Extraneous-Input-Validation-fixed.t.sol
Test file not found, generating first: 6.2.2-Extraneous-Input-Validation-vulnerability.t.sol

Running forge test: 6.2.2-Extraneous-Input-Validation-vulnerability.t.sol (attempt 1)
Passed: 6.2.2-Extraneous-Input-Validation-vulnerability.t.sol
Test file not found, generating first: 7.1.1-Integer-Underflow-fixed.t.sol

Running forge test: 7.1.1-Integer-Underflow-fixed.t.sol (attempt 1)
Failed: 7.1.1-Integer-Underflow-fixed.t.sol
Error:
Compiler run failed:
Error (8198): Identifier not found.
  --> test/7.1.1-Integer-Underflow-fixed.t.sol:38:21:
   |
38 |             slot := map.slot
   |                     ^^^^^^^^

Error: Compilation failed
Regenerating: 7.1.1-Integer-Underflow-fixed.t.sol

Running forge test: 7.1.1-Integer-Underflow-fixed.t.sol (attempt 2)
Passed: 7.1.1-Integer-Underflow-fixed.t.sol
Test file not found, generating first: 7.1.1-Integer-Underflow-vulnerability.t.sol

Running forge test: 7.1.1-Integer-Underflow-vulnerability.t.sol (attempt 1)
Passed: 7.1.1-Integer-Underflow-vulnerability.t.sol
Test file not found, generating first: 7.1.2-Integer-Overflow-fixed.t.sol

Running forge test: 7.1.2-Integer-Overflow-fixed.t.sol (attempt 1)
Failed: 7.1.2-Integer-Overflow-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 346.09ms
Compiler run successful!

Ran 2 tests for test/7.1.2-Integer-Overflow-fixed.t.sol:IntegerOverflowMappingSym1FixedTest
[PASS] testNormalAddition() (gas: 50445)
Traces:
  [50445] IntegerOverflowMappingSym1FixedTest::testNormalAddition()
    ├─ [1465] IntegerOverflowMappingSym1Fixed::map(1) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "Mapping should be zero initially") [staticcall]
    │   └─ ← [Return] 
    ├─ [21808] IntegerOverflowMappingSym1Fixed::init(1, 100)
    │   └─ ← [Stop] 
    ├─ [1465] IntegerOverflowMappingSym1Fixed::map(1) [staticcall]
    │   └─ ← [Return] 100
    ├─ [0] VM::assertEq(100, 100, "Mapping after first init should be 100") [staticcall]
    │   └─ ← [Return] 
    ├─ [2608] IntegerOverflowMappingSym1Fixed::init(1, 50)
    │   └─ ← [Stop] 
    ├─ [1465] IntegerOverflowMappingSym1Fixed::map(1) [staticcall]
    │   └─ ← [Return] 150
    ├─ [0] VM::assertEq(150, 150, "Mapping after second init should be 150") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: Error != expected error: panic: arithmetic underflow or overflow (0x11) != SafeMath: addition overflow] testOverflowReverts() (gas: 30940)
Traces:
  [199359] IntegerOverflowMappingSym1FixedTest::setUp()
    ├─ [161008] → new IntegerOverflowMappingSym1Fixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 804 bytes of code
    └─ ← [Stop] 

  [30940] IntegerOverflowMappingSym1FixedTest::testOverflowReverts()
    ├─ [21808] IntegerOverflowMappingSym1Fixed::init(1, 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  afeMath: addition overflow)
    │   └─ ← [Return] 
    ├─ [1651] IntegerOverflowMappingSym1Fixed::init(1, 1)
    │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    └─ ← [Revert] Error != expected error: panic: arithmetic underflow or overflow (0x11) != SafeMath: addition overflow

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 786.31µs (414.96µs CPU time)

Ran 1 test suite in 512.33ms (786.31µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/7.1.2-Integer-Overflow-fixed.t.sol:IntegerOverflowMappingSym1FixedTest
[FAIL: Error != expected error: panic: arithmetic underflow or overflow (0x11) != SafeMath: addition overflow] testOverflowReverts() (gas: 30940)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 7.1.2-Integer-Overflow-fixed.t.sol

Running forge test: 7.1.2-Integer-Overflow-fixed.t.sol (attempt 2)
Passed: 7.1.2-Integer-Overflow-fixed.t.sol
Test file not found, generating first: 7.1.2-Integer-Overflow-vulnerability.t.sol

Running forge test: 7.1.2-Integer-Overflow-vulnerability.t.sol (attempt 1)
Failed: 7.1.2-Integer-Overflow-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "ds-test/test.sol" not found: File not found.
 --> test/7.1.2-Integer-Overflow-vulnerability.t.sol:3:1:
  |
3 | import "ds-test/test.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 7.1.2-Integer-Overflow-vulnerability.t.sol

Running forge test: 7.1.2-Integer-Overflow-vulnerability.t.sol (attempt 2)
Passed: 7.1.2-Integer-Overflow-vulnerability.t.sol
Test file not found, generating first: 7.2.1-Divide-by-Zero-fixed.t.sol

Running forge test: 7.2.1-Divide-by-Zero-fixed.t.sol (attempt 1)
Passed: 7.2.1-Divide-by-Zero-fixed.t.sol
Test file not found, generating first: 7.2.1-Divide-by-Zero-vulnerability.t.sol

Running forge test: 7.2.1-Divide-by-Zero-vulnerability.t.sol (attempt 1)
Failed: 7.2.1-Divide-by-Zero-vulnerability.t.sol
Error:
Compiler run failed:
Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
  --> test/7.2.1-Divide-by-Zero-vulnerability.t.sol:24:13:
   |
24 |             fail("attack() should have reverted due to division by zero");
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 7.2.1-Divide-by-Zero-vulnerability.t.sol

Running forge test: 7.2.1-Divide-by-Zero-vulnerability.t.sol (attempt 2)
Failed: 7.2.1-Divide-by-Zero-vulnerability.t.sol
Error:
Compiler run failed:
Error (6160): Wrong argument count for function call: 1 arguments given but expected 0.
  --> test/7.2.1-Divide-by-Zero-vulnerability.t.sol:24:13:
   |
24 |             fail("attack() should have reverted due to division by zero");
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 7.2.1-Divide-by-Zero-vulnerability.t.sol

Running forge test: 7.2.1-Divide-by-Zero-vulnerability.t.sol (attempt 3)
Passed: 7.2.1-Divide-by-Zero-vulnerability.t.sol
Test file not found, generating first: 7.2.2-Integer-Division-fixed.t.sol

Running forge test: 7.2.2-Integer-Division-fixed.t.sol (attempt 1)
Passed: 7.2.2-Integer-Division-fixed.t.sol
Test file not found, generating first: 7.2.2-Integer-Division-vulnerability.t.sol

Running forge test: 7.2.2-Integer-Division-vulnerability.t.sol (attempt 1)
Failed: 7.2.2-Integer-Division-vulnerability.t.sol
Error:
Compiler run failed:
Error (2558): Exactly one argument expected for explicit type conversion.
  --> test/7.2.2-Integer-Division-vulnerability.t.sol:35:23:
   |
35 |         uint actual = Division().foo();
   |                       ^^^^^^^^^^

Error: Compilation failed
Regenerating: 7.2.2-Integer-Division-vulnerability.t.sol

Running forge test: 7.2.2-Integer-Division-vulnerability.t.sol (attempt 2)
Passed: 7.2.2-Integer-Division-vulnerability.t.sol
Test file not found, generating first: 7.3.1-Truncation-Bugs-fixed.t.sol

Running forge test: 7.3.1-Truncation-Bugs-fixed.t.sol (attempt 1)
Failed: 7.3.1-Truncation-Bugs-fixed.t.sol
Error:
Compiler run failed:
Error (8936): Invalid character in string.
  --> test/7.3.1-Truncation-Bugs-fixed.t.sol:45:31:
   |
45 |         vm.expectRevert(bytes("請傳送超過 uint32 最大全值的 Ether"));
   |                               ^^

Error: Compilation failed
Regenerating: 7.3.1-Truncation-Bugs-fixed.t.sol

Running forge test: 7.3.1-Truncation-Bugs-fixed.t.sol (attempt 2)
Failed: 7.3.1-Truncation-Bugs-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 356.86ms
Compiler run successful!

Ran 2 tests for test/7.3.1-Truncation-Bugs-fixed.t.sol:TruncationBugsFixedTest
[PASS] testAttackRecordsFullValue() (gas: 48136)
Traces:
  [48136] TruncationBugsFixedTest::testAttackRecordsFullValue()
    ├─ [28801] AttackContractFixed::attack{value: 4294967296}()
    │   ├─ [20157] FixedContract::receive{value: 4294967296}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [4736] AttackContractFixed::checkBalance() [staticcall]
    │   ├─ [1541] FixedContract::getBalance(AttackContractFixed: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   │   └─ ← [Return] 4294967296 [4.294e9]
    │   └─ ← [Return] 4294967296 [4.294e9]
    ├─ [0] VM::assertEq(4294967296 [4.294e9], 4294967296 [4.294e9], "The recorded balance should match the sent Ether value.") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: next call did not revert as expected] testAttackRevertForInsufficientEther() (gas: 40264)
Traces:
  [493298] TruncationBugsFixedTest::setUp()
    ├─ [116765] → new FixedContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 583 bytes of code
    ├─ [283923] → new AttackContractFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1312 bytes of code
    └─ ← [Stop] 

  [40264] TruncationBugsFixedTest::testAttackRevertForInsufficientEther()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  )請傳送超過 uint32 最大值的 Ether)
    │   └─ ← [Return] 
    ├─ [28801] AttackContractFixed::attack{value: 100000000000000000}()
    │   ├─ [20157] FixedContract::receive{value: 100000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    └─ ← [Revert] next call did not revert as expected

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 599.99µs (266.10µs CPU time)

Ran 1 test suite in 543.81ms (599.99µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/7.3.1-Truncation-Bugs-fixed.t.sol:TruncationBugsFixedTest
[FAIL: next call did not revert as expected] testAttackRevertForInsufficientEther() (gas: 40264)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 7.3.1-Truncation-Bugs-fixed.t.sol

Running forge test: 7.3.1-Truncation-Bugs-fixed.t.sol (attempt 3)
Failed: 7.3.1-Truncation-Bugs-fixed.t.sol
Error:
Compiler run failed:
Error (8936): Invalid character in string.
  --> test/7.3.1-Truncation-Bugs-fixed.t.sol:29:25:
   |
29 |         vm.expectRevert("請傳送超過 uint32 最大值的 Ether");
   |                         ^^

Error: Compilation failed
Regenerating: 7.3.1-Truncation-Bugs-fixed.t.sol

Running forge test: 7.3.1-Truncation-Bugs-fixed.t.sol (attempt 4)
Passed: 7.3.1-Truncation-Bugs-fixed.t.sol
Test file not found, generating first: 7.3.1-Truncation-Bugs-vulnerability.t.sol

Running forge test: 7.3.1-Truncation-Bugs-vulnerability.t.sol (attempt 1)
Failed: 7.3.1-Truncation-Bugs-vulnerability.t.sol
Error:
Compiler run failed:
Error (8936): Invalid character in string.
  --> test/7.3.1-Truncation-Bugs-vulnerability.t.sol:22:31:
   |
22 |         vm.expectRevert(bytes("請傳送超過 uint32 最大值的 Ether"));
   |                               ^^

Error: Compilation failed
Regenerating: 7.3.1-Truncation-Bugs-vulnerability.t.sol

Running forge test: 7.3.1-Truncation-Bugs-vulnerability.t.sol (attempt 2)
Failed: 7.3.1-Truncation-Bugs-vulnerability.t.sol
Error:
Compiler run failed:
Error (4487): No unique declaration found after argument-dependent lookup.
  --> test/7.3.1-Truncation-Bugs-vulnerability.t.sol:33:9:
   |
33 |         assertEq(actual, expectedTruncated);
   |         ^^^^^^^^
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:67:5:
   |
67 |     function assertEq(bool left, bool right) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:71:5:
   |
71 |     function assertEq(bool left, bool right, string memory err) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:75:5:
   |
75 |     function assertEq(uint256 left, uint256 right) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:79:5:
   |
79 |     function assertEq(uint256 left, uint256 right, string memory err) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:91:5:
   |
91 |     function assertEq(int256 left, int256 right) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
  --> lib/forge-std/src/StdAssertions.sol:95:5:
   |
95 |     function assertEq(int256 left, int256 right, string memory err) internal pure virtual {
   |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:107:5:
    |
107 |     function assertEq(address left, address right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:111:5:
    |
111 |     function assertEq(address left, address right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:115:5:
    |
115 |     function assertEq(bytes32 left, bytes32 right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:119:5:
    |
119 |     function assertEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:131:5:
    |
131 |     function assertEq(string memory left, string memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:135:5:
    |
135 |     function assertEq(string memory left, string memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:139:5:
    |
139 |     function assertEq(bytes memory left, bytes memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:143:5:
    |
143 |     function assertEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:147:5:
    |
147 |     function assertEq(bool[] memory left, bool[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:151:5:
    |
151 |     function assertEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:155:5:
    |
155 |     function assertEq(uint256[] memory left, uint256[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:159:5:
    |
159 |     function assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:163:5:
    |
163 |     function assertEq(int256[] memory left, int256[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:167:5:
    |
167 |     function assertEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:171:5:
    |
171 |     function assertEq(address[] memory left, address[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:175:5:
    |
175 |     function assertEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:179:5:
    |
179 |     function assertEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:183:5:
    |
183 |     function assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:187:5:
    |
187 |     function assertEq(string[] memory left, string[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:191:5:
    |
191 |     function assertEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:195:5:
    |
195 |     function assertEq(bytes[] memory left, bytes[] memory right) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).
Note: Candidate:
   --> lib/forge-std/src/StdAssertions.sol:199:5:
    |
199 |     function assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {
    |     ^ (Relevant source part starts here and spans across multiple lines).

Error: Compilation failed
Regenerating: 7.3.1-Truncation-Bugs-vulnerability.t.sol

Running forge test: 7.3.1-Truncation-Bugs-vulnerability.t.sol (attempt 3)
Passed: 7.3.1-Truncation-Bugs-vulnerability.t.sol
Test file not found, generating first: 7.3.2-Signedness-Bugs-fixed.t.sol

Running forge test: 7.3.2-Signedness-Bugs-fixed.t.sol (attempt 1)
Failed: 7.3.2-Signedness-Bugs-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 345.92ms
Compiler run successful!

Ran 4 tests for test/7.3.2-Signedness-Bugs-fixed.t.sol:FixedWithdrawTest
[PASS] testAttackContract() (gas: 216555)
Traces:
  [216555] FixedWithdrawTest::testAttackContract()
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [129776] → new AttackFixed@0xE536720791A7DaDBeBdBCD8c8546fb0791a11901
    │   └─ ← [Return] 542 bytes of code
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [32561] AttackFixed::attack()
    │   ├─ [29869] FixedWithdraw::withdrawOnce(500000000000000000 [5e17])
    │   │   ├─ [55] AttackFixed::receive{value: 500000000000000000}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(500000000000000000 [5e17], 500000000000000000 [5e17]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(SHA-256: [0x0000000000000000000000000000000000000002])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Already withdrawn)
    │   └─ ← [Return] 
    ├─ [4315] AttackFixed::attack()
    │   ├─ [1613] FixedWithdraw::withdrawOnce(500000000000000000 [5e17])
    │   │   └─ ← [Revert] revert: Already withdrawn
    │   └─ ← [Revert] revert: Already withdrawn
    └─ ← [Stop] 

[PASS] testExceedLimit() (gas: 8184)
Traces:
  [8184] FixedWithdrawTest::testExceedLimit()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Amount exceeds limit)
    │   └─ ← [Return] 
    ├─ [668] FixedWithdraw::withdrawOnce(1000000000000000001 [1e18])
    │   └─ ← [Revert] revert: Amount exceeds limit
    └─ ← [Stop] 

[PASS] testSimulatedNegativeValueConversion() (gas: 8118)
Traces:
  [8118] FixedWithdrawTest::testSimulatedNegativeValueConversion()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Amount exceeds limit)
    │   └─ ← [Return] 
    ├─ [668] FixedWithdraw::withdrawOnce(115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   └─ ← [Revert] revert: Amount exceeds limit
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testValidWithdraw() (gas: 18110)
Traces:
  [269677] FixedWithdrawTest::setUp()
    ├─ [223063] → new FixedWithdraw@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 1114 bytes of code
    ├─ [0] VM::deal(FixedWithdraw: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(ECRecover: [0x0000000000000000000000000000000000000001], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(SHA-256: [0x0000000000000000000000000000000000000002], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [18110] FixedWithdrawTest::testValidWithdraw()
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [11160] FixedWithdraw::withdrawOnce(500000000000000000 [5e17])
    │   ├─ [0] ECRecover::fallback{value: 500000000000000000}()
    │   │   └─ ← [PrecompileOOG] EvmError: PrecompileOOG
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 3 passed; 1 failed; 0 skipped; finished in 1.35ms (737.35µs CPU time)

Ran 1 test suite in 503.88ms (1.35ms CPU time): 3 tests passed, 1 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 1 failing test in test/7.3.2-Signedness-Bugs-fixed.t.sol:FixedWithdrawTest
[FAIL: EvmError: Revert] testValidWithdraw() (gas: 18110)

Encountered a total of 1 failing tests, 3 tests succeeded
Regenerating: 7.3.2-Signedness-Bugs-fixed.t.sol

Running forge test: 7.3.2-Signedness-Bugs-fixed.t.sol (attempt 2)
Passed: 7.3.2-Signedness-Bugs-fixed.t.sol
Test file not found, generating first: 7.3.2-Signedness-Bugs-vulnerability.t.sol

Running forge test: 7.3.2-Signedness-Bugs-vulnerability.t.sol (attempt 1)
Failed: 7.3.2-Signedness-Bugs-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 332.58ms
Compiler run successful!

Ran 3 tests for test/7.3.2-Signedness-Bugs-vulnerability.t.sol:VulnerableWithdrawTest
[FAIL: EvmError: Revert] testAttack() (gas: 18055)
Traces:
  [391538] VulnerableWithdrawTest::setUp()
    ├─ [159002] → new VulnerableWithdraw@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 794 bytes of code
    ├─ [0] VM::deal(VulnerableWithdraw: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   └─ ← [Return] 
    ├─ [134582] → new AttackVulnerable@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 566 bytes of code
    ├─ [0] VM::deal(AttackVulnerable: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [18055] VulnerableWithdrawTest::testAttack()
    ├─ [13874] AttackVulnerable::attack()
    │   ├─ [11162] VulnerableWithdraw::withdrawOnce(-1)
    │   │   ├─ [0] AttackVulnerable::receive{value: 115792089237316195423570985008687907853269984665640564039457584007913129639935}()
    │   │   │   └─ ← [OverflowPayment] EvmError: OverflowPayment
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] testDoubleWithdraw() (gas: 11716)
Traces:
  [391538] VulnerableWithdrawTest::setUp()
    ├─ [159002] → new VulnerableWithdraw@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 794 bytes of code
    ├─ [0] VM::deal(VulnerableWithdraw: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   └─ ← [Return] 
    ├─ [134582] → new AttackVulnerable@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 566 bytes of code
    ├─ [0] VM::deal(AttackVulnerable: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [11716] VulnerableWithdrawTest::testDoubleWithdraw()
    ├─ [8907] VulnerableWithdraw::withdrawOnce(1000000000000000000 [1e18])
    │   ├─ [45] VulnerableWithdrawTest::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] testWithdrawPositiveRevert() (gas: 4751)
Traces:
  [4751] VulnerableWithdrawTest::testWithdrawPositiveRevert()
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return] 
    ├─ [421] VulnerableWithdraw::withdrawOnce(2000000000000000000 [2e18])
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 796.15µs (326.79µs CPU time)

Ran 1 test suite in 511.41ms (796.15µs CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/7.3.2-Signedness-Bugs-vulnerability.t.sol:VulnerableWithdrawTest
[FAIL: EvmError: Revert] testAttack() (gas: 18055)
[FAIL: EvmError: Revert] testDoubleWithdraw() (gas: 11716)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 7.3.2-Signedness-Bugs-vulnerability.t.sol

Running forge test: 7.3.2-Signedness-Bugs-vulnerability.t.sol (attempt 2)
Failed: 7.3.2-Signedness-Bugs-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 353.25ms
Compiler run successful!

Ran 3 tests for test/7.3.2-Signedness-Bugs-vulnerability.t.sol:VulnerableWithdrawTest
[PASS] testAttack() (gas: 43608)
Traces:
  [43608] VulnerableWithdrawTest::testAttack()
    ├─ [32585] AttackVulnerable::attack()
    │   ├─ [29871] VulnerableWithdraw::withdrawOnce(-1)
    │   │   ├─ [55] AttackVulnerable::receive{value: 115792089237316195423570985008687907853269984665640564039457584007913129639935}()
    │   │   │   └─ ← [Stop] 
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testDoubleWithdraw() (gas: 13601)
Traces:
  [391538] VulnerableWithdrawTest::setUp()
    ├─ [159002] → new VulnerableWithdraw@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 794 bytes of code
    ├─ [0] VM::deal(VulnerableWithdraw: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   └─ ← [Return] 
    ├─ [134582] → new AttackVulnerable@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 566 bytes of code
    ├─ [0] VM::deal(AttackVulnerable: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 0)
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [13601] VulnerableWithdrawTest::testDoubleWithdraw()
    ├─ [0] VM::deal(VulnerableWithdrawTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [8907] VulnerableWithdraw::withdrawOnce(500000000000000000 [5e17])
    │   ├─ [45] VulnerableWithdrawTest::fallback{value: 500000000000000000}()
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] testWithdrawPositiveRevert() (gas: 4751)
Traces:
  [4751] VulnerableWithdrawTest::testWithdrawPositiveRevert()
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return] 
    ├─ [421] VulnerableWithdraw::withdrawOnce(2000000000000000000 [2e18])
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 609.14µs (337.96µs CPU time)

Ran 1 test suite in 575.14ms (609.14µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/7.3.2-Signedness-Bugs-vulnerability.t.sol:VulnerableWithdrawTest
[FAIL: EvmError: Revert] testDoubleWithdraw() (gas: 13601)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 7.3.2-Signedness-Bugs-vulnerability.t.sol

Running forge test: 7.3.2-Signedness-Bugs-vulnerability.t.sol (attempt 3)
Passed: 7.3.2-Signedness-Bugs-vulnerability.t.sol
Test file not found, generating first: 8.1.1-Wrong-Caller-Identification-fixed.t.sol

Running forge test: 8.1.1-Wrong-Caller-Identification-fixed.t.sol (attempt 1)
Failed: 8.1.1-Wrong-Caller-Identification-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 352.94ms
Compiler run successful!

Ran 3 tests for test/8.1.1-Wrong-Caller-Identification-fixed.t.sol:FixedUserWalletTest
[FAIL: Attack using intermediary should fail] testAttackFailsUsingIntermediary() (gas: 12698)
Traces:
  [498752] FixedUserWalletTest::setUp()
    ├─ [0] VM::addr(<pk>) [staticcall]
    │   └─ ← [Return] 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf
    ├─ [0] VM::addr(<pk>) [staticcall]
    │   └─ ← [Return] 0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF
    ├─ [183250] → new FixedUserWallet@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 811 bytes of code
    ├─ [176092] → new AttackWalletFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 668 bytes of code
    └─ ← [Stop] 

  [12698] FixedUserWalletTest::testAttackFailsUsingIntermediary()
    ├─ [55] AttackWalletFixed::receive{value: 100000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::assertFalse(true, "Attack using intermediary should fail") [staticcall]
    │   └─ ← [Revert] Attack using intermediary should fail
    └─ ← [Revert] Attack using intermediary should fail

[PASS] testNonOwnerDirectCallFails() (gas: 11156)
Traces:
  [11156] FixedUserWalletTest::testNonOwnerDirectCallFails()
    ├─ [0] VM::addr(<pk>) [staticcall]
    │   └─ ← [Return] 0x6813Eb9362372EEF6200f3b1dbC3f819671cBA69
    ├─ [0] VM::prank(0x6813Eb9362372EEF6200f3b1dbC3f819671cBA69)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  	Not owner)
    │   └─ ← [Return] 
    ├─ [1751] FixedUserWallet::transfer(0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF, 100000000000000000 [1e17])
    │   └─ ← [Revert] revert: Not owner
    └─ ← [Stop] 

[PASS] testOwnerCanTransfer() (gas: 43501)
Traces:
  [43501] FixedUserWalletTest::testOwnerCanTransfer()
    ├─ [33999] FixedUserWallet::transfer(0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF, 500000000000000000 [5e17])
    │   ├─ [0] 0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF::fallback{value: 500000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(500000000000000000 [5e17], 500000000000000000 [5e17], "Destination should receive correct amount") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 911.76µs (444.87µs CPU time)

Ran 1 test suite in 527.64ms (911.76µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.1-Wrong-Caller-Identification-fixed.t.sol:FixedUserWalletTest
[FAIL: Attack using intermediary should fail] testAttackFailsUsingIntermediary() (gas: 12698)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 8.1.1-Wrong-Caller-Identification-fixed.t.sol

Running forge test: 8.1.1-Wrong-Caller-Identification-fixed.t.sol (attempt 2)
Failed: 8.1.1-Wrong-Caller-Identification-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 337.82ms
Compiler run successful!

Ran 3 tests for test/8.1.1-Wrong-Caller-Identification-fixed.t.sol:FixedUserWalletTest
[FAIL: Attack using intermediary should fail] testAttackFailsUsingIntermediary() (gas: 19926)
Traces:
  [452850] FixedUserWalletTest::setUp()
    ├─ [183250] → new FixedUserWallet@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 811 bytes of code
    ├─ [176092] → new AttackWalletFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 668 bytes of code
    └─ ← [Stop] 

  [19926] FixedUserWalletTest::testAttackFailsUsingIntermediary()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  	Not owner)
    │   └─ ← [Return] 
    ├─ [5357] AttackWalletFixed::fallback{value: 100000000000000000}(0x01)
    │   ├─ [1751] FixedUserWallet::transfer(0x0000000000000000000000000000000000000Bad, 100000000000000000 [1e17])
    │   │   └─ ← [Revert] revert: Not owner
    │   └─ ← [Revert] revert: Not owner
    ├─ [0] VM::assertFalse(true, "Attack using intermediary should fail") [staticcall]
    │   └─ ← [Revert] Attack using intermediary should fail
    └─ ← [Revert] Attack using intermediary should fail

[PASS] testNonOwnerDirectCallFails() (gas: 9877)
Traces:
  [9877] FixedUserWalletTest::testNonOwnerDirectCallFails()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000000Bad)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  	Not owner)
    │   └─ ← [Return] 
    ├─ [1751] FixedUserWallet::transfer(0x000000000000000000000000000000000000bEEF, 100000000000000000 [1e17])
    │   └─ ← [Revert] revert: Not owner
    └─ ← [Stop] 

[PASS] testOwnerCanTransfer() (gas: 43501)
Traces:
  [43501] FixedUserWalletTest::testOwnerCanTransfer()
    ├─ [33999] FixedUserWallet::transfer(0x000000000000000000000000000000000000bEEF, 500000000000000000 [5e17])
    │   ├─ [0] 0x000000000000000000000000000000000000bEEF::fallback{value: 500000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(500000000000000000 [5e17], 500000000000000000 [5e17], "Destination should receive correct amount") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: FAILED. 2 passed; 1 failed; 0 skipped; finished in 639.81µs (352.74µs CPU time)

Ran 1 test suite in 526.18ms (639.81µs CPU time): 2 tests passed, 1 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.1-Wrong-Caller-Identification-fixed.t.sol:FixedUserWalletTest
[FAIL: Attack using intermediary should fail] testAttackFailsUsingIntermediary() (gas: 19926)

Encountered a total of 1 failing tests, 2 tests succeeded
Regenerating: 8.1.1-Wrong-Caller-Identification-fixed.t.sol

Running forge test: 8.1.1-Wrong-Caller-Identification-fixed.t.sol (attempt 3)
Passed: 8.1.1-Wrong-Caller-Identification-fixed.t.sol
Test file not found, generating first: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol

Running forge test: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol (attempt 1)
Failed: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 342.94ms
Compiler run successful!

Ran 2 tests for test/8.1.1-Wrong-Caller-Identification-vulnerability.t.sol:WrongCallerIdentificationTest
[FAIL: assertion failed: 10000000000000000000 != 9000000000000000000] testAttackWalletExploit() (gas: 255401)
Traces:
  [239392] WrongCallerIdentificationTest::setUp()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 100000000000000000000 [1e20])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 100000000000000000000 [1e20])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000cafE, 0)
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [183250] → new UserWallet@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 811 bytes of code
    ├─ [1189] UserWallet::owner() [staticcall]
    │   └─ ← [Return] 0x000000000000000000000000000000000000ABcD
    ├─ [0] VM::assertEq(0x000000000000000000000000000000000000ABcD, 0x000000000000000000000000000000000000ABcD) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [255401] WrongCallerIdentificationTest::testAttackWalletExploit()
    ├─ [0] VM::startPrank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [176092] → new AttackWallet@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 668 bytes of code
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [55] AttackWallet::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(10000000000000000000 [1e19], 9000000000000000000 [9e18]) [staticcall]
    │   └─ ← [Revert] assertion failed: 10000000000000000000 != 9000000000000000000
    └─ ← [Revert] assertion failed: 10000000000000000000 != 9000000000000000000

[PASS] testDirectCallFailsForNonOwner() (gas: 10324)
Traces:
  [10324] WrongCallerIdentificationTest::testDirectCallFailsForNonOwner()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  	Not owner)
    │   └─ ← [Return] 
    ├─ [1751] UserWallet::transfer(0x000000000000000000000000000000000000cafE, 1000000000000000000 [1e18])
    │   └─ ← [Revert] revert: Not owner
    └─ ← [Stop] 

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 643.51µs (267.02µs CPU time)

Ran 1 test suite in 489.24ms (643.51µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.1-Wrong-Caller-Identification-vulnerability.t.sol:WrongCallerIdentificationTest
[FAIL: assertion failed: 10000000000000000000 != 9000000000000000000] testAttackWalletExploit() (gas: 255401)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol

Running forge test: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol (attempt 2)
Failed: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol
Error:
Compiler run failed:
Error (9429): This looks like an address but has an invalid checksum. Correct checksummed address: "0x000000000000000000000000000000000000bEEF". If this is not used as an address, please prepend '00'. For more information please see https://docs.soliditylang.org/en/develop/types.html#address-literals
SyntaxError: This looks like an address but has an invalid checksum. Correct checksummed address: "0x000000000000000000000000000000000000bEEF". If this is not used as an address, please prepend '00'. For more information please see https://docs.soliditylang.org/en/develop/types.html#address-literals
 --> test/8.1.1-Wrong-Caller-Identification-vulnerability.t.sol:9:24:
  |
9 |     address attacker = 0x000000000000000000000000000000000000BEEF;
  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol

Running forge test: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol (attempt 3)
Failed: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 351.49ms
Compiler run successful!

Ran 2 tests for test/8.1.1-Wrong-Caller-Identification-vulnerability.t.sol:WrongCallerIdentificationTest
[PASS] testDirectCallReverts() (gas: 224629)
Traces:
  [224629] WrongCallerIdentificationTest::testDirectCallReverts()
    ├─ [183250] → new UserWallet@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 811 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  	Not owner)
    │   └─ ← [Return] 
    ├─ [1751] UserWallet::transfer(0x000000000000000000000000000000000000bEEF, 100000000000000000 [1e17])
    │   └─ ← [Revert] revert: Not owner
    └─ ← [Stop] 

[FAIL: UserWallet balance not reduced correctly: 2000000000000000000 != 1000000000000000000] testExploit() (gas: 442470)
Traces:
  [442470] WrongCallerIdentificationTest::testExploit()
    ├─ [183250] → new UserWallet@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 811 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [176092] → new AttackWallet@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 668 bytes of code
    ├─ [55] AttackWallet::receive{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 1000000000000000000 [1e18], "UserWallet balance not reduced correctly") [staticcall]
    │   └─ ← [Revert] UserWallet balance not reduced correctly: 2000000000000000000 != 1000000000000000000
    └─ ← [Revert] UserWallet balance not reduced correctly: 2000000000000000000 != 1000000000000000000

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 849.21µs (612.32µs CPU time)

Ran 1 test suite in 591.97ms (849.21µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.1-Wrong-Caller-Identification-vulnerability.t.sol:WrongCallerIdentificationTest
[FAIL: UserWallet balance not reduced correctly: 2000000000000000000 != 1000000000000000000] testExploit() (gas: 442470)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol

Running forge test: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol (attempt 4)
Failed: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 345.47ms
Compiler run successful!

Ran 2 tests for test/8.1.1-Wrong-Caller-Identification-vulnerability.t.sol:WrongCallerIdentificationTest
[PASS] testDirectCallReverts() (gas: 8249)
Traces:
  [8249] WrongCallerIdentificationTest::testDirectCallReverts()
    ├─ [0] VM::prank(0x00000000000000000000000000000000000bEEf1)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  	Not owner)
    │   └─ ← [Return] 
    ├─ [1751] UserWallet::transfer(0x00000000000000000000000000000000000bEEf1, 1000000000000000000 [1e18])
    │   └─ ← [Revert] revert: Not owner
    └─ ← [Stop] 

[FAIL: revert: Call to AttackWallet failed] testExploit() (gas: 249476)
Traces:
  [226911] WrongCallerIdentificationTest::setUp()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [183250] → new UserWallet@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 811 bytes of code
    └─ ← [Stop] 

  [249476] WrongCallerIdentificationTest::testExploit()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [176092] → new AttackWallet@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 668 bytes of code
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "UserWallet initial balance incorrect") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] AttackWallet::fallback{value: 1000000000000000000}(0x01)
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] revert: Call to AttackWallet failed

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 688.42µs (303.56µs CPU time)

Ran 1 test suite in 513.84ms (688.42µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.1-Wrong-Caller-Identification-vulnerability.t.sol:WrongCallerIdentificationTest
[FAIL: revert: Call to AttackWallet failed] testExploit() (gas: 249476)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol

Running forge test: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol (attempt 5)
Failed: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 357.56ms
Compiler run successful!

Ran 2 tests for test/8.1.1-Wrong-Caller-Identification-vulnerability.t.sol:WrongCallerIdentificationTest
[PASS] testDirectCallReverts() (gas: 9994)
Traces:
  [9994] WrongCallerIdentificationTest::testDirectCallReverts()
    ├─ [0] VM::prank(0x7B5969C684b101DA876186F1b8f3aB808e308B7c)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  	Not owner)
    │   └─ ← [Return] 
    ├─ [1751] UserWallet::transfer(0x7B5969C684b101DA876186F1b8f3aB808e308B7c, 1000000000000000000 [1e18])
    │   └─ ← [Revert] revert: Not owner
    └─ ← [Stop] 

[FAIL: revert: AttackWallet call failed] testExploit() (gas: 248885)
Traces:
  [227083] WrongCallerIdentificationTest::setUp()
    ├─ [0] VM::deal(0x6E9972213BF459853FA33E28Ab7219e9157C8d02, 2000000000000000000 [2e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x6E9972213BF459853FA33E28Ab7219e9157C8d02)
    │   └─ ← [Return] 
    ├─ [183250] → new UserWallet@0xEadd398B20e30aCc3013495EB17657a54B5D3B4A
    │   └─ ← [Return] 811 bytes of code
    └─ ← [Stop] 

  [248885] WrongCallerIdentificationTest::testExploit()
    ├─ [0] VM::prank(0x7B5969C684b101DA876186F1b8f3aB808e308B7c)
    │   └─ ← [Return] 
    ├─ [176092] → new AttackWallet@0x10D4fE43046C7B0cd10f2Da76B8491B1E651A1DD
    │   └─ ← [Return] 668 bytes of code
    ├─ [0] VM::prank(0x6E9972213BF459853FA33E28Ab7219e9157C8d02)
    │   └─ ← [Return] 
    ├─ [0] AttackWallet::receive{value: 1000000000000000000}()
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] revert: AttackWallet call failed

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 859.45µs (253.46µs CPU time)

Ran 1 test suite in 538.07ms (859.45µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.1-Wrong-Caller-Identification-vulnerability.t.sol:WrongCallerIdentificationTest
[FAIL: revert: AttackWallet call failed] testExploit() (gas: 248885)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol
Failed after 5 attempts: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol
Deleted test file due to repeated failure: 8.1.1-Wrong-Caller-Identification-vulnerability.t.sol
Test file not found, generating first: 8.1.2-Owner-Manipulation-fixed.t.sol

Running forge test: 8.1.2-Owner-Manipulation-fixed.t.sol (attempt 1)
Passed: 8.1.2-Owner-Manipulation-fixed.t.sol
Test file not found, generating first: 8.1.2-Owner-Manipulation-vulnerability.t.sol

Running forge test: 8.1.2-Owner-Manipulation-vulnerability.t.sol (attempt 1)
Passed: 8.1.2-Owner-Manipulation-vulnerability.t.sol
Test file not found, generating first: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol

Running forge test: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol (attempt 1)
Failed: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 361.62ms
Compiler run successful!

Ran 2 tests for test/8.1.3-Missing-verification-for-program-termination-fixed.t.sol:XYZTest
[PASS] testAttackFails() (gas: 10657)
Traces:
  [10657] XYZTest::testAttackFails()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  nly owner can call destroy)
    │   └─ ← [Return] 
    ├─ [3753] Attacker::attack()
    │   ├─ [1249] XYZ::destroy()
    │   │   └─ ← [Revert] revert: Only owner can call destroy
    │   └─ ← [Revert] revert: Only owner can call destroy
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testOwnerCanDestroy() (gas: 8628)
Traces:
  [379874] XYZTest::setUp()
    ├─ [133225] → new XYZ@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 561 bytes of code
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [107158] → new Attacker@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 429 bytes of code
    └─ ← [Stop] 

  [8628] XYZTest::testOwnerCanDestroy()
    ├─ [45] XYZ::fallback{value: 1000000000000000000}()
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 592.27µs (168.03µs CPU time)

Ran 1 test suite in 482.11ms (592.27µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.3-Missing-verification-for-program-termination-fixed.t.sol:XYZTest
[FAIL: EvmError: Revert] testOwnerCanDestroy() (gas: 8628)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol

Running forge test: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol (attempt 2)
Failed: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol
Error:
Compiler run failed:
Error (7000): Function expects 0 arguments but got 1.
  --> test/8.1.3-Missing-verification-for-program-termination-fixed.t.sol:51:44:
   |
51 |         assembly { codeSize := extcodesize(address(xyz)) }
   |                                            ^^^^^^^

Error (1408): Only local variables are supported. To access storage variables, use the ".slot" and ".offset" suffixes.
  --> test/8.1.3-Missing-verification-for-program-termination-fixed.t.sol:51:52:
   |
51 |         assembly { codeSize := extcodesize(address(xyz)) }
   |                                                    ^^^

Error: Compilation failed
Regenerating: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol

Running forge test: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol (attempt 3)
Failed: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 359.54ms
Compiler run successful!

Ran 2 tests for test/8.1.3-Missing-verification-for-program-termination-fixed.t.sol:MissingVerificationForProgramTerminationTest
[PASS] testAttackFails() (gas: 8434)
Traces:
  [8434] MissingVerificationForProgramTerminationTest::testAttackFails()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  nly owner can call destroy)
    │   └─ ← [Return] 
    ├─ [3753] Attacker::attack()
    │   ├─ [1249] XYZ::destroy()
    │   │   └─ ← [Revert] revert: Only owner can call destroy
    │   └─ ← [Revert] revert: Only owner can call destroy
    └─ ← [Stop] 

[FAIL: Contract code should be removed after selfdestruct: 561 != 0] testOwnerCanDestroy() (gas: 13507)
Traces:
  [332824] MissingVerificationForProgramTerminationTest::setUp()
    ├─ [133225] → new XYZ@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 561 bytes of code
    ├─ [107158] → new Attacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 429 bytes of code
    └─ ← [Stop] 

  [13507] MissingVerificationForProgramTerminationTest::testOwnerCanDestroy()
    ├─ [5988] XYZ::destroy()
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::assertEq(561, 0, "Contract code should be removed after selfdestruct") [staticcall]
    │   └─ ← [Revert] Contract code should be removed after selfdestruct: 561 != 0
    └─ ← [Revert] Contract code should be removed after selfdestruct: 561 != 0

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 1.72ms (644.93µs CPU time)

Ran 1 test suite in 515.99ms (1.72ms CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.3-Missing-verification-for-program-termination-fixed.t.sol:MissingVerificationForProgramTerminationTest
[FAIL: Contract code should be removed after selfdestruct: 561 != 0] testOwnerCanDestroy() (gas: 13507)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol

Running forge test: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol (attempt 4)
Failed: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 348.68ms
Compiler run successful!

Ran 2 tests for test/8.1.3-Missing-verification-for-program-termination-fixed.t.sol:MissingVerificationForProgramTerminationTest
[PASS] testAttackFails() (gas: 8434)
Traces:
  [8434] MissingVerificationForProgramTerminationTest::testAttackFails()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  nly owner can call destroy)
    │   └─ ← [Return] 
    ├─ [3753] Attacker::attack()
    │   ├─ [1249] XYZ::destroy()
    │   │   └─ ← [Revert] revert: Only owner can call destroy
    │   └─ ← [Revert] revert: Only owner can call destroy
    └─ ← [Stop] 

[FAIL: Contract code should be removed after selfdestruct: 561 != 0] testOwnerCanDestroy() (gas: 21099)
Traces:
  [332824] MissingVerificationForProgramTerminationTest::setUp()
    ├─ [133225] → new XYZ@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 561 bytes of code
    ├─ [107158] → new Attacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 429 bytes of code
    └─ ← [Stop] 

  [21099] MissingVerificationForProgramTerminationTest::testOwnerCanDestroy()
    ├─ [1211] XYZ::owner() [staticcall]
    │   └─ ← [Return] MissingVerificationForProgramTerminationTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]
    ├─ [0] VM::prank(MissingVerificationForProgramTerminationTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   └─ ← [Return] 
    ├─ [5988] XYZ::destroy()
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::roll(2)
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(561, 0, "Contract code should be removed after selfdestruct") [staticcall]
    │   └─ ← [Revert] Contract code should be removed after selfdestruct: 561 != 0
    └─ ← [Revert] Contract code should be removed after selfdestruct: 561 != 0

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 599.69µs (338.83µs CPU time)

Ran 1 test suite in 498.06ms (599.69µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.3-Missing-verification-for-program-termination-fixed.t.sol:MissingVerificationForProgramTerminationTest
[FAIL: Contract code should be removed after selfdestruct: 561 != 0] testOwnerCanDestroy() (gas: 21099)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol

Running forge test: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol (attempt 5)
Failed: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 346.12ms
Compiler run successful!

Ran 2 tests for test/8.1.3-Missing-verification-for-program-termination-fixed.t.sol:MissingVerificationForProgramTerminationTest
[PASS] testAttackFails() (gas: 9799)
Traces:
  [9799] MissingVerificationForProgramTerminationTest::testAttackFails()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  nly owner can call destroy)
    │   └─ ← [Return] 
    ├─ [3753] Attacker::attack()
    │   ├─ [1249] XYZ::destroy()
    │   │   └─ ← [Revert] revert: Only owner can call destroy
    │   └─ ← [Revert] revert: Only owner can call destroy
    └─ ← [Stop] 

[FAIL: Contract should not respond after being destroyed] testOwnerCanDestroy() (gas: 17000)
Traces:
  [353690] MissingVerificationForProgramTerminationTest::setUp()
    ├─ [133225] → new XYZ@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 561 bytes of code
    ├─ [107158] → new Attacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 429 bytes of code
    └─ ← [Stop] 

  [17000] MissingVerificationForProgramTerminationTest::testOwnerCanDestroy()
    ├─ [0] VM::prank(MissingVerificationForProgramTerminationTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   └─ ← [Return] 
    ├─ [5988] XYZ::destroy()
    │   └─ ← [SelfDestruct] 
    ├─ [1211] XYZ::owner()
    │   └─ ← [Return] MissingVerificationForProgramTerminationTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]
    ├─ [0] VM::assertTrue(false, "Contract should not respond after being destroyed") [staticcall]
    │   └─ ← [Revert] Contract should not respond after being destroyed
    └─ ← [Revert] Contract should not respond after being destroyed

Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 568.46µs (277.14µs CPU time)

Ran 1 test suite in 499.70ms (568.46µs CPU time): 1 tests passed, 1 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.3-Missing-verification-for-program-termination-fixed.t.sol:MissingVerificationForProgramTerminationTest
[FAIL: Contract should not respond after being destroyed] testOwnerCanDestroy() (gas: 17000)

Encountered a total of 1 failing tests, 1 tests succeeded
Regenerating: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol
Failed after 5 attempts: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol
Deleted test file due to repeated failure: 8.1.3-Missing-verification-for-program-termination-fixed.t.sol
Test file not found, generating first: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol

Running forge test: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol (attempt 1)
Failed: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 341.50ms
Compiler run successful!

Ran 1 test for test/8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol:VulnerabilityTest
[FAIL: Post-condition: Vulnerable contract should be destroyed (no code): 132 != 0] testExploitSelfDestruct() (gas: 22512)
Traces:
  [231359] VulnerabilityTest::setUp()
    ├─ [26481] → new XYZ@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [0] VM::deal(XYZ: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [107158] → new Attacker@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 429 bytes of code
    └─ ← [Stop] 

  [22512] VulnerabilityTest::testExploitSelfDestruct()
    ├─ [0] VM::assertGt(132, 0, "Pre-condition: Vulnerable contract should have code") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [7637] Attacker::attack()
    │   ├─ [5121] XYZ::destroy()
    │   │   └─ ← [SelfDestruct] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(132, 0, "Post-condition: Vulnerable contract should be destroyed (no code)") [staticcall]
    │   └─ ← [Revert] Post-condition: Vulnerable contract should be destroyed (no code): 132 != 0
    └─ ← [Revert] Post-condition: Vulnerable contract should be destroyed (no code): 132 != 0

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 531.38µs (152.99µs CPU time)

Ran 1 test suite in 515.75ms (531.38µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol:VulnerabilityTest
[FAIL: Post-condition: Vulnerable contract should be destroyed (no code): 132 != 0] testExploitSelfDestruct() (gas: 22512)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol

Running forge test: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol (attempt 2)
Failed: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 342.88ms
Compiler run successful!

Ran 1 test for test/8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol:VulnerabilityTest
[FAIL: Post-condition: Vulnerable contract should be destroyed (no code): 132 != 0] testExploitSelfDestruct() (gas: 25211)
Traces:
  [236211] VulnerabilityTest::setUp()
    ├─ [26481] → new XYZ@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [0] VM::deal(XYZ: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::assertGt(132, 0, "Pre-condition: Vulnerable contract should have code") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [107158] → new Attacker@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 429 bytes of code
    └─ ← [Stop] 

  [25211] VulnerabilityTest::testExploitSelfDestruct()
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Pre-condition: Vulnerable contract should have 1 ether") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [7637] Attacker::attack()
    │   ├─ [5121] XYZ::destroy()
    │   │   └─ ← [SelfDestruct] 
    │   └─ ← [Stop] 
    ├─ [0] VM::roll(2)
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(132, 0, "Post-condition: Vulnerable contract should be destroyed (no code)") [staticcall]
    │   └─ ← [Revert] Post-condition: Vulnerable contract should be destroyed (no code): 132 != 0
    └─ ← [Revert] Post-condition: Vulnerable contract should be destroyed (no code): 132 != 0

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 441.77µs (82.04µs CPU time)

Ran 1 test suite in 498.91ms (441.77µs CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol:VulnerabilityTest
[FAIL: Post-condition: Vulnerable contract should be destroyed (no code): 132 != 0] testExploitSelfDestruct() (gas: 25211)

Encountered a total of 1 failing tests, 0 tests succeeded
Regenerating: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol

Running forge test: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol (attempt 3)
Failed: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol
Error:
Compiler run failed:
Error (1408): Only local variables are supported. To access storage variables, use the ".slot" and ".offset" suffixes.
  --> test/8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol:44:37:
   |
44 |             codeHash := extcodehash(vulnerable)
   |                                     ^^^^^^^^^^

Error: Compilation failed
Regenerating: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol

Running forge test: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol (attempt 4)
Failed: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 345.21ms
Compiler run successful!

Ran 2 tests for test/8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol:VulnerabilityTest
[FAIL: Contract code should be removed after selfdestruct: 132 != 0] testDestroyDirectly() (gas: 44126)
Traces:
  [228804] VulnerabilityTest::setUp()
    ├─ [26481] → new XYZ@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [0] VM::deal(XYZ: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [107158] → new Attacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 429 bytes of code
    └─ ← [Stop] 

  [44126] VulnerabilityTest::testDestroyDirectly()
    ├─ [0] VM::assertGt(132, 0, "Contract should have code before destruction") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [30121] XYZ::destroy()
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::assertEq(132, 0, "Contract code should be removed after selfdestruct") [staticcall]
    │   └─ ← [Revert] Contract code should be removed after selfdestruct: 132 != 0
    └─ ← [Revert] Contract code should be removed after selfdestruct: 132 != 0

[FAIL: Contract code should be removed after selfdestruct: 132 != 0] testSelfdestructByAttacker() (gas: 23741)
Traces:
  [228804] VulnerabilityTest::setUp()
    ├─ [26481] → new XYZ@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [0] VM::deal(XYZ: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [107158] → new Attacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 429 bytes of code
    └─ ← [Stop] 

  [23741] VulnerabilityTest::testSelfdestructByAttacker()
    ├─ [0] VM::assertGt(132, 0, "Contract should have code before destruction") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::addr(<pk>) [staticcall]
    │   └─ ← [Return] 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf
    ├─ [0] VM::prank(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf)
    │   └─ ← [Return] 
    ├─ [7637] Attacker::attack()
    │   ├─ [5121] XYZ::destroy()
    │   │   └─ ← [SelfDestruct] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(132, 0, "Contract code should be removed after selfdestruct") [staticcall]
    │   └─ ← [Revert] Contract code should be removed after selfdestruct: 132 != 0
    └─ ← [Revert] Contract code should be removed after selfdestruct: 132 != 0

Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 692.62µs (371.56µs CPU time)

Ran 1 test suite in 527.42ms (692.62µs CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol:VulnerabilityTest
[FAIL: Contract code should be removed after selfdestruct: 132 != 0] testDestroyDirectly() (gas: 44126)
[FAIL: Contract code should be removed after selfdestruct: 132 != 0] testSelfdestructByAttacker() (gas: 23741)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol

Running forge test: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol (attempt 5)
Failed: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 339.88ms
Compiler run successful!

Ran 2 tests for test/8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol:VulnerabilityTest
[FAIL: Contract code should be removed after selfdestruct: 132 != 0] testDestroyDirectly() (gas: 21587)
Traces:
  [228804] VulnerabilityTest::setUp()
    ├─ [26481] → new XYZ@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [0] VM::deal(XYZ: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [107158] → new Attacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 429 bytes of code
    └─ ← [Stop] 

  [21587] VulnerabilityTest::testDestroyDirectly()
    ├─ [0] VM::assertGt(132, 0, "Contract should have code before destruction") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::startBroadcast(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [5121] XYZ::destroy()
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::stopBroadcast()
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(132, 0, "Contract code should be removed after selfdestruct") [staticcall]
    │   └─ ← [Revert] Contract code should be removed after selfdestruct: 132 != 0
    └─ ← [Revert] Contract code should be removed after selfdestruct: 132 != 0

[FAIL: Contract code should be removed after selfdestruct: 132 != 0] testSelfdestructByAttacker() (gas: 25650)
Traces:
  [228804] VulnerabilityTest::setUp()
    ├─ [26481] → new XYZ@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 132 bytes of code
    ├─ [0] VM::deal(XYZ: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [107158] → new Attacker@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 429 bytes of code
    └─ ← [Stop] 

  [25650] VulnerabilityTest::testSelfdestructByAttacker()
    ├─ [0] VM::assertGt(132, 0, "Contract should have code before destruction") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::startBroadcast(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [7637] Attacker::attack()
    │   ├─ [5121] XYZ::destroy()
    │   │   └─ ← [SelfDestruct] 
    │   └─ ← [Stop] 
    ├─ [0] VM::stopBroadcast()
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(132, 0, "Contract code should be removed after selfdestruct") [staticcall]
    │   └─ ← [Revert] Contract code should be removed after selfdestruct: 132 != 0
    └─ ← [Revert] Contract code should be removed after selfdestruct: 132 != 0

Suite result: FAILED. 0 passed; 2 failed; 0 skipped; finished in 2.96ms (4.83ms CPU time)

Ran 1 test suite in 512.91ms (2.96ms CPU time): 0 tests passed, 2 failed, 0 skipped (2 total tests)

Failing tests:
Encountered 2 failing tests in test/8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol:VulnerabilityTest
[FAIL: Contract code should be removed after selfdestruct: 132 != 0] testDestroyDirectly() (gas: 21587)
[FAIL: Contract code should be removed after selfdestruct: 132 != 0] testSelfdestructByAttacker() (gas: 25650)

Encountered a total of 2 failing tests, 0 tests succeeded
Regenerating: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol
Failed after 5 attempts: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol
Deleted test file due to repeated failure: 8.1.3-Missing-verification-for-program-termination-vulnerability.t.sol
Test file not found, generating first: 8.2.1-Exposed-private-data-fixed.t.sol

Running forge test: 8.2.1-Exposed-private-data-fixed.t.sol (attempt 1)
Passed: 8.2.1-Exposed-private-data-fixed.t.sol
Test file not found, generating first: 8.2.1-Exposed-private-data-vulnerability.t.sol

Running forge test: 8.2.1-Exposed-private-data-vulnerability.t.sol (attempt 1)
Passed: 8.2.1-Exposed-private-data-vulnerability.t.sol
Test file not found, generating first: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol

Running forge test: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol (attempt 1)
Failed: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 371.32ms
Compiler run successful!

Ran 4 tests for test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:GameFixedTest
[FAIL: assertion failed: 22000000000000000000 != 12000000000000000000] testForceSendExtraFundsIntegration() (gas: 208273)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [208273] GameFixedTest::testForceSendExtraFundsIntegration()
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001111, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001111)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("What is the secret?", "correct horse battery staple")
    │   └─ ← [Stop] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [52305] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 261 bytes of code
    ├─ [0] VM::deal(ForceSender: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [5407] ForceSender::forceSend{value: 10000000000000000000}(GameFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f])
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::assertEq(22000000000000000000 [2.2e19], 12000000000000000000 [1.2e19]) [staticcall]
    │   └─ ← [Revert] assertion failed: 22000000000000000000 != 12000000000000000000
    └─ ← [Revert] assertion failed: 22000000000000000000 != 12000000000000000000

[PASS] testRejectDirectDeposit() (gas: 12784)
Traces:
  [12784] GameFixedTest::testRejectDirectDeposit()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  irect deposits not allowed)
    │   └─ ← [Return] 
    ├─ [62] GameFixed::fallback{value: 1000000000000000000}(0x3078)
    │   └─ ← [Revert] EvmError: Revert
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] testRejectTryFromContract() (gas: 321666)
Traces:
  [321666] GameFixedTest::testRejectTryFromContract()
    ├─ [0] VM::deal(0x0000000000000000000000000000000000003333, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003333)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("What is the secret?", "correct horse battery staple")
    │   └─ ← [Stop] 
    ├─ [168656] → new TryCaller@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 736 bytes of code
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Do not use contracts)
    │   └─ ← [Return] 
    ├─ [10632] TryCaller::callTry{value: 1200000000000000000}("correct horse battery staple")
    │   ├─ [739] GameFixed::Try{value: 1200000000000000000}("correct horse battery staple")
    │   │   └─ ← [Revert] revert: Do not use contracts
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Stop] 

[FAIL: EvmError: Revert] testStartGameAndTryCorrect() (gas: 117754)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [117754] GameFixedTest::testStartGameAndTryCorrect()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("What is the secret?", "correct horse battery staple")
    │   └─ ← [Stop] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000DCbA, 1000000000000000000 [1e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000DCbA)
    │   └─ ← [Return] 
    ├─ [0] GameFixed::Try{value: 1100000000000000000}("correct horse battery staple")
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 2 passed; 2 failed; 0 skipped; finished in 750.15µs (685.05µs CPU time)

Ran 1 test suite in 498.62ms (750.15µs CPU time): 2 tests passed, 2 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 2 failing tests in test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:GameFixedTest
[FAIL: assertion failed: 22000000000000000000 != 12000000000000000000] testForceSendExtraFundsIntegration() (gas: 208273)
[FAIL: EvmError: Revert] testStartGameAndTryCorrect() (gas: 117754)

Encountered a total of 2 failing tests, 2 tests succeeded
Regenerating: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol

Running forge test: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol (attempt 2)
Failed: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 364.98ms
Compiler run successful!

Ran 4 tests for test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:GameFixedTest
[FAIL: Overall balance should include forced funds: 22000000000000000000 != 12000000000000000000] testForceSendExtraFundsIntegration() (gas: 221913)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [221913] GameFixedTest::testForceSendExtraFundsIntegration()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001111, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000DCbA, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("What is the secret?", "correct horse battery staple")
    │   └─ ← [Stop] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Initial prize pool should equal game stake") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001111)
    │   └─ ← [Return] 
    ├─ [52305] → new ForceSender@0xfF9FA8f363F78f9F5658971A4F357ad95130D1F5
    │   └─ ← [Return] 261 bytes of code
    ├─ [0] VM::deal(ForceSender: [0xfF9FA8f363F78f9F5658971A4F357ad95130D1F5], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001111)
    │   └─ ← [Return] 
    ├─ [5407] ForceSender::forceSend{value: 10000000000000000000}(GameFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f])
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::assertEq(22000000000000000000 [2.2e19], 12000000000000000000 [1.2e19], "Overall balance should include forced funds") [staticcall]
    │   └─ ← [Revert] Overall balance should include forced funds: 22000000000000000000 != 12000000000000000000
    └─ ← [Revert] Overall balance should include forced funds: 22000000000000000000 != 12000000000000000000

[FAIL: revert: Direct deposit did not revert] testRejectDirectDeposit() (gas: 13220)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [13220] GameFixedTest::testRejectDirectDeposit()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  irect deposits not allowed)
    │   └─ ← [Return] 
    ├─ [325] GameFixed::receive{value: 1000000000000000000}()
    │   └─ ← [Revert] revert: Direct deposits not allowed
    └─ ← [Revert] revert: Direct deposit did not revert

[PASS] testRejectTryFromContract() (gas: 333408)
Traces:
  [333408] GameFixedTest::testRejectTryFromContract()
    ├─ [0] VM::deal(0x0000000000000000000000000000000000003333, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("What is the secret?", "correct horse battery staple")
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003333)
    │   └─ ← [Return] 
    ├─ [170862] → new TryCaller@0xd8916d4c7911A57958F0f0b2fE35cD0D0160799C
    │   └─ ← [Return] 747 bytes of code
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003333)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Do not use contracts)
    │   └─ ← [Return] 
    ├─ [10632] TryCaller::callTry{value: 1100000000000000000}("correct horse battery staple")
    │   ├─ [739] GameFixed::Try{value: 1100000000000000000}("correct horse battery staple")
    │   │   └─ ← [Revert] revert: Do not use contracts
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Stop] 

[FAIL: revert: Do not use contracts] testStartGameAndTryCorrect() (gas: 123273)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [123273] GameFixedTest::testStartGameAndTryCorrect()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000DCbA, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("What is the secret?", "correct horse battery staple")
    │   └─ ← [Stop] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Prize pool should equal the game stake") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000DCbA)
    │   └─ ← [Return] 
    ├─ [739] GameFixed::Try{value: 1100000000000000000}("correct horse battery staple")
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Revert] revert: Do not use contracts

Suite result: FAILED. 1 passed; 3 failed; 0 skipped; finished in 1.33ms (754.25µs CPU time)

Ran 1 test suite in 557.92ms (1.33ms CPU time): 1 tests passed, 3 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 3 failing tests in test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:GameFixedTest
[FAIL: Overall balance should include forced funds: 22000000000000000000 != 12000000000000000000] testForceSendExtraFundsIntegration() (gas: 221913)
[FAIL: revert: Direct deposit did not revert] testRejectDirectDeposit() (gas: 13220)
[FAIL: revert: Do not use contracts] testStartGameAndTryCorrect() (gas: 123273)

Encountered a total of 3 failing tests, 1 tests succeeded
Regenerating: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol

Running forge test: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol (attempt 3)
Failed: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 398.28ms
Compiler run successful!

Ran 4 tests for test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:GameFixedTest
[FAIL: Overall contract balance should include forced funds: 22000000000000000000 != 12000000000000000000] testForceSendExtraFundsIntegration() (gas: 214101)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [214101] GameFixedTest::testForceSendExtraFundsIntegration()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("What is the secret?", "correct horse battery staple")
    │   └─ ← [Stop] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Initial prize pool should equal game stake") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001111, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001111)
    │   └─ ← [Return] 
    ├─ [52281] → new ForceSender@0xfF9FA8f363F78f9F5658971A4F357ad95130D1F5
    │   └─ ← [Return] 261 bytes of code
    ├─ [0] VM::deal(ForceSender: [0xfF9FA8f363F78f9F5658971A4F357ad95130D1F5], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001111)
    │   └─ ← [Return] 
    ├─ [5407] ForceSender::forceSend{value: 10000000000000000000}(GameFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f])
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::assertEq(22000000000000000000 [2.2e19], 12000000000000000000 [1.2e19], "Overall contract balance should include forced funds") [staticcall]
    │   └─ ← [Revert] Overall contract balance should include forced funds: 22000000000000000000 != 12000000000000000000
    └─ ← [Revert] Overall contract balance should include forced funds: 22000000000000000000 != 12000000000000000000

[FAIL: Direct deposit did not revert: true != false] testRejectDirectDeposit() (gas: 15323)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [15323] GameFixedTest::testRejectDirectDeposit()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  irect deposits not allowed)
    │   └─ ← [Return] 
    ├─ [325] GameFixed::receive{value: 1000000000000000000}()
    │   └─ ← [Revert] revert: Direct deposits not allowed
    ├─ [0] VM::assertEq(true, false, "Direct deposit did not revert") [staticcall]
    │   └─ ← [Revert] Direct deposit did not revert: true != false
    └─ ← [Revert] Direct deposit did not revert: true != false

[PASS] testRejectTryFromContract() (gas: 320612)
Traces:
  [320612] GameFixedTest::testRejectTryFromContract()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("Secret?", "correct horse battery staple")
    │   └─ ← [Stop] 
    ├─ [168656] → new TryCaller@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 736 bytes of code
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Do not use contracts)
    │   └─ ← [Return] 
    ├─ [10632] TryCaller::callTry{value: 1100000000000000000}("correct horse battery staple")
    │   ├─ [739] GameFixed::Try{value: 1100000000000000000}("correct horse battery staple")
    │   │   └─ ← [Revert] revert: Do not use contracts
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Stop] 

[FAIL: revert: Do not use contracts] testStartGameAndTryCorrect() (gas: 118051)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [118051] GameFixedTest::testStartGameAndTryCorrect()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("What is the question?", "correct horse battery staple")
    │   └─ ← [Stop] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Prize pool should equal the game stake") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000DCbA, 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000DCbA)
    │   └─ ← [Return] 
    ├─ [739] GameFixed::Try{value: 1100000000000000000}("correct horse battery staple")
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Revert] revert: Do not use contracts

Suite result: FAILED. 1 passed; 3 failed; 0 skipped; finished in 1.48ms (940.52µs CPU time)

Ran 1 test suite in 532.03ms (1.48ms CPU time): 1 tests passed, 3 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 3 failing tests in test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:GameFixedTest
[FAIL: Overall contract balance should include forced funds: 22000000000000000000 != 12000000000000000000] testForceSendExtraFundsIntegration() (gas: 214101)
[FAIL: Direct deposit did not revert: true != false] testRejectDirectDeposit() (gas: 15323)
[FAIL: revert: Do not use contracts] testStartGameAndTryCorrect() (gas: 118051)

Encountered a total of 3 failing tests, 1 tests succeeded
Regenerating: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol

Running forge test: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol (attempt 4)
Failed: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 358.92ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
  --> test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:81:9:
   |
81 |         uint256 balanceBefore = eoa.balance;
   |         ^^^^^^^^^^^^^^^^^^^^^


Ran 4 tests for test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:GameFixedTest
[FAIL: EvmError: Revert] testForceSendExtraFundsIntegration() (gas: 201067)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [201067] GameFixedTest::testForceSendExtraFundsIntegration()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("Forced funds test", "correct")
    │   └─ ← [Stop] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Initial prize pool should equal game stake") [staticcall]
    │   └─ ← [Return] 
    ├─ [52305] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 261 bytes of code
    ├─ [0] VM::deal(ForceSender: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001111)
    │   └─ ← [Return] 
    ├─ [0] ForceSender::forceSend{value: 10000000000000000000}(GameFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f])
    │   └─ ← [OutOfFunds] EvmError: OutOfFunds
    └─ ← [Revert] EvmError: Revert

[FAIL: Direct deposit did not revert] testRejectDirectDeposit() (gas: 15210)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [15210] GameFixedTest::testRejectDirectDeposit()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  irect deposits not allowed)
    │   └─ ← [Return] 
    ├─ [325] GameFixed::receive{value: 1000000000000000000}()
    │   └─ ← [Revert] revert: Direct deposits not allowed
    ├─ [0] VM::assertTrue(false, "Direct deposit did not revert") [staticcall]
    │   └─ ← [Revert] Direct deposit did not revert
    └─ ← [Revert] Direct deposit did not revert

[FAIL: Try call from a contract did not revert] testRejectTryFromContract() (gas: 410271)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [410271] GameFixedTest::testRejectTryFromContract()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("Secret?", "answer")
    │   └─ ← [Stop] 
    ├─ [262500] → new TryCaller@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1311 bytes of code
    ├─ [0] VM::deal(TryCaller: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Do not use contracts)
    │   └─ ← [Return] 
    ├─ [739] GameFixed::Try{value: 1100000000000000000}("answer")
    │   └─ ← [Revert] revert: Do not use contracts
    ├─ [0] VM::assertTrue(false, "Try call from a contract did not revert") [staticcall]
    │   └─ ← [Revert] Try call from a contract did not revert
    └─ ← [Revert] Try call from a contract did not revert

[FAIL: revert: Do not use contracts] testStartGameAndTryCorrect() (gas: 116168)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [116168] GameFixedTest::testStartGameAndTryCorrect()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000DCbA, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000DCbA)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("What is the question?", "secret")
    │   └─ ← [Stop] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Prize pool should equal the game stake") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000DCbA)
    │   └─ ← [Return] 
    ├─ [739] GameFixed::Try{value: 1100000000000000000}("secret")
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Revert] revert: Do not use contracts

Suite result: FAILED. 0 passed; 4 failed; 0 skipped; finished in 1.25ms (1.20ms CPU time)

Ran 1 test suite in 533.85ms (1.25ms CPU time): 0 tests passed, 4 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 4 failing tests in test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:GameFixedTest
[FAIL: EvmError: Revert] testForceSendExtraFundsIntegration() (gas: 201067)
[FAIL: Direct deposit did not revert] testRejectDirectDeposit() (gas: 15210)
[FAIL: Try call from a contract did not revert] testRejectTryFromContract() (gas: 410271)
[FAIL: revert: Do not use contracts] testStartGameAndTryCorrect() (gas: 116168)

Encountered a total of 4 failing tests, 0 tests succeeded
Regenerating: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol

Running forge test: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol (attempt 5)
Failed: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 352.29ms
Compiler run successful!

Ran 4 tests for test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:GameFixedTest
[FAIL: revert: Do not use contracts] testForceSendExtraFundsIntegration() (gas: 219308)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [219308] GameFixedTest::testForceSendExtraFundsIntegration()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000DCbA, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000DCbA)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("Forced funds test", "correct")
    │   └─ ← [Stop] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Initial prize pool should equal game stake") [staticcall]
    │   └─ ← [Return] 
    ├─ [54681] → new ForceSender@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 273 bytes of code
    ├─ [5431] ForceSender::forceSend(GameFixed: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f])
    │   └─ ← [SelfDestruct] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Prize pool should remain unchanged after forced deposit") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [739] GameFixed::Try{value: 1100000000000000000}("correct")
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Revert] revert: Do not use contracts

[FAIL: revert: Direct deposit did not revert] testRejectDirectDeposit() (gas: 13220)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [13220] GameFixedTest::testRejectDirectDeposit()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  irect deposits not allowed)
    │   └─ ← [Return] 
    ├─ [325] GameFixed::receive{value: 1000000000000000000}()
    │   └─ ← [Revert] revert: Direct deposits not allowed
    └─ ← [Revert] revert: Direct deposit did not revert

[PASS] testRejectTryFromContract() (gas: 322495)
Traces:
  [322495] GameFixedTest::testRejectTryFromContract()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("Secret?", "answer")
    │   └─ ← [Stop] 
    ├─ [168656] → new TryCaller@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 736 bytes of code
    ├─ [0] VM::deal(TryCaller: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 5000000000000000000 [5e18])
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Do not use contracts)
    │   └─ ← [Return] 
    ├─ [10632] TryCaller::callTry{value: 1100000000000000000}("answer")
    │   ├─ [739] GameFixed::Try{value: 1100000000000000000}("answer")
    │   │   └─ ← [Revert] revert: Do not use contracts
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Stop] 

[FAIL: revert: Do not use contracts] testStartGameAndTryCorrect() (gas: 115440)
Traces:
  [578694] GameFixedTest::setUp()
    ├─ [539975] → new GameFixed@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2697 bytes of code
    └─ ← [Stop] 

  [115440] GameFixedTest::testStartGameAndTryCorrect()
    ├─ [0] VM::deal(0x00000000000000000000000000000000cafebabe, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x00000000000000000000000000000000cafebabe)
    │   └─ ← [Return] 
    ├─ [83952] GameFixed::StartGame{value: 2000000000000000000}("What is the question?", "secret")
    │   └─ ← [Stop] 
    ├─ [1195] GameFixed::prizePool() [staticcall]
    │   └─ ← [Return] 2000000000000000000 [2e18]
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18], "Prize pool should equal the game stake") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x00000000000000000000000000000000cafebabe)
    │   └─ ← [Return] 
    ├─ [739] GameFixed::Try{value: 1100000000000000000}("secret")
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Revert] revert: Do not use contracts

Suite result: FAILED. 1 passed; 3 failed; 0 skipped; finished in 646.60µs (379.75µs CPU time)

Ran 1 test suite in 499.44ms (646.60µs CPU time): 1 tests passed, 3 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 3 failing tests in test/8.2.2-Dependency-on-External-State-Data-fixed.t.sol:GameFixedTest
[FAIL: revert: Do not use contracts] testForceSendExtraFundsIntegration() (gas: 219308)
[FAIL: revert: Direct deposit did not revert] testRejectDirectDeposit() (gas: 13220)
[FAIL: revert: Do not use contracts] testStartGameAndTryCorrect() (gas: 115440)

Encountered a total of 3 failing tests, 1 tests succeeded
Regenerating: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol
Failed after 5 attempts: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol
Deleted test file due to repeated failure: 8.2.2-Dependency-on-External-State-Data-fixed.t.sol
Test file not found, generating first: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol

Running forge test: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol (attempt 1)
Failed: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 351.43ms
Compiler run successful!

Ran 3 tests for test/8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol:DependencyOnExternalStateDataTest
[PASS] testContractCallRejected() (gas: 828292)
Traces:
  [852292] DependencyOnExternalStateDataTest::testContractCallRejected()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [414649] → new Game@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 2071 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [63917] Game::StartGame{value: 2000000000000000000}("What is 2+2?", "4")
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [88916] → new AttackInjection@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 338 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [5955] AttackInjection::attack()
    │   └─ ← [SelfDestruct] 
    ├─ [131825] → new MaliciousCaller@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 552 bytes of code
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Do not use contracts)
    │   └─ ← [Return] 
    ├─ [10146] MaliciousCaller::exploit{value: 1500000000000000000}()
    │   ├─ [739] Game::Try{value: 1500000000000000000}("4")
    │   │   └─ ← [Revert] revert: Do not use contracts
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Stop] 

[FAIL: revert: Do not use contracts] testExploitVulnerability() (gas: 694508)
Traces:
  [5618] DependencyOnExternalStateDataTest::setUp()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [694508] DependencyOnExternalStateDataTest::testExploitVulnerability()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [414649] → new Game@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 2071 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [63917] Game::StartGame{value: 2000000000000000000}("What is 2+2?", "4")
    │   └─ ← [Stop] 
    ├─ [1277] Game::questionSender() [staticcall]
    │   └─ ← [Return] 0x000000000000000000000000000000000000ABcD
    ├─ [0] VM::assertEq(0x000000000000000000000000000000000000ABcD, 0x000000000000000000000000000000000000ABcD) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(2000000000000000000 [2e18], 2000000000000000000 [2e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [88916] → new AttackInjection@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 338 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [5955] AttackInjection::attack()
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::assertEq(7000000000000000000 [7e18], 7000000000000000000 [7e18]) [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [739] Game::Try{value: 1500000000000000000}("4")
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Revert] revert: Do not use contracts

[FAIL: revert: Do not use contracts] testIncorrectAnswerDoesNotExploitFunds() (gas: 546074)
Traces:
  [5618] DependencyOnExternalStateDataTest::setUp()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    └─ ← [Stop] 

  [546074] DependencyOnExternalStateDataTest::testIncorrectAnswerDoesNotExploitFunds()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [414649] → new Game@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 2071 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [63917] Game::StartGame{value: 2000000000000000000}("What is 2+2?", "4")
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [739] Game::Try{value: 1500000000000000000}("wrong answer")
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Revert] revert: Do not use contracts

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 667.85µs (484.50µs CPU time)

Ran 1 test suite in 565.99ms (667.85µs CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol:DependencyOnExternalStateDataTest
[FAIL: revert: Do not use contracts] testExploitVulnerability() (gas: 694508)
[FAIL: revert: Do not use contracts] testIncorrectAnswerDoesNotExploitFunds() (gas: 546074)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol

Running forge test: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol (attempt 2)
Failed: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 385.60ms
Compiler run successful!

Ran 3 tests for test/8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol:DependencyOnExternalStateDataTest
[PASS] testContractCallRejected() (gas: 24108)
Traces:
  [24108] DependencyOnExternalStateDataTest::testContractCallRejected()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Do not use contracts)
    │   └─ ← [Return] 
    ├─ [10146] MaliciousCaller::exploit{value: 1500000000000000000}()
    │   ├─ [739] Game::Try{value: 1500000000000000000}("4")
    │   │   └─ ← [Revert] revert: Do not use contracts
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Stop] 

[FAIL: revert: Do not use contracts] testExploitVulnerability() (gas: 153527)
Traces:
  [682156] DependencyOnExternalStateDataTest::setUp()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::startPrank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [414649] → new Game@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 2071 bytes of code
    ├─ [63917] Game::StartGame{value: 2000000000000000000}("What is 2+2?", "4")
    │   └─ ← [Stop] 
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [91783] → new MaliciousCaller@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 352 bytes of code
    └─ ← [Stop] 

  [153527] DependencyOnExternalStateDataTest::testExploitVulnerability()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [88916] → new AttackInjection@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 338 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [5955] AttackInjection::attack()
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::assertEq(7000000000000000000 [7e18], 7000000000000000000 [7e18], "Game balance should include injected funds") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [739] Game::Try{value: 1500000000000000000}("4")
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Revert] revert: Do not use contracts

[FAIL: revert: Do not use contracts] testIncorrectAnswerDoesNotExploitFunds() (gas: 149338)
Traces:
  [682156] DependencyOnExternalStateDataTest::setUp()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::startPrank(0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [414649] → new Game@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 2071 bytes of code
    ├─ [63917] Game::StartGame{value: 2000000000000000000}("What is 2+2?", "4")
    │   └─ ← [Stop] 
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [91783] → new MaliciousCaller@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 352 bytes of code
    └─ ← [Stop] 

  [149338] DependencyOnExternalStateDataTest::testIncorrectAnswerDoesNotExploitFunds()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [88916] → new AttackInjection@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 338 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [5955] AttackInjection::attack()
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [739] Game::Try{value: 1500000000000000000}("wrong answer")
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Revert] revert: Do not use contracts

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 1.87ms (755.07µs CPU time)

Ran 1 test suite in 566.63ms (1.87ms CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol:DependencyOnExternalStateDataTest
[FAIL: revert: Do not use contracts] testExploitVulnerability() (gas: 153527)
[FAIL: revert: Do not use contracts] testIncorrectAnswerDoesNotExploitFunds() (gas: 149338)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol

Running forge test: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol (attempt 3)
Failed: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 422.57ms
Compiler run successful!

Ran 3 tests for test/8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol:DependencyOnExternalStateDataTest
[PASS] testContractCallRejected() (gas: 227015)
Traces:
  [227015] DependencyOnExternalStateDataTest::testContractCallRejected()
    ├─ [168656] → new MaliciousCaller@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 736 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF, 0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Do not use contracts)
    │   └─ ← [Return] 
    ├─ [10610] MaliciousCaller::exploit{value: 1500000000000000000}("4")
    │   ├─ [739] Game::Try{value: 1500000000000000000}("4")
    │   │   └─ ← [Revert] revert: Do not use contracts
    │   └─ ← [Revert] revert: Do not use contracts
    └─ ← [Stop] 

[FAIL: Attacker should profit: 12000000000000000000 != 10500000000000000000] testExploitVulnerability() (gas: 172898)
Traces:
  [539223] DependencyOnExternalStateDataTest::setUp()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD, 0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [414649] → new Game@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 2071 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD, 0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [63917] Game::StartGame{value: 2000000000000000000}("What is 2+2?", "4")
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [172898] DependencyOnExternalStateDataTest::testExploitVulnerability()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF, 0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [88916] → new AttackInjection@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 338 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF, 0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [5955] AttackInjection::attack()
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::assertEq(7000000000000000000 [7e18], 7000000000000000000 [7e18], "Game balance should include injected funds") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF, 0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [9164] Game::Try{value: 1500000000000000000}("4")
    │   ├─ [0] 0x000000000000000000000000000000000000bEEF::fallback{value: 8500000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(0, 0, "Game balance should be drained") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(12000000000000000000 [1.2e19], 10500000000000000000 [1.05e19], "Attacker should profit") [staticcall]
    │   └─ ← [Revert] Attacker should profit: 12000000000000000000 != 10500000000000000000
    └─ ← [Revert] Attacker should profit: 12000000000000000000 != 10500000000000000000

[FAIL: next call did not revert as expected] testIncorrectAnswerDoesNotExploitFunds() (gas: 157154)
Traces:
  [539223] DependencyOnExternalStateDataTest::setUp()
    ├─ [0] VM::deal(0x000000000000000000000000000000000000ABcD, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::deal(0x000000000000000000000000000000000000bEEF, 10000000000000000000 [1e19])
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD, 0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [414649] → new Game@0x01BD1984E7Ad080078C23290B8Fc6912FB7774E3
    │   └─ ← [Return] 2071 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000ABcD, 0x000000000000000000000000000000000000ABcD)
    │   └─ ← [Return] 
    ├─ [63917] Game::StartGame{value: 2000000000000000000}("What is 2+2?", "4")
    │   └─ ← [Stop] 
    └─ ← [Stop] 

  [157154] DependencyOnExternalStateDataTest::testIncorrectAnswerDoesNotExploitFunds()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF, 0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [88916] → new AttackInjection@0x29ced945BB6A5acc52d2A29C7c7e8E5f84Cf299d
    │   └─ ← [Return] 338 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF, 0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [5955] AttackInjection::attack()
    │   └─ ← [SelfDestruct] 
    ├─ [0] VM::assertEq(7000000000000000000 [7e18], 7000000000000000000 [7e18], "Game balance should include injected funds") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF, 0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return] 
    ├─ [1649] Game::Try{value: 1500000000000000000}("wrong answer")
    │   └─ ← [Stop] 
    └─ ← [Revert] next call did not revert as expected

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 774.13µs (262.93µs CPU time)

Ran 1 test suite in 524.72ms (774.13µs CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol:DependencyOnExternalStateDataTest
[FAIL: Attacker should profit: 12000000000000000000 != 10500000000000000000] testExploitVulnerability() (gas: 172898)
[FAIL: next call did not revert as expected] testIncorrectAnswerDoesNotExploitFunds() (gas: 157154)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol

Running forge test: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol (attempt 4)
Failed: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol
Error:
[2m2025-04-10T10:07:48.774750Z[0m [31mERROR[0m [2mfoundry_compilers_artifacts_solc::sources[0m[2m:[0m [3merror[0m[2m=[0m"/mnt/c/Users/2017x/CKLab/llm-gen-solidity-vuln/lib/forge-std/src/stdlib.sol": No such file or directory (os error 2)
Error: failed to resolve file: "/mnt/c/Users/2017x/CKLab/llm-gen-solidity-vuln/lib/forge-std/src/stdlib.sol": No such file or directory (os error 2); check configured remappings
	--> /mnt/c/Users/2017x/CKLab/llm-gen-solidity-vuln/test/8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol
	forge-std/stdlib.sol
Regenerating: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol

Running forge test: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol (attempt 5)
Failed: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol
Error:
Compiler run failed:
Error (7398): Explicit type conversion not allowed from non-payable "address" to "contract Game", which has a payable fallback function.
  --> test/8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol:67:16:
   |
67 |         game = Game(_game);
   |                ^^^^^^^^^^^
Note: Did you mean to declare this variable as "address payable"?
  --> test/8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol:66:17:
   |
66 |     constructor(address _game) {
   |                 ^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol
Failed after 5 attempts: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol
Deleted test file due to repeated failure: 8.2.2-Dependency-on-External-State-Data-vulnerability.t.sol
Test file not found, generating first: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-fixed.t.sol

Running forge test: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-fixed.t.sol (attempt 1)
Failed: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/8.3.1-Incorrect-Verification-of-Cryptographic-Signature-fixed.t.sol:7:18:
  |
7 |     Fixed public fixed;
  |                  ^^^^^

Error: Compilation failed
Regenerating: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-fixed.t.sol

Running forge test: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-fixed.t.sol (attempt 2)
Passed: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-fixed.t.sol
Test file not found, generating first: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-vulnerability.t.sol

Running forge test: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-vulnerability.t.sol (attempt 1)
Failed: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-vulnerability.t.sol
Error:
Compiler run failed:
Error (6275): Source "ds-test/test.sol" not found: File not found.
 --> test/8.3.1-Incorrect-Verification-of-Cryptographic-Signature-vulnerability.t.sol:4:1:
  |
4 | import "ds-test/test.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^

Error: Compilation failed
Regenerating: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-vulnerability.t.sol

Running forge test: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-vulnerability.t.sol (attempt 2)
Passed: 8.3.1-Incorrect-Verification-of-Cryptographic-Signature-vulnerability.t.sol
Test file not found, generating first: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol

Running forge test: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol (attempt 1)
Failed: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol:7:18:
  |
7 |     Fixed public fixed;
  |                  ^^^^^

Error: Compilation failed
Regenerating: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol

Running forge test: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol (attempt 2)
Failed: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol
Error:
Compiler run failed:
Error (2314): Expected identifier but got 'fixed'
 --> test/8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol:7:18:
  |
7 |     Fixed public fixed;
  |                  ^^^^^

Error: Compilation failed
Regenerating: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol

Running forge test: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol (attempt 3)
Passed: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-fixed.t.sol
Test file not found, generating first: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-vulnerability.t.sol

Running forge test: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-vulnerability.t.sol (attempt 1)
Failed: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-vulnerability.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 378.78ms
Compiler run successful with warnings:
Warning (2018): Function state mutability can be restricted to view
  --> test/8.3.2-Improper-Check-against-Signature-Replay-Attacks-vulnerability.t.sol:21:5:
   |
21 |     function _generateSignatures(string memory _message) internal returns (bytes memory, bytes memory) {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 3 tests for test/8.3.2-Improper-Check-against-Signature-Replay-Attacks-vulnerability.t.sol:VulnerableTest
[FAIL: revert: Invalid signature] testAttackContractReplay() (gas: 82840)
Traces:
  [1017922] VulnerableTest::setUp()
    ├─ [0] VM::addr(<pk>) [staticcall]
    │   └─ ← [Return] 0x6E9972213BF459853FA33E28Ab7219e9157C8d02
    ├─ [586823] → new Vulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2825 bytes of code
    ├─ [314154] → new Attack@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1463 bytes of code
    └─ ← [Stop] 

  [82840] VulnerableTest::testAttackContractReplay()
    ├─ [1060] Vulnerable::toEthSignedMessageHash(0xd352737106f6a6a722bd2d1f42acbf75933749be04f9d72d0bc7475861e55b82) [staticcall]
    │   └─ ← [Return] 0x3f54af9f9ffc0e87ce305939518f5d666b8c27a02845dff1ac59b23a5f7ef6e6
    ├─ [0] VM::sign("<pk>", 0x3f54af9f9ffc0e87ce305939518f5d666b8c27a02845dff1ac59b23a5f7ef6e6) [staticcall]
    │   └─ ← [Return] 28, 0x2779757342672c1a8e44d35ea708761d54bd65d5302609d80e4a86563b8a062a, 0x697cd71c05c68784f2c91d1abc7ca9a5e0b631d6ee1090145478f0d7becd510c
    ├─ [50070] Attack::attack("Attack via contract", 0x2779757342672c1a8e44d35ea708761d54bd65d5302609d80e4a86563b8a062a697cd71c05c68784f2c91d1abc7ca9a5e0b631d6ee1090145478f0d7becd510c1c, 0x2779757342672c1a8e44d35ea708761d54bd65d5302609d80e4a86563b8a062a697cd71c05c68784f2c91d1abc7ca9a5e0b631d6ee1090145478f0d7becd510c1b)
    │   ├─ [30958] Vulnerable::processMessage("Attack via contract", 0x2779757342672c1a8e44d35ea708761d54bd65d5302609d80e4a86563b8a062a697cd71c05c68784f2c91d1abc7ca9a5e0b631d6ee1090145478f0d7becd510c1c)
    │   │   ├─ [3000] PRECOMPILES::ecrecover(0x3f54af9f9ffc0e87ce305939518f5d666b8c27a02845dff1ac59b23a5f7ef6e6, 28, 17854800201295068733168737449126882654222705366105344118705814942370388117034, 47713422768226788792596253699282021541903414691771840324704703605871376945420) [staticcall]
    │   │   │   └─ ← [Return] 0x0000000000000000000000006e9972213bf459853fa33e28ab7219e9157c8d02
    │   │   └─ ← [Stop] 
    │   ├─ [10248] Vulnerable::processMessage("Attack via contract", 0x2779757342672c1a8e44d35ea708761d54bd65d5302609d80e4a86563b8a062a697cd71c05c68784f2c91d1abc7ca9a5e0b631d6ee1090145478f0d7becd510c1b)
    │   │   ├─ [3000] PRECOMPILES::ecrecover(0x3f54af9f9ffc0e87ce305939518f5d666b8c27a02845dff1ac59b23a5f7ef6e6, 27, 17854800201295068733168737449126882654222705366105344118705814942370388117034, 47713422768226788792596253699282021541903414691771840324704703605871376945420) [staticcall]
    │   │   │   └─ ← [Return] 0x000000000000000000000000579e3559b4efc36d11c79d2874f2f8a390701d8e
    │   │   └─ ← [Revert] revert: Invalid signature
    │   └─ ← [Revert] revert: Invalid signature
    └─ ← [Revert] revert: Invalid signature

[PASS] testProcessMessageRevertOnDuplicateSignature() (gas: 72375)
Traces:
  [72375] VulnerableTest::testProcessMessageRevertOnDuplicateSignature()
    ├─ [1060] Vulnerable::toEthSignedMessageHash(0x9c456a12ec475a13cc9523cfe76ae7568bf8dd703e82e1ea0d4c5b64c463da68) [staticcall]
    │   └─ ← [Return] 0xd3432b192573919e273fda4a7158b9fca3c78ea2264487a8fc66c56dddcda151
    ├─ [0] VM::sign("<pk>", 0xd3432b192573919e273fda4a7158b9fca3c78ea2264487a8fc66c56dddcda151) [staticcall]
    │   └─ ← [Return] 28, 0x908e6674d79e0335ee94edc074c003bf626b2ed2f2faeefc9cb492b5187cb9b6, 0x1cfd811b66cb87e2c873fd6d5f3fe776eee5a2af7f465dcf7d695fffcecec4f0
    ├─ [30958] Vulnerable::processMessage("Duplicate Test", 0x908e6674d79e0335ee94edc074c003bf626b2ed2f2faeefc9cb492b5187cb9b61cfd811b66cb87e2c873fd6d5f3fe776eee5a2af7f465dcf7d695fffcecec4f01c)
    │   ├─ [3000] PRECOMPILES::ecrecover(0xd3432b192573919e273fda4a7158b9fca3c78ea2264487a8fc66c56dddcda151, 28, 65384649607377221825644556927019043043067359738958582550843041364546030451126, 13112663131743267572286451064289215966778673439092793984733769043997598074096) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000006e9972213bf459853fa33e28ab7219e9157c8d02
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Message already processed)
    │   └─ ← [Return] 
    ├─ [3935] Vulnerable::processMessage("Duplicate Test", 0x908e6674d79e0335ee94edc074c003bf626b2ed2f2faeefc9cb492b5187cb9b61cfd811b66cb87e2c873fd6d5f3fe776eee5a2af7f465dcf7d695fffcecec4f01c)
    │   └─ ← [Revert] revert: Message already processed
    └─ ← [Stop] 

[FAIL: revert: Invalid signature] testReplayAttackWithAlteredSignature() (gas: 76868)
Traces:
  [1017922] VulnerableTest::setUp()
    ├─ [0] VM::addr(<pk>) [staticcall]
    │   └─ ← [Return] 0x6E9972213BF459853FA33E28Ab7219e9157C8d02
    ├─ [586823] → new Vulnerable@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2825 bytes of code
    ├─ [314154] → new Attack@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1463 bytes of code
    └─ ← [Stop] 

  [76868] VulnerableTest::testReplayAttackWithAlteredSignature()
    ├─ [1060] Vulnerable::toEthSignedMessageHash(0xb6e16d27ac5ab427a7f68900ac5559ce272dc6c37c82b3e052246c82244c50e4) [staticcall]
    │   └─ ← [Return] 0xaede136aec57f44c09c9fd67c2eba978b40b353f58a6b03a44d94a5c95ed5e20
    ├─ [0] VM::sign("<pk>", 0xaede136aec57f44c09c9fd67c2eba978b40b353f58a6b03a44d94a5c95ed5e20) [staticcall]
    │   └─ ← [Return] 27, 0x04a7c1640468915fcb4802b6dcf156e81ac1c25bf70628e1a8290372529d7c90, 0x363e57982989afa4e6797cccfe62102aecc89258348cd73be1abbac2dfd30590
    ├─ [30958] Vulnerable::processMessage("Hello, world!", 0x04a7c1640468915fcb4802b6dcf156e81ac1c25bf70628e1a8290372529d7c90363e57982989afa4e6797cccfe62102aecc89258348cd73be1abbac2dfd305901b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0xaede136aec57f44c09c9fd67c2eba978b40b353f58a6b03a44d94a5c95ed5e20, 27, 2105649587654918922898766979389871417879386019604512675937663674343279656080, 24535042895731153725293170378155639049105736745017006661397146508958178149776) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000006e9972213bf459853fa33e28ab7219e9157c8d02
    │   └─ ← [Stop] 
    ├─ [10248] Vulnerable::processMessage("Hello, world!", 0x04a7c1640468915fcb4802b6dcf156e81ac1c25bf70628e1a8290372529d7c90363e57982989afa4e6797cccfe62102aecc89258348cd73be1abbac2dfd305901c)
    │   ├─ [3000] PRECOMPILES::ecrecover(0xaede136aec57f44c09c9fd67c2eba978b40b353f58a6b03a44d94a5c95ed5e20, 28, 2105649587654918922898766979389871417879386019604512675937663674343279656080, 24535042895731153725293170378155639049105736745017006661397146508958178149776) [staticcall]
    │   │   └─ ← [Return] 0x000000000000000000000000e0885219568c8133138ddd06ab1531e341bb40f3
    │   └─ ← [Revert] revert: Invalid signature
    └─ ← [Revert] revert: Invalid signature

Suite result: FAILED. 1 passed; 2 failed; 0 skipped; finished in 1.89ms (2.70ms CPU time)

Ran 1 test suite in 528.50ms (1.89ms CPU time): 1 tests passed, 2 failed, 0 skipped (3 total tests)

Failing tests:
Encountered 2 failing tests in test/8.3.2-Improper-Check-against-Signature-Replay-Attacks-vulnerability.t.sol:VulnerableTest
[FAIL: revert: Invalid signature] testAttackContractReplay() (gas: 82840)
[FAIL: revert: Invalid signature] testReplayAttackWithAlteredSignature() (gas: 76868)

Encountered a total of 2 failing tests, 1 tests succeeded
Regenerating: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-vulnerability.t.sol

Running forge test: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-vulnerability.t.sol (attempt 2)
Passed: 8.3.2-Improper-Check-against-Signature-Replay-Attacks-vulnerability.t.sol
Test file not found, generating first: 8.3.3-Improper-authenticity-check-fixed.t.sol

Running forge test: 8.3.3-Improper-authenticity-check-fixed.t.sol (attempt 1)
Passed: 8.3.3-Improper-authenticity-check-fixed.t.sol
Test file not found, generating first: 8.3.3-Improper-authenticity-check-vulnerability.t.sol

Running forge test: 8.3.3-Improper-authenticity-check-vulnerability.t.sol (attempt 1)
Passed: 8.3.3-Improper-authenticity-check-vulnerability.t.sol
Test file not found, generating first: 8.3.4-Incorrect-Argument-Encoding-fixed.t.sol

Running forge test: 8.3.4-Incorrect-Argument-Encoding-fixed.t.sol (attempt 1)
Failed: 8.3.4-Incorrect-Argument-Encoding-fixed.t.sol
Error:
Compiling 1 files with Solc 0.8.0
Solc 0.8.0 finished in 367.21ms
Compiler run successful with warnings:
Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
 --> src/8.3.4-Incorrect-Argument-Encoding-fixed.sol:9:22:
  |
9 |     function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
  |                      ^^^^^^^^^^^^


Ran 4 tests for test/8.3.4-Incorrect-Argument-Encoding-fixed.t.sol:FixedAccessControlTest
[PASS] testAddUsersAsAdmin() (gas: 65892)
Traces:
  [65892] FixedAccessControlTest::testAddUsersAsAdmin()
    ├─ [44955] FixedAccessControl::addUsers([0x000000000000000000000000000000000000ABcD], [0x0000000000000000000000000000000000001234], 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Stop] 
    ├─ [1567] FixedAccessControl::isAdmin(0x000000000000000000000000000000000000ABcD) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true, "new admin not added") [staticcall]
    │   └─ ← [Return] 
    ├─ [1523] FixedAccessControl::isRegularUser(0x0000000000000000000000000000000000001234) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true, "new regular user not added") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[FAIL: Error != expected error: invalid signature length != Only admins can add users.] testAddUsersAsNonAdminRevert() (gas: 16548)
Traces:
  [563193] FixedAccessControlTest::setUp()
    ├─ [524493] → new FixedAccessControl@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2515 bytes of code
    └─ ← [Stop] 

  [16548] FixedAccessControlTest::testAddUsersAsNonAdminRevert()
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Only admins can add users.)
    │   └─ ← [Return] 
    ├─ [4710] FixedAccessControl::addUsers([0x000000000000000000000000000000000000ABcD], [0x0000000000000000000000000000000000001234], 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Revert] revert: invalid signature length
    └─ ← [Revert] Error != expected error: invalid signature length != Only admins can add users.

[FAIL: Error != expected error: invalid signature length != Only admins can add users.] testAttackFixedRevert() (gas: 369438)
Traces:
  [563193] FixedAccessControlTest::setUp()
    ├─ [524493] → new FixedAccessControl@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2515 bytes of code
    └─ ← [Stop] 

  [369438] FixedAccessControlTest::testAttackFixedRevert()
    ├─ [317003] → new AttackFixed@0x2e234DAe75C793f67A35089C9d99245E1C58470b
    │   └─ ← [Return] 1477 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Only admins can add users.)
    │   └─ ← [Return] 
    ├─ [9667] AttackFixed::performAttack(0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    │   ├─ [4710] FixedAccessControl::addUsers([0x000000000000000000000000000000000000bEEF], [0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF], 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    │   │   └─ ← [Revert] revert: invalid signature length
    │   └─ ← [Revert] revert: invalid signature length
    └─ ← [Revert] Error != expected error: invalid signature length != Only admins can add users.

[FAIL: revert: invalid signature length] testNonAdminWithValidAdminSignatureScenario() (gas: 51857)
Traces:
  [563193] FixedAccessControlTest::setUp()
    ├─ [524493] → new FixedAccessControl@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 2515 bytes of code
    └─ ← [Stop] 

  [51857] FixedAccessControlTest::testNonAdminWithValidAdminSignatureScenario()
    ├─ [23465] FixedAccessControl::addUsers([0x1234567890123456789012345678901234567890], [], 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Stop] 
    ├─ [1567] FixedAccessControl::isAdmin(0x1234567890123456789012345678901234567890) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true, "recovered constant admin not added") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000bEEF)
    │   └─ ← [Return] 
    ├─ [4710] FixedAccessControl::addUsers([0x000000000000000000000000000000000000ABcD], [0x0000000000000000000000000000000000001234], 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Revert] revert: invalid signature length
    └─ ← [Revert] revert: invalid signature length

Suite result: FAILED. 1 passed; 3 failed; 0 skipped; finished in 2.06ms (1.49ms CPU time)

Ran 1 test suite in 519.05ms (2.06ms CPU time): 1 tests passed, 3 failed, 0 skipped (4 total tests)

Failing tests:
Encountered 3 failing tests in test/8.3.4-Incorrect-Argument-Encoding-fixed.t.sol:FixedAccessControlTest
[FAIL: Error != expected error: invalid signature length != Only admins can add users.] testAddUsersAsNonAdminRevert() (gas: 16548)
[FAIL: Error != expected error: invalid signature length != Only admins can add users.] testAttackFixedRevert() (gas: 369438)
[FAIL: revert: invalid signature length] testNonAdminWithValidAdminSignatureScenario() (gas: 51857)

Encountered a total of 3 failing tests, 1 tests succeeded
Regenerating: 8.3.4-Incorrect-Argument-Encoding-fixed.t.sol

Running forge test: 8.3.4-Incorrect-Argument-Encoding-fixed.t.sol (attempt 2)
Passed: 8.3.4-Incorrect-Argument-Encoding-fixed.t.sol
Test file not found, generating first: 8.3.4-Incorrect-Argument-Encoding-vulnerability.t.sol

Running forge test: 8.3.4-Incorrect-Argument-Encoding-vulnerability.t.sol (attempt 1)
Failed: 8.3.4-Incorrect-Argument-Encoding-vulnerability.t.sol
Error:
Compiler run failed:
Error (6933): Expected primary expression.
  --> test/8.3.4-Incorrect-Argument-Encoding-vulnerability.t.sol:67:55:
   |
67 |                 dummySig = abi.encodePacked(dummySig, byte(0));
   |                                                       ^^^^

Error: Compilation failed
Regenerating: 8.3.4-Incorrect-Argument-Encoding-vulnerability.t.sol

Running forge test: 8.3.4-Incorrect-Argument-Encoding-vulnerability.t.sol (attempt 2)
Passed: 8.3.4-Incorrect-Argument-Encoding-vulnerability.t.sol

===== Test run finished: 2025-04-10 18:22:39.345746 =====

