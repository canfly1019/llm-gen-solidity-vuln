pragma solidity >=0.8.0;

/*
    漏洞名稱: Improper Exception Handling of External Calls
    漏洞描述: 此漏洞在於沒有正確處理外部合約調用可能拋出的異常行為。
    範例中，Service合約的 getService 函式直接將傳入的 provider 地址直接當作 Provider 合約來使用，
    卻沒有確認該地址是否真的部署了合約。若提供者地址實際上指向一個惡意合約（例如 MaliciousProvider），
    該合約中 isCustomer 函式可能故意 revert，導致整個交易失敗。
    攻擊範例說明:
    1. 攻擊者部署 MaliciousProvider 合約，其覆寫 isCustomer 函式並刻意 revert。
    2. 當用戶呼叫 Service.getService 並傳入這個惡意合約地址作為 provider 時，
       外部調用 _provider.isCustomer(customer) 將觸發 revert，進而致使整個交易回退。
*/

// 提供者合約介面與實作
contract Provider {
    // 此函式用來檢查 customer 是否為合法用戶，正常情況下會返回 true 或 false
    // 漏洞重點: 未處理外部呼叫可能產生的異常
    function isCustomer(address customer) public virtual returns (bool) {
        // 在真實情況中，可能會有客戶驗證的邏輯
        return false;
    }
}

// 惡意 Provider 合約，用來模擬在外部呼叫中觸發例外
contract MaliciousProvider is Provider {
    // 覆寫 isCustomer 並刻意觸發 revert 來模擬異常行為
    function isCustomer(address customer) public pure override returns (bool) {
        revert("Malicious behavior triggered");
    }
}

// 服務合約，存在漏洞的 getService 函式
contract Service {
    // 漏洞重點函式: 未驗證 provider 地址是否部署合約, 直接調用外部函式 isCustomer
    function getService(address provider, address customer) public {
        // 直接將傳入的地址轉型為 Provider 合約
        Provider _provider = Provider(provider);
        // 調用外部合約函式; 若 provider 合約異常 (例如 revert)，整個交易會回退
        if (_provider.isCustomer(customer)) {
            // 提供服務邏輯 (例如轉帳、狀態更新等)
        }
    }
}

/*
    攻擊步驟舉例:
    1. 攻擊者部署 MaliciousProvider 合約，此合約中的 isCustomer 函式將永遠 revert。
    2. 用戶或其他合約調用 Service.getService 並傳入攻擊者的 MaliciousProvider 合約地址作為 provider。
    3. 調用 _provider.isCustomer(customer) 時會觸發 revert，導致整個 getService 交易失敗。
*/