// Solidity Version: 此漏洞與低階呼叫的檢查有關，與 Solidity 版本無特定關係，但我們採用 >=0.8.0 語法。
pragma solidity >=0.8.0;

// Vulnerable 合約，漏洞重點在於對低階呼叫回傳值沒有檢查，導致呼叫失敗卻未被偵測。
contract ReturnValueVulnerable {
    // 此函式未對低階呼叫的回傳值進行檢查，可能忽略掉重要的錯誤訊息
    function callNotChecked(address callee) public {
        // 攻擊重點：未檢查 success，低階呼叫失敗時會返回 false，但此函式不處理該狀態
        (bool success, ) = callee.call(abi.encodeWithSignature("doSomething()"));
        // 漏洞示意：忽略 success 的值，導致後續操作可能基於錯誤狀態執行
    }
}

// 惡意合約，用以展示攻擊手法。當被呼叫時，其 fallback 函式會 revert，讓低階呼叫失敗。
contract Malicious {
    // fallback 函式故意 revert，造成 call 返回 false (或捕捉到失敗狀態)
    fallback() external payable {
        revert("Malicious fallback triggered.");
    }

    // 此函式不會被正常呼叫到，僅提供 call 介面的參考
    function doSomething() external pure returns (string memory) {
        return "This should not execute";
    }
}

// 攻擊示範合約，用以展示當呼叫 vulnerable 合約的 callNotChecked 函式時，因為未檢查返回值而可能造成意外行為
contract Attack {
    ReturnValueVulnerable public vulnerable;
    Malicious public malicious;

    // 部署時建立 Vulnerable 與 Malicious 合約的實例
    constructor() {
        vulnerable = new ReturnValueVulnerable();
        malicious = new Malicious();
    }

    // 攻擊流程：利用惡意合約的 revert 行為，使 vulnerable 合約在呼叫低階 call 時無法捕捉失敗，卻繼續執行其他邏輯
    function attack() public {
        // 傳入 malicious 合約地址，該呼叫因 fallback revert 而失敗，但 vulnerable 未檢查結果
        vulnerable.callNotChecked(address(malicious));
    }
}
