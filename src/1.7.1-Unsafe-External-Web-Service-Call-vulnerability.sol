// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/*
漏洞名稱: Unsafe External Web Service Call
描述: 此漏洞發生在合約直接呼叫外部網路服務取得資料，並未對返回的數值進行有效驗證，攻擊者可藉由控制回傳內容來操控合約邏輯

攻擊手法說明:
1. 攻擊者部署一個惡意的外部網路服務合約 (MaliciousWebService)，實作 getValue() 函式返回一個攻擊者預設的值。
2. 被攻擊的合約 VulnerableContract 紀錄外部網路服務地址，並在 updateValue() 函式中呼叫該地址的 getValue() 函式，並將結果寫入狀態變數。
3. 攻擊者透過調整 MaliciousWebService 回傳的數值，操控 VulnerableContract 的狀態變數 value。

以下為漏洞版本程式碼：
*/

contract VulnerableContract {
    // 狀態變數，紀錄外部網路服務地址
    address public externalService; // 漏洞重點：未驗證外部服務之真實性
    
    // 狀態變數，存儲從外部網路服務取得的數值
    uint public value;

    // 建構子設定外部網路服務地址
    constructor(address _externalService) {
        externalService = _externalService;
    }

    // updateValue 函式直接呼叫外部服務取得回傳值
    function updateValue() public {
        // 漏洞重點：未驗證外部服務返回的數據
        (bool success, bytes memory data) = externalService.call(abi.encodeWithSignature("getValue()"));
        require(success, "Call failed");
        
        // 直接將回傳值寫入狀態變數
        value = abi.decode(data, (uint));
    }
}

// 模擬惡意的外部網路服務合約，供攻擊者部署並操控返回值
contract MaliciousWebService {
    // 攻擊者可設定的惡意數值
    uint public manipulatedValue;

    // 攻擊者設定惡意數值
    function setManipulatedValue(uint _val) public {
        manipulatedValue = _val;
    }

    // 被呼叫時返回攻擊者設定的數值
    function getValue() public view returns (uint) {
        // 漏洞重點：回傳數值可被攻擊者控制
        return manipulatedValue;
    }
}

/*
攻擊流程:
1. 攻擊者部署 MaliciousWebService，並呼叫 setManipulatedValue 設定任意數值（例如 9999）。
2. 部署 VulnerableContract 時，將 MaliciousWebService 的地址傳入作為 externalService。
3. 呼叫 VulnerableContract 的 updateValue()，合約將從惡意服務取得數值，並更新其狀態，造成不可預期的結果。
*/
