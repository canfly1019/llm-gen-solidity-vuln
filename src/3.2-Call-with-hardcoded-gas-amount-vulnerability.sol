pragma solidity >=0.8.0;

// Vulnerability Code: 存在硬編碼固定 gas 值的問題
// 此合約在呼叫外部合約時，使用固定 gas (10000) 若未來 EVM 指令 gas 成本變動，可能會導致呼叫失敗

interface ICallable {
    function callMe() external;
}

// HardcodedNotGood 合約包含多個易受攻擊的函式
contract HardcodedNotGood {
    // Vulnerable 狀態變數：目標合約地址，硬編碼或設定後不易調整 gas 提供數量
    address payable public _callable;  
    ICallable public callable;  

    // 建構子：將目標合約地址傳入，此處可用於測試攻擊合約
    constructor(address payable _target) payable {
        _callable = _target;  
        callable = ICallable(_target);
    }
    
    // 使用 transfer 傳送 Ether，預設固定 2300 gas，若目標合約邏輯複雜易失敗
    function doTransfer(uint256 amount) public {
        _callable.transfer(amount); // Vulnerable 1: 固定 gas 提供可能不足以處理目標合約邏輯
    }
    
    // 使用 send 傳送 Ether，同樣固定 2300 gas
    function doSend(uint256 amount) public returns (bool) {
        bool success = _callable.send(amount); // Vulnerable 2: 固定 gas 限制可能導致 send 失敗
        return success;
    }
    
    // 呼叫目標合約 fallback 函數，固定指定 gas 為 10000
    function callLowLevel() public {
        // Vulnerable 3: 硬編碼 gas 限制可能會在 EVM 更新後不夠，造成呼叫失敗
        (bool success, ) = _callable.call{value: 0, gas: 10000}("");
        require(success, "callLowLevel failed");
    }
    
    // 呼叫目標合約中 callMe 函數，仍使用固定 gas 10000
    function callWithArgs() public {
        // Vulnerable 4: 固定 gas 呼叫在未來可能失效
        (bool success, ) = address(callable).call{gas: 10000}(abi.encodeWithSignature("callMe()"));
        require(success, "callWithArgs failed");
    }
}

// 攻擊合約：當被呼叫時故意消耗大量 gas，以觸發 HardcodedNotGood 合約中硬編碼 gas 限制的問題
contract Attacker is ICallable {
    event Called(address caller);

    // fallback 函數，故意消耗較多 gas
    fallback() external payable {
        // 進行大量運算以消耗 gas
        for(uint i = 0; i < 1000; i++){
            uint x = i * i; // 模擬耗費 gas 的計算
        }
        emit Called(msg.sender);
    }
    
    // 當 callMe() 被呼叫時，同樣消耗大量 gas
    function callMe() external override {
        for(uint i = 0; i < 1000; i++){
            uint x = i * i;
        }
        emit Called(msg.sender);
    }
}

/*
攻擊步驟說明 (繁體中文)：
1. 部署 Attacker 合約，此合約在 fallback 及 callMe() 中消耗大量 gas。
2. 部署 HardcodedNotGood 合約，並將 Attacker 合約的地址傳入作為 _callable 變數。
3. 呼叫 HardcodedNotGood 中的 callLowLevel 或 callWithArgs 函數，因為固定的 10000 gas 可能不足以完成 Attacker 合約的運算，
   導致呼叫失敗，進而觸發 DoS 或其他意外情形。
*/