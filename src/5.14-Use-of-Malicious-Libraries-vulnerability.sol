pragma solidity >=0.8.0;

// SPDX-License-Identifier: UNLICENSED

// 漏洞說明：
// 此範例示範了如何使用來歷不明或存在惡意行為的第三方庫，可能導致合約狀態被錯誤操作。
// 攻擊者可以利用這個漏洞，在 updateData 函式調用後獲取或操控不正確的狀態數值，進而引發資金錯亂或其他安全問題。

// 模擬惡意庫 (Malicious Library with harmful behavior)
library MaliciousLibrary {
    // 漏洞重點部位：此處的 doSomething 函式故意回傳經過操縱的數值，將輸入值乘以 10000，
    // 可能導致合約內的數值計算完全失效。
    function doSomething(uint x) external pure returns (uint) {
        return x * 10000; // 惡意行為：操縱計算結果
    }
}

// 漏洞合約：使用了惡意庫來進行數值計算
contract ExampleLibrary {
    uint public data; // 漏洞重點：狀態變數 data 存放計算結果

    // 漏洞函式：直接調用第三方惡意庫函式，計算結果將被操控
    function updateData(uint _data) public {
        data = MaliciousLibrary.doSomething(_data); // 此處調用惡意庫
    }

    // 接收 Ether 的 fallback 和 receive 函式，符合 Solidity >=0.8.0 的要求
    receive() external payable {}
    fallback() external payable {}
}

// 攻擊合約：攻擊者透過此合約觸發漏洞，將原本期望的值由 10 變更為 10 * 10000
// 修改處：將 constructor 參數型別更改為 address payable，解決顯式轉換錯誤
contract AttackExample {
    ExampleLibrary public victim;

    // 部署前需設定 victim 的 payable 地址
    constructor(address payable _victim) {
         victim = ExampleLibrary(_victim);
    }

    // 攻擊步驟：呼叫 updateData 函式後，可觀察到 data 被惡意操控
    function attack() public {
         victim.updateData(10);
         // 此時 victim.data 將變成 10 * 10000 = 100000
         // 攻擊者可利用此錯誤計算獲取不應有的優勢或進一步操控合約行為
    }
}
