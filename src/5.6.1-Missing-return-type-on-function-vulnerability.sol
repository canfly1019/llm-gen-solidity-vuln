pragma solidity >=0.8.0;

// 定義介面 Token，要求 transfer 函式回傳 bool
interface Token {
    // 漏洞重點：函式定義符合接口，要求回傳 bool
    function transfer() external returns (bool);
}

// 漏洞合約：BadToken，未依據介面定義正確回傳 bool
contract BadToken {
    // 漏洞重點：transfer 函式缺少回傳值，實作與接口不符
    function transfer() external {
        // 可以在此加入一些惡意邏輯，或故意不回傳值
    }
}

// Wallet 合約依賴 Token 介面，用於執行轉帳
contract Wallet {
    // 漏洞重點：依賴 Token.transfer() 的回傳值作為 require 條件
    function transfer(address token) external {
        // 當傳入的是 BadToken 時，因 transfer() 沒有回傳值，可能導致 require 的結果不如預期
        require(Token(token).transfer(), "Transfer failed");
    }
}

/*
攻擊手法補充描述：
1. 攻擊者部署 BadToken，該合約中的 transfer() 方法沒有回傳值（應該回傳 bool），
   與 Token 接口定義不符。
2. 攻擊者再部署 Wallet 合約或利用已存在的 Wallet，並呼叫 transfer() 方法，將 BadToken 的地址作為參數傳入。
3. 由於 Wallet 的 transfer() 依賴於 Token(token).transfer() 回傳的 bool 值來判斷是否繼續操作，
   而 BadToken 未回傳 bool，可能導致返回默認值 false（或其他不確定行為），進而使得 require 失敗或產生意外行為。

示範攻擊的簡單合約：
*/

contract Attack {
    Wallet wallet;

    // 在部署 Attack 合約時傳入目標 Wallet 的地址
    constructor(address _wallet) {
        wallet = Wallet(_wallet);
    }

    // 攻擊方法：呼叫 Wallet.transfer() 並傳入漏洞合約 BadToken 的地址
    function attack(address tokenAddress) external {
        wallet.transfer(tokenAddress);
    }
}