pragma solidity >=0.8.0;

// SPDX-License-Identifier: UNLICENSED
// 此合約存在 Unreachable Payable Function 的漏洞，能夠接收 Ether 但沒有提款機制，進而導致資金被永久鎖定。
contract LockedVulnerable {
    // 漏洞重點：此 receive 函數標示為 payable，使合約可以接受 Ether，但合約中沒有任何提款或使用這些資金的機制。
    receive() external payable {
        // 收到的 Ether 將會被永久鎖定在此合約中，因為沒有提供提款功能。
    }
}

// 攻擊合約：用以模擬攻擊步驟，將 Ether 傳入 LockedVulnerable 合約，進而確認資金無法被取回。
contract AttackLockedVulnerable {
    // 利用此函數發動攻擊，將攻擊者的 Ether 轉入目標合約 LockedVulnerable。
    function attack(address payable target) external payable {
        // 傳送 Ether 給有漏洞的合約，因為 target 合約允許接收 Ether 卻沒有提款機制。
        (bool sent, ) = target.call{value: msg.value}("");
        require(sent, "Transfer failed");
    }

    // 查詢目標合約餘額，確認傳入的 Ether 是否已被鎖定
    function getTargetBalance(address payable target) external view returns (uint) {
        return target.balance;
    }
}

/*
攻擊步驟說明：
1. 部署 LockedVulnerable 合約。
2. 部署 AttackLockedVulnerable 合約。
3. 從 AttackLockedVulnerable 呼叫 attack 函數，並傳送一定數量的 Ether 至 LockedVulnerable。
4. 使用 getTargetBalance 函數確認 LockedVulnerable 合約中已累積 Ether，但由於無提款功能，這些資金將無法取回。
*/