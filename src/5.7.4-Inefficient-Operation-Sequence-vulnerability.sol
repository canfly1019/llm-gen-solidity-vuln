// Vulnerability Code Example
// 漏洞名稱：Inefficient Operation Sequence
// 描述：此合約中有一個 gas 效率不佳的迴圈實作，因為在迴圈中每次都重複讀取 state 變數 data 的長度，
// 導致不必要的計算而增加 gas 消耗。當資料量增加時，攻擊者可利用此漏洞使得某些操作耗費過多 gas，
// 可能導致交易失敗（例如在需要處理大量資料的情境下導致 Denial-of-Service）。

pragma solidity >=0.8.0;

contract VulnerableContract {
    // 狀態變數：儲存需要處理的資料
    uint[] public data; // (漏洞重點) 資料儲存

    // 新增資料到 state 陣列中
    function addData(uint _value) public {
        data.push(_value);
    }

    // 非最佳化的計算總和函式，於迴圈中每次呼叫 data.length 造成 gas 額外消耗
    function sumData() public view returns (uint sum) {
        // (漏洞重點) 此處每次迴圈都重新讀取 data.length
        for (uint i = 0; i < data.length; i++) {
            sum += data[i];
        }
    }
}

// 攻擊合約：利用大量數據觸發迴圈操作造成高額 gas 消耗
// 攻擊步驟：
// 1. 部署 VulnerableContract。
// 2. 利用 AttackContract 呼叫 addData() 多次，注入大量資料。
// 3. 呼叫 sumData() 函數進行計算，由於資料量大且每次迴圈都重複讀取 data.length，
//    因此可能會消耗大量 gas，若在需要支付 gas 的情況下（例如在交易中使用），可能導致交易失敗。
contract AttackContract {
    VulnerableContract public vulnerable;

    constructor(address _vulnerableAddress) {
        vulnerable = VulnerableContract(_vulnerableAddress);
    }

    // 攻擊函式：透過大量呼叫 addData 並觸發 sumData 造成 gas 耗竭
    function attack() public {
        // 模擬加入大量資料（例如 1000 筆）
        for (uint i = 0; i < 1000; i++) {
            vulnerable.addData(i);
        }
        // 呼叫 sumData() 會因迴圈中重複讀取 data.length 而造成過度的 gas 消耗
        vulnerable.sumData();
    }
}
