// SPDX-License-Identifier: MIT
// 說明：此合約因為未鎖定具體的 compiler 版本(僅使用寬鬆版位，例如 pragma solidity >=0.8.0)，可能在不同編譯器版本下表現不一，進而出現已知或未知的漏洞。
// 此漏洞稱為 Undetermined Program Version Prevalence。
// 注意：在 Solidity >=0.8.0 中大部分安全性問題已改善，但若不鎖定特定版本，開發者可能無法追蹤特定版本的行為，從而導致攻擊面增加。

pragma solidity >=0.8.0;

contract PragmaNotLocked {
    // 潛在漏洞：狀態變數 x 於未被鎖定合約中，未明確限制編譯器版本，可能在不同版本編譯下出現不一致的行為
    uint public x = 1;
}

// 攻擊合約示範：
// 攻擊者假設已知某一特定舊版本中存在的行為差異，可以藉由使用該版本編譯部署來觸發漏洞，或利用編譯器差異造成儲存或數值處理異常。

contract Attack {
    PragmaNotLocked public vulnerable;

    // 在部署 Attack 前，必須先部署 PragmaNotLocked 合約，並將其地址傳入此合約
    constructor(address _vulnerable) {
        vulnerable = PragmaNotLocked(_vulnerable);
    }

    // exploit 函式僅作為示範，實際攻擊可能涉及更複雜的操作
    function exploit() public view returns (uint) {
        // 回傳 vulnerable 合約中的 x 值，若該值與預期不符，可視為版本差異的攻擊信號
        return vulnerable.x();
    }
}

/*
測試/部署流程說明 (繁體中文)：
1. 使用 Solidity 編譯器版本 0.8.0 或更高版本編譯此合約，但因為合約未鎖定至特定版本，攻擊者可以嘗試用不同次版本來編譯並觀察行為差異。
2. 部署 PragmaNotLocked 合約，再部署 Attack 合約並注入 PragmaNotLocked 的合約地址。
3. 呼叫 exploit() 函式，若回傳值出現異常，則可能是因為編譯器版本引入行為差異的結果，從而驗證漏洞存在。
*/