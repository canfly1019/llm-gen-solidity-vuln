pragma solidity >=0.8.0;
// SPDX-License-Identifier: UNLICENSED

// 漏洞描述：在 Solidity 中，整數除法會捨棄小數部分。此示範中 4/5 的計算結果為 0，可能導致下游邏輯錯誤，進而可能被攻擊者利用錯誤的數值進行攻擊。

contract Division {
    // vulnerable function: 此函式在進行除法運算時未考慮小數部分
    function foo() public pure returns (uint) {
        uint numerator = 4;
        uint denominator = 5;
        // 漏洞重點：整數除法會捨棄小數，故計算結果為 0
        uint result = numerator / denominator;
        return result;
    }
}

// 為了解決在 pure 函式中不能使用 new 操作符創建合約實例，我們將 DivisionStatic 改為 library，讓其函式能夠直接被調用。
library DivisionStatic {
    // 此函式模擬原本存在漏洞的除法操作，返回 4/5 的結果
    function foo() internal pure returns (uint) {
        uint numerator = 4;
        uint denominator = 5;
        // 漏洞：直接進行整數除法導致結果為 0
        uint result = numerator / denominator;
        return result;
    }
}

// 攻擊合約示範如何利用上述漏洞
contract Attacker {
    // 此函式模擬依賴 DivisionStatic.foo() 返回結果進行後續判斷，並驗證計算結果不符合預期
    function attackDivision() public pure returns (uint) {
        // 直接呼叫 library DivisionStatic 的函式 foo()
        uint value = DivisionStatic.foo();
        // 預期結果應為 0，但若下游邏輯依賴非 0 的結果，會導致漏洞被利用
        require(value == 0, "Unexpected value, integer division bug not triggered");
        return value;
    }
}

/*
部署與測試說明:
1. 部署合約 Division，以及 library DivisionStatic 已編譯進 Attacker
2. 呼叫 Attacker 合約中的 attackDivision()，驗證 4/5 的結果確實為 0，從而展示整數除法導致精度缺失的漏洞。
*/
