pragma solidity >=0.8.0;

// 漏洞說明：
// 此程式碼展示了 Conversion Bugs 漏洞。主要問題在於將 uint256 轉型為 uint8 時，當輸入值超過 255 時，會被截斷成較小的數值，可能導致不預期的行為。
// 攻擊範例說明：
// 1. 攻擊者呼叫 setImportantValue(256) ，因為 256 轉成 uint8 會變成 0。
// 2. 攻擊者再呼叫 checkValue(0) ，可以通過檢查，從而造成邏輯錯誤，或在真實情境中可能繞過重要檢查機制。

contract VulnerableConversion {
    // 漏洞重點：狀態變數 importantValue 使用了 uint8 型態，並透過不安全的轉換來儲存重要參數
    uint8 public importantValue;

    // 漏洞重點：函式 setImportantValue 採用從 uint256 到 uint8 的直接轉換，可能導致數據截斷
    function setImportantValue(uint256 _val) public {
        // 當 _val 大於 255 時，資料會被截斷，例如 256 會變為 0
        importantValue = uint8(_val);
    }

    // 檢查函式：將輸入的 uint256 與重要的 uint8 進行比較
    function checkValue(uint256 _input) public view returns (bool) {
        return (_input == importantValue);
    }
}

/*
部署與攻擊步驟：
1. 部署 VulnerableConversion 合約。
2. 攻擊者呼叫 setImportantValue(256) ，此時 importantValue 實際上存放的是 0（256 % 256 = 0）。
3. 攻擊者呼叫 checkValue(0) ，返回 true，可能繞過了原本預期的檢查邏輯。
*/
