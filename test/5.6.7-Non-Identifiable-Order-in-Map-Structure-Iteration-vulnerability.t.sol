pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/5.6.7-Non-Identifiable-Order-in-Map-Structure-Iteration-vulnerability.sol";

contract VulnerableOrderProcessorTest is Test {
    VulnerableOrderProcessor public orderProcessor;

    // Re-declare the event signature for testing purposes
    event OrderProcessed(uint id, uint amount, address buyer);

    function setUp() public {
        orderProcessor = new VulnerableOrderProcessor();
    }

    function testDuplicateOrderProcessing() public {
        // Attacker's address
        address attacker = address(0x1234);
        
        // Attacker adds the same order id twice
        vm.prank(attacker);
        orderProcessor.addOrder(1, 100);
        vm.prank(attacker);
        orderProcessor.addOrder(1, 100);

        /*
         Vulnerability demonstration:
         The orderIds array now contains two entries with the same id (1)
         When processOrders is called, the same order will be processed twice.
         This is verified by expecting two OrderProcessed events for order id 1.
        */
        
        // Expect the first event
        vm.expectEmit(true, true, true, true);
        emit OrderProcessed(1, 100, attacker);
        // Expect the second event (duplicate processing)
        vm.expectEmit(true, true, true, true);
        emit OrderProcessed(1, 100, attacker);
        
        orderProcessor.processOrders();

        // After processing, the orderIds array is cleared. Calling processOrders again should
        // not emit any events, even if an order remains in orders mapping (since orderIds is empty).
        // Test this by adding a new order and processing once.
        vm.prank(attacker);
        orderProcessor.addOrder(2, 200);
        vm.expectEmit(true, true, true, true);
        emit OrderProcessed(2, 200, attacker);
        orderProcessor.processOrders();
    }

    function testNoDuplicateProcessingAfterClear() public {
        // This test ensures that after processOrders, the orderIds array is cleared
        address user = address(0x5678);
        
        // Add duplicate orders
        vm.prank(user);
        orderProcessor.addOrder(3, 300);
        vm.prank(user);
        orderProcessor.addOrder(3, 300);
        
        // Process orders once
        vm.expectEmit(true, true, true, true);
        emit OrderProcessed(3, 300, user);
        vm.expectEmit(true, true, true, true);
        emit OrderProcessed(3, 300, user);
        orderProcessor.processOrders();
        
        // Attempt to process orders again, expecting no events because the orderIds array was cleared
        // We use expectRevert with empty logs check by capturing logs before and after

        uint logsLengthBefore = vm.getRecordedLogs().length;
        orderProcessor.processOrders();
        uint logsLengthAfter = vm.getRecordedLogs().length;
        
        // No new events should have been emitted
        assertEq(logsLengthAfter, logsLengthBefore, "No orders should be processed after clearing orderIds");
    }
}
