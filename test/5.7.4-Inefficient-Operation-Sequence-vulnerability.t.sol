pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/5.7.4-Inefficient-Operation-Sequence-vulnerability.sol";

contract InefficientOperationSequenceTest is Test {
    VulnerableContract vulnerable;
    AttackContract attackContract;

    function setUp() public {
        vulnerable = new VulnerableContract();
        attackContract = new AttackContract(address(vulnerable));
    }

    function testAttackFailsWithLowGas() public {
        // With a low gas limit, the attack should run out of gas when performing the gas intensive sumData call
        vm.expectRevert();
        // Use a low gas limit (e.g., around 500_000) to force an out-of-gas error
        attackContract.attack{gas: 500_000}();
    }

    function testAttackSucceedsWithHighGas() public {
        // With a high gas limit, the inefficient loop should eventually complete
        // Note: The sum of values from 0 to 999 is: (999 * 1000) / 2 = 499500
        // We'll use a sufficiently high gas limit (e.g., 40,000,000) to allow the loop to run
        attackContract.attack{gas: 40_000_000}();
        uint expectedSum = (999 * 1000) / 2;
        uint sum = vulnerable.sumData();
        assertEq(sum, expectedSum, "High gas attack should succeed");
    }
}
