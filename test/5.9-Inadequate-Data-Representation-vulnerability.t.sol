pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/5.9-Inadequate-Data-Representation-vulnerability.sol";

contract InadequateDataRepresentationTest is Test {
    MyContract public vulnerable;
    Attack public attackInstance;
    
    // Use a fixed attacker address
    address public attacker = address(0x1337);
    
    function setUp() public {
        // Deploy the vulnerable contract and the attack contract
        vulnerable = new MyContract();
        attackInstance = new Attack(address(vulnerable));
        
        // Pre-fund the vulnerable contract with 9 ether so that when deposit + withdraw occur,
        // it has enough balance to pay out 10 ether
        vm.deal(address(vulnerable), 9 ether);

        // Ensure attacker has sufficient ether to launch the attack
        vm.deal(attacker, 2 ether);
    }
    
    function testDepositRevertsWithWrongAmount() public {
        // When depositing the wrong amount (e.g., 0.5 ether), deposit should revert
        vm.prank(attacker);
        vm.expectRevert("Deposit 1 ether exactly");
        vulnerable.deposit{value: 0.5 ether}();
    }

    function testExploit() public {
        // At this point, the vulnerable contract holds 9 ether pre-funded
        // The attacker will send 1 ether via the attack contract, making total 10 ether in the contract
        // However, withdraw will send out 10 ether instead of the intended 1 ether, enabling the attack

        // Execute the attack from the attacker address
        vm.prank(attacker);
        attackInstance.attack{value: 1 ether}();
        
        // After the attack, the Attack contract (i.e., the attackInstance contract) should have received
        // 10 ether, draining the vulnerable contract's funds.
        uint attackBalance = address(attackInstance).balance;
        assertEq(attackBalance, 10 ether, "Attack contract did not receive 10 ether");
        
        // The vulnerable contract should have 0 balance now
        assertEq(address(vulnerable).balance, 0, "Vulnerable contract not drained");
    }

    // Allow the test contract to receive Ether
    receive() external payable {}
}
