pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/6.1.4-Transfer-Pre-Condition-Dependent-on-Transaction-Order-vulnerability.sol";

// We re-declare the event so we can use it in vm.expectEmit
// The event signature must exactly match the one from the vulnerable contract

contract VulnerableTransactionOrderingTest is Test {
    // The event declaration must match the target contract
    event Purchase(address indexed buyer, uint256 price);

    VulnerableTransactionOrdering vulnerable;
    AttackVulnerable attacker;

    function setUp() public {
        vulnerable = new VulnerableTransactionOrdering();
        attacker = new AttackVulnerable(address(vulnerable));
    }

    function testOnlyOwnerCanSetPrice() public {
        address nonOwner = address(0xbEEF);
        vm.prank(nonOwner);
        vm.expectRevert("Not owner");
        vulnerable.setPrice(300);
    }

    // Test where the attack is executed before the owner updates the price.
    // In that scenario, the price should remain at the initial value (100).
    function testAttackBeforePriceChange() public {
        uint256 initialPrice = vulnerable.price();
        assertEq(initialPrice, 100, "Initial price should be 100");

        // We expect the Purchase event to be emitted with buyer as the AttackVulnerable contract address and price = 100
        vm.expectEmit(true, false, false, true);
        emit Purchase(address(attacker), initialPrice);

        attacker.executeAttack();
    }

    // Test where the owner updates the price before the attacker's purchase.
    // In that scenario, the price should be updated and the attack purchase gets the new price.
    function testAttackAfterPriceChange() public {
        // Owner (which deployed the vulnerable contract in setUp) changes the price
        vulnerable.setPrice(200);
        uint256 updatedPrice = vulnerable.price();
        assertEq(updatedPrice, 200, "Price should be updated to 200");

        // We expect the Purchase event to be emitted with buyer as the AttackVulnerable contract address and price = 200
        vm.expectEmit(true, false, false, true);
        emit Purchase(address(attacker), updatedPrice);

        attacker.executeAttack();
    }
}
