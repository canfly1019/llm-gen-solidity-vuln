pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/6.2.2-Extraneous-Input-Validation-vulnerability.sol";

contract VulnerabilityTest is Test {
    AttackVulnerable public attackContract;
    Bar public bar;

    event Error(string message);

    function setUp() public {
        // Deploy the AttackVulnerable contract, which in turn deploys Bar
        attackContract = new AttackVulnerable();
        bar = attackContract.bar();
    }

    function testDoubleBazReverts() public {
        // Test that calling Bar.doubleBaz() directly reverts with the expected message
        vm.expectRevert("x must be negative");
        bar.doubleBaz();
    }

    function testAttackCatchesRevert() public {
        // Test that AttackVulnerable.attack() catches the revert and emits the expected error event
        vm.expectEmit(true, false, false, true);
        emit Error("x must be negative");
        attackContract.attack();
    }
}
