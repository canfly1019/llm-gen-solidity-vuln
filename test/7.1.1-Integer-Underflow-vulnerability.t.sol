pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/7.1.1-Integer-Underflow-vulnerability.sol";

contract VulnerabilityTest is Test {
    VulnerableMappingSym1 vulnerable;
    AttackVulnerability attacker;

    // Runs before each test
    function setUp() public {
        vulnerable = new VulnerableMappingSym1();
        attacker = new AttackVulnerability(address(vulnerable));
    }

    // Test the underflow vulnerability by calling init directly
    function testUnderflowDirectCall() public {
        uint256 key = 42;

        // Check that the initial value is 0
        assertEq(vulnerable.map(key), 0, "Initial value should be zero");

        // Calling init should cause an underflow, turning 0-1 into uint256 max value
        vulnerable.init(key, 1);

        // The value should now be 2^256 - 1
        assertEq(vulnerable.map(key), type(uint256).max, "Underflow did not occur as expected");
    }

    // Test the attack contract execution
    function testAttackContractExploit() public {
        uint256 key = 100;

        // Check that the value is initially 0
        assertEq(vulnerable.map(key), 0, "Initial value should be zero");

        // Attack using the AttackVulnerability contract
        attacker.attack(key);

        // The value should underflow and become 2^256 - 1
        assertEq(vulnerable.map(key), type(uint256).max, "Attack did not underflow as expected");
    }
}
