pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/7.2.2-Integer-Division-vulnerability.sol";

contract VulnerabilityTest is Test {
    Division division;
    Attacker attacker;

    function setUp() public {
        // Deploy the contracts
        division = new Division();
        attacker = new Attacker();
    }

    function testDivisionReturnsZero() public {
        // Verify that the integer division 4/5 returns 0
        uint expected = 0;
        uint result = division.foo();
        assertEq(result, expected, "Division.foo() should return 0 due to truncated division");
    }

    function testAttackerAttackDivision() public {
        // Call the attack function from the Attacker contract which relies on DivisionStatic.foo()
        // The attackDivision function requires that the value is exactly 0, otherwise it will revert.
        // Thus if it passes, it demonstrates that the integer division indeed returns 0.
        uint attackerResult = attacker.attackDivision();
        uint expected = 0;
        assertEq(attackerResult, expected, "Attacker.attackDivision() didn't yield the expected result of 0");
    }
}
